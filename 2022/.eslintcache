[{"/home/jacob/advent-of-code/2022/solutions/day01_1/index.js":"1","/home/jacob/advent-of-code/2022/solutions/day01_2/index.js":"2","/home/jacob/advent-of-code/2022/solutions/day02_1/index.js":"3","/home/jacob/advent-of-code/2022/solutions/day02_2/index.js":"4","/home/jacob/advent-of-code/2022/solutions/day03_1/index.js":"5","/home/jacob/advent-of-code/2022/solutions/day03_2/index.js":"6","/home/jacob/advent-of-code/2022/solutions/day04_1/index.js":"7","/home/jacob/advent-of-code/2022/solutions/day04_2/index.js":"8","/home/jacob/advent-of-code/2022/solutions/day05_1/index.js":"9","/home/jacob/advent-of-code/2022/solutions/day05_2/index.js":"10","/home/jacob/advent-of-code/2022/solutions/day06_1/index.js":"11","/home/jacob/advent-of-code/2022/solutions/day06_2/index.js":"12","/home/jacob/advent-of-code/2022/solutions/day07_1/index.js":"13","/home/jacob/advent-of-code/2022/solutions/day07_2/index.js":"14","/home/jacob/advent-of-code/2022/solutions/day08_1/index.js":"15","/home/jacob/advent-of-code/2022/solutions/day08_2/index.js":"16","/home/jacob/advent-of-code/2022/solutions/day09_1/index.js":"17","/home/jacob/advent-of-code/2022/solutions/day09_2/index.js":"18","/home/jacob/advent-of-code/2022/solutions/day10_1/index.js":"19","/home/jacob/advent-of-code/2022/solutions/day10_2/index.js":"20","/home/jacob/advent-of-code/2022/solutions/day11_1/index.js":"21","/home/jacob/advent-of-code/2022/solutions/day11_2/index.js":"22","/home/jacob/advent-of-code/2022/solutions/day12_1/index.js":"23","/home/jacob/advent-of-code/2022/solutions/day12_2/index.js":"24","/home/jacob/advent-of-code/2022/solutions/day13_1/index.js":"25","/home/jacob/advent-of-code/2022/solutions/day13_2/index.js":"26","/home/jacob/advent-of-code/2022/solutions/day14_1/index.js":"27","/home/jacob/advent-of-code/2022/solutions/day14_2/index.js":"28","/home/jacob/advent-of-code/2022/solutions/day15_1/index.js":"29","/home/jacob/advent-of-code/2022/solutions/day15_2/index.js":"30","/home/jacob/advent-of-code/2022/solutions/day16_1/index.js":"31","/home/jacob/advent-of-code/2022/solutions/day16_2/index.js":"32","/home/jacob/advent-of-code/2022/solutions/day17_1/index.js":"33","/home/jacob/advent-of-code/2022/solutions/day17_2/index.js":"34","/home/jacob/advent-of-code/2022/solutions/day18_1/index.js":"35","/home/jacob/advent-of-code/2022/solutions/day18_2/index.js":"36","/home/jacob/advent-of-code/2022/solutions/day19_1/index.js":"37","/home/jacob/advent-of-code/2022/solutions/day19_2/index.js":"38","/home/jacob/advent-of-code/2022/solutions/day20_1/index.js":"39","/home/jacob/advent-of-code/2022/solutions/day20_2/index.js":"40","/home/jacob/advent-of-code/2022/solutions/day21_1/index.js":"41","/home/jacob/advent-of-code/2022/solutions/day21_2/index.js":"42","/home/jacob/advent-of-code/2022/solutions/day22_1/index.js":"43","/home/jacob/advent-of-code/2022/solutions/day22_2/index.js":"44","/home/jacob/advent-of-code/2022/solutions/day23_1/index.js":"45","/home/jacob/advent-of-code/2022/solutions/day23_2/index.js":"46","/home/jacob/advent-of-code/2022/solutions/day24_1/index.js":"47","/home/jacob/advent-of-code/2022/solutions/day24_2/index.js":"48","/home/jacob/advent-of-code/2022/solutions/day25_1/index.js":"49","/home/jacob/advent-of-code/2022/solutions/day25_2/index.js":"50"},{"size":432,"mtime":1671518176750,"results":"51","hashOfConfig":"52"},{"size":465,"mtime":1671518176750,"results":"53","hashOfConfig":"52"},{"size":640,"mtime":1671518176750,"results":"54","hashOfConfig":"52"},{"size":720,"mtime":1671518176750,"results":"55","hashOfConfig":"52"},{"size":763,"mtime":1671518962860,"results":"56","hashOfConfig":"52"},{"size":881,"mtime":1671518176750,"results":"57","hashOfConfig":"52"},{"size":582,"mtime":1671518176750,"results":"58","hashOfConfig":"52"},{"size":687,"mtime":1671518176750,"results":"59","hashOfConfig":"52"},{"size":1092,"mtime":1671518176750,"results":"60","hashOfConfig":"52"},{"size":1082,"mtime":1671518176750,"results":"61","hashOfConfig":"52"},{"size":352,"mtime":1671518176750,"results":"62","hashOfConfig":"52"},{"size":356,"mtime":1671518176750,"results":"63","hashOfConfig":"52"},{"size":1404,"mtime":1671518176750,"results":"64","hashOfConfig":"52"},{"size":1550,"mtime":1671518176750,"results":"65","hashOfConfig":"52"},{"size":1175,"mtime":1671518176750,"results":"66","hashOfConfig":"52"},{"size":1151,"mtime":1671518176750,"results":"67","hashOfConfig":"52"},{"size":1520,"mtime":1671518176750,"results":"68","hashOfConfig":"52"},{"size":1565,"mtime":1671518176750,"results":"69","hashOfConfig":"52"},{"size":638,"mtime":1671518176750,"results":"70","hashOfConfig":"52"},{"size":957,"mtime":1671518176750,"results":"71","hashOfConfig":"52"},{"size":1784,"mtime":1671518176750,"results":"72","hashOfConfig":"52"},{"size":1899,"mtime":1671518176750,"results":"73","hashOfConfig":"52"},{"size":2752,"mtime":1671518176750,"results":"74","hashOfConfig":"52"},{"size":2901,"mtime":1671518176750,"results":"75","hashOfConfig":"52"},{"size":1192,"mtime":1671518176750,"results":"76","hashOfConfig":"52"},{"size":1240,"mtime":1671518176750,"results":"77","hashOfConfig":"52"},{"size":2690,"mtime":1671518176750,"results":"78","hashOfConfig":"52"},{"size":3155,"mtime":1671518176750,"results":"79","hashOfConfig":"52"},{"size":2521,"mtime":1671518176750,"results":"80","hashOfConfig":"52"},{"size":2158,"mtime":1671518176750,"results":"81","hashOfConfig":"52"},{"size":2955,"mtime":1671518176750,"results":"82","hashOfConfig":"52"},{"size":4543,"mtime":1671518176750,"results":"83","hashOfConfig":"52"},{"size":2339,"mtime":1671518176750,"results":"84","hashOfConfig":"52"},{"size":4024,"mtime":1671518176750,"results":"85","hashOfConfig":"52"},{"size":2841,"mtime":1671518176750,"results":"86","hashOfConfig":"52"},{"size":2824,"mtime":1671518176750,"results":"87","hashOfConfig":"52"},{"size":6176,"mtime":1671518176750,"results":"88","hashOfConfig":"52"},{"size":197,"mtime":1671518176750,"results":"89","hashOfConfig":"52"},{"size":2109,"mtime":1671518981250,"results":"90","hashOfConfig":"52"},{"size":1344,"mtime":1671518997200,"results":"91","hashOfConfig":"52"},{"size":197,"mtime":1671518176750,"results":"92","hashOfConfig":"52"},{"size":197,"mtime":1671518176750,"results":"93","hashOfConfig":"52"},{"size":197,"mtime":1671518176750,"results":"94","hashOfConfig":"52"},{"size":197,"mtime":1671518176750,"results":"95","hashOfConfig":"52"},{"size":197,"mtime":1671518176750,"results":"96","hashOfConfig":"52"},{"size":197,"mtime":1671518176750,"results":"97","hashOfConfig":"52"},{"size":197,"mtime":1671518176750,"results":"98","hashOfConfig":"52"},{"size":197,"mtime":1671518176750,"results":"99","hashOfConfig":"52"},{"size":197,"mtime":1671518176750,"results":"100","hashOfConfig":"52"},{"size":197,"mtime":1671518176750,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"105"},"qjdlnn",{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":4,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":5,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":8,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":9,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":4,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":12,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":12,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":12,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":11,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":5,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":5,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":7,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":7,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":10,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":10,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":16,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":5,"fixableWarningCount":0,"source":"220"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":13,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":27,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":21,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":13,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":13,"fixableWarningCount":0,"source":"232"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":17,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":17,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":12,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":12,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":14,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":28,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":28,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"252"},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"252"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"252"},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"252"},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"252"},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"252"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"252"},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"252"},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"252"},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"252"},"/home/jacob/advent-of-code/2022/solutions/day01_1/index.js",["289","290","291"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input\n  .split('\\n\\n')\n  .map((elf) => elf.split('\\n').map((num) => parseInt(num)));\n\nconst calculateSolution = (input) => {\n  console.log(input);\n  return input\n    .reduce(\n      (acc, curr) => [...acc, curr.reduce((acc2, curr2) => acc2 + curr2)],\n      [],\n    ).sort((a, b) => b - a)[0];\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day01_2/index.js",["292","293","294"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input\n  .split('\\n\\n')\n  .map((elf) => elf.split('\\n').map((num) => parseInt(num)));\n\nconst calculateSolution = (input) => {\n  console.log(input);\n  return input\n    .reduce(\n      (acc, curr) => [...acc, curr.reduce((acc2, curr2) => acc2 + curr2)],\n      [],\n    ).sort((a, b) => b - a).slice(0, 3).reduce((a, b) => a + b);\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day02_1/index.js",["295","296"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => row.split(' '));\n\nconst calculateSolution = (input) => {\n  const choiceScores = { X: 1, Y: 2, Z: 3 };\n  const winScores = { A: { X: 3, Y: 6, Z: 0 }, B: { X: 0, Y: 3, Z: 6 }, C: { X: 6, Y: 0, Z: 3 } };\n  let totalScore = 0;\n  for (const round of input) {\n    const theirs = round[0];\n    const mine = round[1];\n    const choiceScore = choiceScores[mine];\n    const winScore = winScores[theirs][mine];\n    totalScore += (choiceScore + winScore);\n  }\n  return totalScore;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day02_2/index.js",["297","298","299","300"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => row.split(' '));\n\nconst calculateSolution = (input) => {\n  const choiceScores = { A: 1, B: 2, C: 3 };\n  const choices = {\n    A: { X: 'C', Y: 'A', Z: 'B' },\n    B: { X: 'A', Y: 'B', Z: 'C' },\n    C: { X: 'B', Y: 'C', Z: 'A' },\n  };\n  const winScores = { X: 0, Y: 3, Z: 6 };\n  let totalScore = 0;\n  for (const round of input) {\n    const theirs = round[0];\n    const mine = round[1];\n    const choiceScore = choiceScores[choices[theirs][mine]];\n    const winScore = winScores[mine];\n    totalScore += choiceScore + winScore;\n  }\n  return totalScore;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day03_1/index.js",["301"],[],"/home/jacob/advent-of-code/2022/solutions/day03_2/index.js",["302","303","304","305","306","307"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n');\n\nconst calculateSolution = (input) => {\n  let sum = 0;\n  for (let i = 0; i < input.length; i += 3) {\n    const elf1 = new Set(input[i].split(''));\n    const elf2 = new Set(input[i + 1].split(''));\n    const elf3 = new Set(input[i + 2].split(''));\n\n    const common = [...elf1].filter((item) => elf2.has(item)).filter((item) => elf3.has(item))[0];\n    sum += priority(common);\n  }\n  return sum;\n};\n\nconst priority = (char) => {\n  const ascii = char.charCodeAt(0);\n  if (ascii >= 97) {\n    return ascii - 96;\n  }\n  return ascii - 64 + 26;\n};\n\nexport default solution;\nfunction findMatch(left, right) {\n  for (const leftChar of left) {\n    for (const rightChar of right) {\n      if (leftChar === rightChar) {\n        return leftChar;\n      }\n    }\n  }\n}\n","/home/jacob/advent-of-code/2022/solutions/day04_1/index.js",["308","309","310","311","312","313"],[],"import { parse } from 'mathjs';\n\nconst solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input\n  .split('\\n')\n  .map((row) => row.split(',').map((elf) => elf.split('-').map((num) => parseInt(num))));\n\nconst calculateSolution = (input) => {\n  let count = 0;\n  for (const row of input) {\n    const elf1 = row[0];\n    const elf2 = row[1];\n    if (\n      (elf1[0] <= elf2[0] && elf1[1] >= elf2[1])\n      || (elf1[0] >= elf2[0] && elf1[1] <= elf2[1])\n    ) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day04_2/index.js",["314","315","316","317","318","319","320","321","322"],[],"import { parse } from 'mathjs';\n\nconst solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input\n  .split('\\n')\n  .map((row) => row.split(',').map((elf) => elf.split('-').map((num) => parseInt(num))));\n\nconst calculateSolution = (input) => {\n  let count = 0;\n  for (const row of input) {\n    const elf1 = row[0];\n    const elf2 = row[1];\n    if (\n\n      (elf1[0] <= elf2[0] && elf1[1] >= elf2[0])\n      || (elf2[0] <= elf1[0] && elf2[1] >= elf1[0])\n      || (elf1[1] >= elf2[1] && elf1[0] <= elf2[1])\n      || (elf2[1] >= elf1[1] && elf2[0] <= elf1[1])\n    ) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day05_1/index.js",["323","324","325","326"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n\\n').map((section) => section.split('\\n'));\n\nconst calculateSolution = (input) => {\n  const [grid, steps] = input;\n  const stacks = parseStacks(grid);\n  const instructions = steps.map((row) => {\n    const splitRow = row.split(' ').map((val) => parseInt(val) - 1);\n    return { count: splitRow[1], from: splitRow[3], to: splitRow[5] };\n  });\n  for (const inst of instructions) {\n    for (let i = 0; i <= inst.count; i++) {\n      stacks[inst.to].push(stacks[inst.from].splice(-1, 1)[0]);\n    }\n  }\n\n  return stacks.map((row) => row[row.length - 1]).join('');\n};\n\nexport default solution;\n\nfunction parseStacks(grid) {\n  const stacks = [];\n  const numStacks = (grid[0].length + 1) / 4;\n\n  for (let i = 0; i < numStacks; i++) {\n    stacks.push([]);\n  }\n  for (let i = grid.length - 2; i >= 0; i--) {\n    for (let j = 1; j < numStacks * 4; j += 4) {\n      if (grid[i][j] !== ' ') {\n        stacks[Math.floor(j / 4)].push(grid[i][j]);\n      }\n    }\n  }\n  return stacks;\n}\n","/home/jacob/advent-of-code/2022/solutions/day05_2/index.js",["327","328","329","330"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n\\n').map((section) => section.split('\\n'));\n\nconst calculateSolution = (input) => {\n  const [grid, steps] = input;\n  const stacks = parseStacks(grid);\n  const instructions = steps.map((row) => {\n    const splitRow = row.split(' ').map((val) => parseInt(val) - 1);\n    return { count: splitRow[1], from: splitRow[3], to: splitRow[5] };\n  });\n  for (const inst of instructions) {\n    const count = inst.count + 1;\n    stacks[inst.to].push(...stacks[inst.from].splice(-count, count));\n  }\n\n  return stacks.map((row) => row[row.length - 1]).join('');\n};\n\nexport default solution;\n\nfunction parseStacks(grid) {\n  const stacks = [];\n  const numStacks = (grid[0].length + 1) / 4;\n\n  for (let i = 0; i < numStacks; i++) {\n    stacks.push([]);\n  }\n  for (let i = grid.length - 2; i >= 0; i--) {\n    for (let j = 1; j < numStacks * 4; j += 4) {\n      if (grid[i][j] !== ' ') {\n        stacks[Math.floor(j / 4)].push(grid[i][j]);\n      }\n    }\n  }\n  return stacks;\n}\n","/home/jacob/advent-of-code/2022/solutions/day06_1/index.js",["331","332"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('');\n\nconst calculateSolution = (input) => {\n  for (let x = 0; x < input.length - 4; x++) {\n    const slice = new Set(input.slice(x, x + 4));\n    if (slice.size === 4) {\n      return x + 4;\n    }\n  }\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day06_2/index.js",["333","334"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('');\n\nconst calculateSolution = (input) => {\n  for (let x = 0; x < input.length - 14; x++) {\n    const slice = new Set(input.slice(x, x + 14));\n    if (slice.size === 14) {\n      return x + 14;\n    }\n  }\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day07_1/index.js",["335","336","337","338","339","340","341","342","343"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n');\n\nconst calculateSolution = (input) => {\n  const root = { files: {}, folders: {}, parent: undefined };\n  let currentDirectory = root;\n  for (const line of input) {\n    const args = line.split(' ');\n    if (args[0] === '$') {\n      if (args[1] === 'ls') {\n        continue;\n      } else if (args[1] === 'cd') {\n        if (args[2] === '/') {\n          currentDirectory = root;\n        } else if (args[2] === '..') {\n          currentDirectory = currentDirectory.parent;\n        } else {\n          currentDirectory = currentDirectory.folders[args[2]];\n        }\n      }\n    } else if (args[0] === 'dir') {\n      currentDirectory.folders[args[1]] = { files: {}, folders: {}, parent: currentDirectory };\n    } else {\n      currentDirectory.files[args[1]] = parseInt(args[0]);\n    }\n  }\n\n  const results = [];\n  getDirectorySize(root, results);\n  return results.reduce((a, b) => a + b, 0);\n};\n\nconst getDirectorySize = (dir, results) => {\n  const filesTotal = Object.values(dir.files).reduce((a, b) => a + b, 0);\n  const foldersTotal = Object.values(dir.folders).map((folder) => getDirectorySize(folder, results)).reduce((a, b) => a + b, 0);\n  const size = filesTotal + foldersTotal;\n  if (size <= 100000) {\n    results.push(size);\n  }\n  return size;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day07_2/index.js",["344","345","346","347","348","349","350","351","352","353"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n');\n\nconst calculateSolution = (input) => {\n  const root = { files: {}, folders: {}, parent: undefined };\n  let currentDirectory = root;\n  for (const line of input) {\n    const args = line.split(' ');\n    if (args[0] === '$') {\n      if (args[1] === 'ls') {\n        continue;\n      } else if (args[1] === 'cd') {\n        if (args[2] === '/') {\n          currentDirectory = root;\n        } else if (args[2] === '..') {\n          currentDirectory = currentDirectory.parent;\n        } else {\n          currentDirectory = currentDirectory.folders[args[2]];\n        }\n      }\n    } else if (args[0] === 'dir') {\n      currentDirectory.folders[args[1]] = { files: {}, folders: {}, parent: currentDirectory };\n    } else {\n      currentDirectory.files[args[1]] = parseInt(args[0]);\n    }\n  }\n\n  const results = [];\n  const rootSize = getDirectorySize(root, results);\n  const availableSpace = 70000000 - rootSize;\n  const spaceNeeded = 30000000 - availableSpace;\n  results.sort();\n  for (const size of results) {\n    if (size > spaceNeeded) {\n      return size;\n    }\n  }\n};\n\nconst getDirectorySize = (dir, results) => {\n  const filesTotal = Object.values(dir.files).reduce((a, b) => a + b, 0);\n  const foldersTotal = Object.values(dir.folders).map((folder) => getDirectorySize(folder, results)).reduce((a, b) => a + b, 0);\n  const size = filesTotal + foldersTotal;\n  results.push(size);\n  return size;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day08_1/index.js",["354","355","356","357","358","359"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => row.split('').map((val) => ({ height: parseInt(val), visible: false })));\n\nconst calculateSolution = (input) => {\n  for (let x = 0; x < input.length; x++) {\n    for (let y = 0; y < input[0].length; y++) {\n      for (let x2 = 0; x2 <= x; x2++) {\n        if (x === x2) { input[x][y].visible = true; } else if (input[x2][y].height >= input[x][y].height) { break; }\n      }\n      for (let x2 = input.length - 1; x2 >= x; x2--) {\n        if (x === x2) { input[x][y].visible = true; } else if (input[x2][y].height >= input[x][y].height) { break; }\n      }\n      for (let y2 = 0; y2 <= y; y2++) {\n        if (y === y2) { input[x][y].visible = true; } else if (input[x][y2].height >= input[x][y].height) { break; }\n      }\n      for (let y2 = input[0].length - 1; y2 >= y; y2--) {\n        if (y === y2) { input[x][y].visible = true; } else if (input[x][y2].height >= input[x][y].height) { break; }\n      }\n    }\n  }\n  return input.flat().reduce((acc, curr) => { acc += (curr.visible ? 1 : 0); return acc; }, 0);\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day08_2/index.js",["360"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => row.split('').map((val) => parseInt(val)));\n\nconst calculateSolution = (input) => {\n  let maxScore = 0;\n\n  for (let x = 0; x < input.length; x++) {\n    for (let y = 0; y < input[0].length; y++) {\n      let xScore1 = 0;\n      let xScore2 = 0;\n      let yScore1 = 0;\n      let yScore2 = 0;\n      for (let x2 = x - 1; x2 >= 0; x2--) {\n        xScore1++;\n        if (input[x2][y] >= input[x][y]) {\n          break;\n        }\n      }\n      for (let x2 = x + 1; x2 < input.length; x2++) {\n        xScore2++;\n        if (input[x2][y] >= input[x][y]) {\n          break;\n        }\n      }\n      for (let y2 = y - 1; y2 >= 0; y2--) {\n        yScore1++;\n        if (input[x][y2] >= input[x][y]) {\n          break;\n        }\n      }\n      for (let y2 = y + 1; y2 < input[0].length; y2++) {\n        yScore2++;\n        if (input[x][y2] >= input[x][y]) {\n          break;\n        }\n      }\n      maxScore = Math.max(maxScore, xScore1 * xScore2 * yScore1 * yScore2);\n    }\n  }\n  return maxScore;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day09_1/index.js",["361","362","363","364","365","366","367"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => row.split(' '));\n\nconst possibleMoves = {\n  U: [0, -1], D: [0, 1], L: [-1, 0], R: [1, 0],\n};\n\nconst calculateSolution = (input) => {\n  const headPos = [500, 500];\n  const tailPos = [500, 500];\n\n  const grid = [];\n\n  for (let x = 0; x < 1000; x++) {\n    grid.push(new Array(1000).fill(false));\n  }\n\n  for (const move of input) {\n    const moveAmount = move[1];\n    const headVector = possibleMoves[move[0]];\n    for (let x = 0; x < moveAmount; x++) {\n      headPos[0] += headVector[0];\n      headPos[1] += headVector[1];\n      const tailVector = moveTail(headPos, tailPos);\n      tailPos[0] += tailVector[0];\n      tailPos[1] += tailVector[1];\n      grid[tailPos[0]][tailPos[1]] = true;\n    }\n  }\n  return grid.flat().reduce((acc, curr) => { acc += curr ? 1 : 0; return acc; }, 0);\n};\n\nconst moveTail = (headPos, tailPos) => {\n  const xDist = headPos[0] - tailPos[0];\n  const yDist = headPos[1] - tailPos[1];\n  if ((xDist * xDist + yDist * yDist) <= 2) {\n    return [0, 0];\n  }\n  if (Math.abs(xDist) == 1 && Math.abs(yDist) > 1) {\n    return [xDist, Math.round(yDist / Math.abs(yDist))];\n  }\n  if (Math.abs(xDist) > 1 && Math.abs(yDist) == 1) {\n    return [Math.round(xDist / Math.abs(xDist)), yDist];\n  }\n  if (xDist) {\n    return [Math.round(xDist / Math.abs(xDist)), 0];\n  }\n  if (yDist) {\n    return [0, Math.round(yDist / Math.abs(yDist))];\n  }\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day09_2/index.js",["368","369","370","371","372","373"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => row.split(' '));\n\nconst possibleMoves = {\n  U: [0, -1], D: [0, 1], L: [-1, 0], R: [1, 0],\n};\n\nconst calculateSolution = (input) => {\n  const headPos = [500, 500];\n\n  const tailPos = [[500, 500], [500, 500], [500, 500], [500, 500], [500, 500], [500, 500], [500, 500], [500, 500], [500, 500]];\n\n  const grid = [];\n\n  for (let x = 0; x < 1000; x++) {\n    grid.push(new Array(1000).fill(false));\n  }\n\n  for (const move of input) {\n    const moveAmount = move[1];\n    const headVector = possibleMoves[move[0]];\n    for (let x = 0; x < moveAmount; x++) {\n      headPos[0] += headVector[0];\n      headPos[1] += headVector[1];\n\n      const tailVector = moveTail(headPos, tailPos[0]);\n      tailPos[0][0] += tailVector[0];\n      tailPos[0][1] += tailVector[1];\n\n      for (let y = 1; y < tailPos.length; y++) {\n        const tailVector = moveTail(tailPos[y - 1], tailPos[y]);\n        tailPos[y][0] += tailVector[0];\n        tailPos[y][1] += tailVector[1];\n      }\n      grid[tailPos[8][0]][tailPos[8][1]] = true;\n    }\n  }\n  return grid.flat().reduce((acc, curr) => { acc += curr ? 1 : 0; return acc; }, 0);\n};\n\nconst moveTail = (headPos, tailPos) => {\n  const xDist = headPos[0] - tailPos[0];\n  const yDist = headPos[1] - tailPos[1];\n  if ((xDist * xDist + yDist * yDist) <= 2) {\n    return [0, 0];\n  }\n  return [Math.round(xDist / (Math.abs(xDist) || 1)), Math.round(yDist / (Math.abs(yDist) || 1))];\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day10_1/index.js",["374","375","376"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => (row === 'noop' ? 0 : parseInt(row.split(' ')[1])));\n\nconst calculateSolution = (input) => {\n  let value = 1;\n  let sum = 0;\n  let cycle = 1;\n  for (let x = 0; x < input.length; x++) {\n    value += input[x];\n    cycle += (input[x] ? 2 : 1);\n    if ((cycle + 20) % 40 === 0 || (input[x] && (cycle + 20) % 40 === 1)) {\n      const valueToUse = cycle % 2 ? value - input[x] : value;\n      sum += (valueToUse * ((cycle % 2) ? cycle - 1 : cycle));\n    }\n  }\n  return sum;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day10_2/index.js",["377","378","379","380","381","382","383"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => (row === 'noop' ? 0 : parseInt(row.split(' ')[1])));\n\nconst calculateSolution = (input) => {\n  let cycle = 1;\n  let index = -1;\n  let sum = 1;\n  const crt = [];\n  for (let x = 0; x < 6; x++) {\n    crt.push(new Array(40).fill('.'));\n  }\n  while (cycle <= 240) {\n    const row = Math.floor((cycle - 1) / 40);\n    const column = (cycle - 1) % 40;\n    if (Math.abs(sum - column) <= 1) {\n      crt[row][column] = '#';\n    }\n    if (index >= 0) {\n      sum += input[index];\n      if (input[index]) {\n        cycle++;\n        const row = Math.floor((cycle - 1) / 40);\n        const column = (cycle - 1) % 40;\n        if (Math.abs(sum - column) <= 1) {\n          crt[row][column] = '#';\n        }\n      }\n    }\n\n    index++;\n    cycle++;\n  }\n  return crt.map((row) => row.join('')).join('\\n');\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day11_1/index.js",["384","385","386","387","388","389","390","391","392","393","394","395","396"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n\\n').map((monkey) => parseMonkey(monkey));\n\nconst parseMonkey = (input) => {\n  const lines = input.split('\\n');\n  const op = lines[2].split(' ').slice(-2)[0];\n  const operand = lines[2].split(' ').slice(-2)[1];\n  const modVal = parseInt(lines[3].split(' ').slice(-1)[0]);\n  const trueVal = parseInt(lines[4].split(' ').slice(-1)[0]);\n  const falseVal = parseInt(lines[5].split(' ').slice(-1)[0]);\n  return {\n    id: parseInt(lines[0][7]),\n    items: lines[1].split(': ')[1].split(',').map((item) => parseInt(item)),\n    operation: (old) => operation(old, op, operand),\n    test: (value) => (value % modVal === 0 ? trueVal : falseVal),\n    inspections: 0,\n  };\n};\n\nconst operation = (val, op, operand) => {\n  let opValue;\n  if (operand === 'old') {\n    opValue = val;\n  } else {\n    opValue = parseInt(operand);\n  }\n  switch (op) {\n    case '+':\n      return val + opValue;\n    case '*':\n      return val * opValue;\n  }\n};\n\nconst calculateSolution = (input) => {\n  const monkeyMap = input.reduce((acc, curr) => { acc[curr.id] = curr; return acc; }, {});\n  for (let round = 1; round <= 20; round++) {\n    for (const monkey of input) {\n      monkey.inspections += monkey.items.length;\n      for (const item of monkey.items) {\n        const highWorry = monkey.operation(item);\n        const newVal = Math.floor(highWorry / 3);\n        const target = monkey.test(newVal);\n        monkeyMap[target].items.push(newVal);\n      }\n      monkey.items = [];\n    }\n  }\n\n  const inspections = input.map((monkey) => monkey.inspections);\n  inspections.sort((a, b) => a - b);\n  return inspections.splice(-2).reduce((acc, curr) => acc * curr, 1);\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day11_2/index.js",["397","398","399","400","401","402","403","404","405","406","407","408","409"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n\\n').map((monkey) => parseMonkey(monkey));\n\nconst parseMonkey = (input) => {\n  const lines = input.split('\\n');\n  const op = lines[2].split(' ').slice(-2)[0];\n  const operand = lines[2].split(' ').slice(-2)[1];\n  const modVal = parseInt(lines[3].split(' ').slice(-1)[0]);\n  const trueVal = parseInt(lines[4].split(' ').slice(-1)[0]);\n  const falseVal = parseInt(lines[5].split(' ').slice(-1)[0]);\n  return {\n    id: parseInt(lines[0][7]),\n    items: lines[1].split(': ')[1].split(',').map((item) => parseInt(item)),\n    modVal,\n    operation: (old, modVal) => operation(old, op, operand, modVal),\n    test: (value) => (value % modVal === 0 ? trueVal : falseVal),\n    inspections: 0,\n  };\n};\n\nconst operation = (val, op, operand, modVal) => {\n  const opValue = parseInt(operand);\n\n  switch (op) {\n    case '+':\n      return (val + (opValue || val)) % modVal;\n    case '*':\n      return (val * (opValue || val)) % modVal;\n  }\n};\n\nconst calculateSolution = (input) => {\n  const modVal = input.map((monkey) => monkey.modVal).reduce((acc, curr) => acc * curr, 1);\n  const monkeyMap = input.reduce((acc, curr) => { acc[curr.id] = curr; return acc; }, {});\n  for (let round = 1; round <= 10000; round++) {\n    for (const monkey of input) {\n      monkey.inspections += monkey.items.length;\n      for (const item of monkey.items) {\n        const highWorry = monkey.operation(item, modVal);\n        // const newVal = Math.floor(highWorry/3);\n        const target = monkey.test(highWorry);\n        monkeyMap[target].items.push(highWorry);\n      }\n      monkey.items = [];\n    }\n  }\n\n  const inspections = input.map((monkey) => monkey.inspections);\n  inspections.sort((a, b) => a - b);\n  return inspections.splice(-2).reduce((acc, curr) => acc * curr, 1);\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day12_1/index.js",["410","411","412","413","414","415"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => row.split('').map((val) => val.charCodeAt(0)));\n\nconst calculateSolution = (input) => {\n  const numV = input.flat().length;\n  const width = input.length;\n  const height = input[0].length;\n  const adjacency = [];\n  const distance = [];\n  let target;\n  let start;\n  for (let x = 0; x < numV; x++) {\n    adjacency.push(new Array(numV).fill(0));\n    distance.push(Infinity);\n  }\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      if (input[x][y] === 69) {\n        target = nodeName(x, y, height);\n        input[x][y] = 'z'.charCodeAt(0);\n      }\n\n      if (input[x][y] === 83) {\n        start = nodeName(x, y, height);\n        input[x][y] = 'a'.charCodeAt(0);\n      }\n    }\n  }\n  distance[start] = 0;\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const name = nodeName(x, y, height);\n      const neighbors = generateNeighbors(x, y, width, height);\n      for (const neighbor of neighbors) {\n        if (input[neighbor[0]][neighbor[1]] - input[x][y] <= 1) {\n          adjacency[name][nodeName(neighbor[0], neighbor[1], height)] = 1;\n        }\n      }\n    }\n  }\n\n  const spt = new Set();\n\n  while (spt.size < distance.length) {\n    const src = findMin(distance, spt);\n    if (src === Infinity) {\n      break;\n    }\n    look(src, adjacency, distance, spt);\n  }\n\n  // visualizeDistance(distance, width, height);\n  return distance[target];\n};\n\nconst findMin = (distance, spt) => {\n  let min = Infinity;\n  let minIndex = Infinity;\n  for (let x = 0; x < distance.length; x++) {\n    if (!spt.has(x) && distance[x] < min) {\n      minIndex = x;\n      min = distance[x];\n    }\n  }\n  return minIndex;\n};\n\nconst visualizeDistance = (distance, width, height) => {\n  for (let x = 0; x < width; x++) {\n    const row = [];\n    for (let y = 0; y < height; y++) {\n      row.push(distance[nodeName(x, y, height)].toString().padStart(3, ' '));\n    }\n    console.log(row.join(' '));\n  }\n};\n\nconst look = (src, adjacency, distance, spt) => {\n  spt.add(src);\n  for (let dest = 0; dest < adjacency.length; dest++) {\n    if (adjacency[src][dest] === 1) {\n      if (distance[dest] > distance[src] + 1) {\n        distance[dest] = distance[src] + 1;\n      }\n    }\n  }\n};\n\nconst nodeName = (x, y, height) => x * height + y;\n\nconst generateNeighbors = (x, y, width, height) => {\n  const neighbors = [];\n  if (x !== 0) {\n    neighbors.push([x - 1, y]);\n  }\n  if (x !== width - 1) {\n    neighbors.push([x + 1, y]);\n  }\n  if (y !== 0) {\n    neighbors.push([x, y - 1]);\n  }\n  if (y !== height - 1) {\n    neighbors.push([x, y + 1]);\n  }\n  return neighbors;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day12_2/index.js",["416","417","418","419","420","421"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => row.split('').map((val) => val.charCodeAt(0)));\n\nconst calculateSolution = (input) => {\n  const numV = input.flat().length;\n  const width = input.length;\n  const height = input[0].length;\n  let start;\n  const adjacency = [];\n  const distance = [];\n  for (let x = 0; x < numV; x++) {\n    adjacency.push(new Array(numV).fill(0));\n    distance.push(Infinity);\n  }\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      if (input[x][y] === 69) {\n        start = nodeName(x, y, height);\n        input[x][y] = 'z'.charCodeAt(0);\n      }\n\n      if (input[x][y] === 83) {\n        input[x][y] = 'a'.charCodeAt(0);\n      }\n    }\n  }\n  distance[start] = 0;\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const name = nodeName(x, y, height);\n      const neighbors = generateNeighbors(x, y, width, height);\n      for (const neighbor of neighbors) {\n        if (input[x][y] - input[neighbor[0]][neighbor[1]] <= 1) {\n          adjacency[name][nodeName(neighbor[0], neighbor[1], height)] = 1;\n        }\n      }\n    }\n  }\n\n  const spt = new Set();\n\n  while (spt.size < distance.length) {\n    const src = findMin(distance, spt);\n    if (src === Infinity) {\n      break;\n    }\n    look(src, adjacency, distance, spt);\n  }\n\n  // visualizeDistance(distance, width, height);\n  const aNodes = [];\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      if (input[x][y] === 97) {\n        aNodes.push(distance[nodeName(x, y, height)]);\n      }\n    }\n  }\n  return Math.min(...aNodes);\n};\n\nconst findMin = (distance, spt) => {\n  let min = Infinity;\n  let minIndex = Infinity;\n  for (let x = 0; x < distance.length; x++) {\n    if (!spt.has(x) && distance[x] < min) {\n      minIndex = x;\n      min = distance[x];\n    }\n  }\n  return minIndex;\n};\n\nconst visualizeDistance = (distance, width, height) => {\n  for (let x = 0; x < width; x++) {\n    const row = [];\n    for (let y = 0; y < height; y++) {\n      row.push(distance[nodeName(x, y, height)].toString().padStart(3, ' '));\n    }\n    console.log(row.join(' '));\n  }\n};\n\nconst look = (src, adjacency, distance, spt) => {\n  spt.add(src);\n  for (let dest = 0; dest < adjacency.length; dest++) {\n    if (adjacency[src][dest] === 1) {\n      if (distance[dest] > distance[src] + 1) {\n        distance[dest] = distance[src] + 1;\n      }\n    }\n  }\n};\n\nconst nodeName = (x, y, height) => x * height + y;\n\nconst generateNeighbors = (x, y, width, height) => {\n  const neighbors = [];\n  if (x !== 0) {\n    neighbors.push([x - 1, y]);\n  }\n  if (x !== width - 1) {\n    neighbors.push([x + 1, y]);\n  }\n  if (y !== 0) {\n    neighbors.push([x, y - 1]);\n  }\n  if (y !== height - 1) {\n    neighbors.push([x, y + 1]);\n  }\n  return neighbors;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day13_1/index.js",["422","423"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n\\n').map((pair) => pair.split('\\n').map((set) => JSON.parse(set)));\n\nconst calculateSolution = (input) => {\n  const result = input.map((pair) => compare(pair[0], pair[1]));\n  return result.reduce((acc, curr, index) => acc + (curr ? (index + 1) : 0), 0);\n};\n\nconst compare = (left, right) => {\n  if (left === undefined) {\n    return true;\n  }\n  if (right === undefined) {\n    return false;\n  }\n  if (Array.isArray(left) && !Array.isArray(right)) {\n    return compare(left, [right]);\n  }\n  if (!Array.isArray(left) && Array.isArray(right)) {\n    return compare([left], right);\n  }\n  if (Array.isArray(left) && Array.isArray(right)) {\n    for (let x = 0; x < left.length; x++) {\n      const result = compare(left[x], right[x]);\n      if (result === true || result === false) {\n        return result;\n      }\n    }\n    if (left.length > right.length) {\n      return false;\n    }\n    if (left.length < right.length) {\n      return true;\n    }\n    return undefined;\n  }\n  if (left === right) {\n    return undefined;\n  }\n  return left < right;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day13_2/index.js",["424"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n\\n').map((pair) => pair.split('\\n').map((set) => JSON.parse(set)));\n\nconst calculateSolution = (input) => {\n  const divider1 = [[2]];\n  const divider2 = [[6]];\n  input = input.flat();\n  input.push(divider1);\n  input.push(divider2);\n  input.sort(compare);\n  return (input.indexOf(divider1) + 1) * (input.indexOf(divider2) + 1);\n};\n\nconst compare = (left, right) => {\n  if (left === undefined) {\n    return -1;\n  }\n  if (right === undefined) {\n    return 1;\n  }\n  if (Array.isArray(left) && !Array.isArray(right)) {\n    return compare(left, [right]);\n  }\n  if (!Array.isArray(left) && Array.isArray(right)) {\n    return compare([left], right);\n  }\n  if (Array.isArray(left) && Array.isArray(right)) {\n    for (let x = 0; x < left.length; x++) {\n      const result = compare(left[x], right[x]);\n      if (result === -1 || result === 1) {\n        return result;\n      }\n    }\n    if (left.length > right.length) {\n      return 1;\n    }\n    if (left.length < right.length) {\n      return -1;\n    }\n    return 0;\n  }\n  if (left === right) {\n    return 0;\n  }\n  return left < right ? -1 : 1;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day14_1/index.js",["425","426","427","428","429","430","431","432"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n')\n  .map((row) => row.split(' -> ')\n    .map((coords) => coords.split(',')\n      .map((coord) => parseInt(coord))));\n\nconst calculateSolution = (input) => {\n  const xCoords = input.flat().map((coord) => coord[0]);\n  const yCoords = input.flat().map((coord) => coord[1]);\n  const xRange = [Math.min(...xCoords, 500), Math.max(...xCoords, 500)];\n  const yRange = [Math.min(...yCoords, 0), Math.max(...yCoords, 0)];\n  const width = xRange[1] - xRange[0] + 1;\n  const height = yRange[1] - yRange[0] + 1;\n  const grid = [];\n  for (let x = 0; x < width; x++) {\n    grid.push(new Array(height).fill('.'));\n  }\n\n  for (const row of input) {\n    let start = row[0];\n    for (let line = 1; line < row.length; line++) {\n      const next = row[line];\n      if (next[0] === start[0]) {\n        const begin = start[1] < next[1] ? start[1] : next[1];\n        const end = start[1] < next[1] ? next[1] : start[1];\n        for (let y = begin; y <= end; y++) {\n          grid[start[0] - xRange[0]][y - yRange[0]] = '#';\n        }\n      } else {\n        const begin = start[0] < next[0] ? start[0] : next[0];\n        const end = start[0] < next[0] ? next[0] : start[0];\n        for (let x = begin; x <= end; x++) {\n          grid[x - xRange[0]][start[1] - yRange[0]] = '#';\n        }\n      }\n      start = next;\n    }\n  }\n  let count = 0;\n  while (simulateSand(grid, [500 - xRange[0], 0])) {\n    count++;\n  }\n  return count;\n};\n\nconst simulateSand = (grid, origin) => {\n  let current = [...origin];\n  while (true) {\n    let candidateCoords = [current[0], current[1] + 1];\n    let check = checkCandidateCoords(grid, candidateCoords);\n    if (check === undefined) {\n      return false;\n    }\n    if (check) {\n      current = candidateCoords;\n      continue;\n    }\n    candidateCoords = [current[0] - 1, current[1] + 1];\n    check = checkCandidateCoords(grid, candidateCoords);\n    if (check === undefined) {\n      return false;\n    }\n    if (check) {\n      current = candidateCoords;\n      continue;\n    }\n    candidateCoords = [current[0] + 1, current[1] + 1];\n    check = checkCandidateCoords(grid, candidateCoords);\n    if (check === undefined) {\n      return false;\n    }\n    if (check) {\n      current = candidateCoords;\n      continue;\n    }\n    grid[current[0]][current[1]] = 'O';\n    break;\n  }\n  return true;\n};\n\nconst checkCandidateCoords = (grid, coords) => {\n  const candidateSpot = grid[coords[0]]?.[coords[1]];\n  if (candidateSpot === undefined) {\n    return undefined;\n  }\n  if (candidateSpot === '.') {\n    return true;\n  }\n  return false;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day14_2/index.js",["433","434","435","436","437","438","439","440","441","442","443","444"],[],"import fs from 'fs';\n\nconst solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n')\n  .map((row) => row.split(' -> ')\n    .map((coords) => coords.split(',')\n      .map((coord) => parseInt(coord))));\n\nconst calculateSolution = (input) => {\n  const xCoords = input.flat().map((coord) => coord[0]);\n  const yCoords = input.flat().map((coord) => coord[1]);\n  const yRange = [Math.min(...yCoords, 0), Math.max(...yCoords, 0)];\n  const height = yRange[1] - yRange[0] + 3;\n  const xRange = [500 - height, 500 + height];\n  const width = 2 * height + 1;\n  const grid = [];\n  for (let x = 0; x < width; x++) {\n    const col = new Array(height - 1).fill('.');\n    col.push('#');\n    grid.push(col);\n  }\n\n  for (const row of input) {\n    let start = row[0];\n    for (let line = 1; line < row.length; line++) {\n      const next = row[line];\n      if (next[0] === start[0]) {\n        const begin = start[1] < next[1] ? start[1] : next[1];\n        const end = start[1] < next[1] ? next[1] : start[1];\n        for (let y = begin; y <= end; y++) {\n          grid[start[0] - xRange[0]][y - yRange[0]] = '#';\n        }\n      } else {\n        const begin = start[0] < next[0] ? start[0] : next[0];\n        const end = start[0] < next[0] ? next[0] : start[0];\n        for (let x = begin; x <= end; x++) {\n          grid[x - xRange[0]][start[1] - yRange[0]] = '#';\n        }\n      }\n      start = next;\n    }\n  }\n  let count = 0;\n  while (simulateSand(grid, [500 - xRange[0], 0])) {\n    count++;\n  }\n  const transposed = [];\n  for (let y = 0; y < grid[0].length; y++) {\n    transposed.push(new Array(grid.length));\n  }\n  for (let x = 0; x < grid.length; x++) {\n    for (let y = 0; y < grid[x].length; y++) {\n      transposed[y][x] = grid[x][y];\n    }\n  }\n  fs.writeFileSync('sandpile.txt', transposed.map((row) => row.join('')).join('\\n'));\n  return count + 1;\n};\n\nconst simulateSand = (grid, origin) => {\n  let current = [...origin];\n  while (true) {\n    let candidateCoords = [current[0], current[1] + 1];\n    let check = checkCandidateCoords(grid, candidateCoords);\n    if (check === undefined) {\n      return false;\n    }\n    if (check) {\n      current = candidateCoords;\n      continue;\n    }\n    candidateCoords = [current[0] - 1, current[1] + 1];\n    check = checkCandidateCoords(grid, candidateCoords);\n    if (check === undefined) {\n      return false;\n    }\n    if (check) {\n      current = candidateCoords;\n      continue;\n    }\n    candidateCoords = [current[0] + 1, current[1] + 1];\n    check = checkCandidateCoords(grid, candidateCoords);\n    if (check === undefined) {\n      return false;\n    }\n    if (check) {\n      current = candidateCoords;\n      continue;\n    }\n    if (current[0] === origin[0] && current[1] === origin[1]) {\n      return false;\n    }\n    grid[current[0]][current[1]] = 'O';\n    break;\n  }\n\n  return true;\n};\n\nconst checkCandidateCoords = (grid, coords) => {\n  const candidateSpot = grid[coords[0]]?.[coords[1]];\n  if (candidateSpot === undefined) {\n    return undefined;\n  }\n  if (candidateSpot === '.') {\n    return true;\n  }\n  return false;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day15_1/index.js",["445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n')\n  .map((row) => row.match(/Sensor at x=(-?[0-9]+), y=(-?[0-9]+): closest beacon is at x=(-?[0-9]+), y=(-?[0-9]+)/))\n  .map((match) => ({ sensor: [parseInt(match[1]), parseInt(match[2])], beacon: [parseInt(match[3]), parseInt(match[4])] }));\n\nconst calculateSolution = (input) => {\n  const xCoords = input.flat(1)\n    .map((coord) => [coord.sensor[0] - manhattanDistance(coord),\n      coord.sensor[0] + manhattanDistance(coord),\n      coord.beacon[0] - manhattanDistance(coord),\n      coord.beacon[0] + manhattanDistance(coord),\n    ]).flat();\n  const yCoords = input.flat(1)\n    .map((coord) => [\n      coord.sensor[1] - manhattanDistance(coord),\n      coord.sensor[1] + manhattanDistance(coord),\n      coord.beacon[1] - manhattanDistance(coord),\n      coord.beacon[1] + manhattanDistance(coord),\n    ]).flat();\n  const xRange = [Math.min(...xCoords), Math.max(...xCoords)];\n  const yRange = [Math.min(...yCoords), Math.max(...yCoords)];\n  const width = xRange[1] - xRange[0] + 1;\n\n  const grid = new Array(width).fill('.');\n\n  const targetRow = 2000000 - yRange[0];\n\n  for (const pair of input) {\n    normalizePair(pair, xRange[0], yRange[0]);\n    console.log(JSON.stringify(pair));\n    if (pair.sensor[1] === targetRow) {\n      grid[pair.sensor[0]] = 'S';\n    }\n    if (pair.beacon[1] === targetRow) {\n      grid[pair.beacon[0]] = 'B';\n    }\n    const distance = manhattanDistance(pair);\n    if ((pair.sensor[1] + distance) < targetRow || (pair.sensor[1] - distance) > targetRow) {\n      continue;\n    }\n    for (let x = pair.sensor[0] - distance; x <= pair.sensor[0] + distance; x++) {\n      const remainingDistance = distance - Math.abs(pair.sensor[0] - x);\n      if ((pair.sensor[1] < targetRow && pair.sensor[1] + remainingDistance >= targetRow) || (pair.sensor[1] > targetRow && pair.sensor[1] - remainingDistance <= targetRow)) {\n        if (grid[x] === '.') {\n          grid[x] = '#';\n        }\n      }\n    }\n  }\n  let count = 0;\n  for (let x = 0; x < width; x++) {\n    const val = grid[x];\n    if (val === 'S' || val === '#') {\n      count++;\n    }\n  }\n  return count;\n};\n\nfunction manhattanDistance(pair) {\n  return Math.abs(pair.beacon[0] - pair.sensor[0]) + Math.abs(pair.beacon[1] - pair.sensor[1]);\n}\n\nfunction normalizePair(pair, xMin, yMin) {\n  pair.sensor[0] -= xMin;\n  pair.sensor[1] -= yMin;\n  pair.beacon[0] -= xMin;\n  pair.beacon[1] -= yMin;\n}\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day15_2/index.js",["461","462","463","464","465","466"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n')\n  .map((row) => row.match(/Sensor at x=(-?[0-9]+), y=(-?[0-9]+): closest beacon is at x=(-?[0-9]+), y=(-?[0-9]+)/))\n  .map((match) => ({ sensor: [parseInt(match[1]), parseInt(match[2])], beacon: [parseInt(match[3]), parseInt(match[4])] }));\n\nconst calculateSolution = (input) => {\n  const width = 4000000;\n  const grid = [];\n  for (let x = 0; x < width; x++) {\n    grid.push([[0, width - 1]]);\n  }\n\n  for (const pair of input) {\n    console.log(JSON.stringify(pair));\n    const distance = manhattanDistance(pair);\n\n    for (let x = Math.max(pair.sensor[0] - distance, 0); x <= Math.min(pair.sensor[0] + distance, width - 1); x++) {\n      const remainingDistance = distance - Math.abs(pair.sensor[0] - x);\n      const yRange = [Math.max(pair.sensor[1] - remainingDistance, 0), Math.min(pair.sensor[1] + remainingDistance, width - 1)];\n      grid[x] = removeRange(grid[x], yRange);\n    }\n  }\n  for (const rowIndex in grid) {\n    if (grid[rowIndex].length) {\n      return rowIndex * width + grid[rowIndex][0][0];\n    }\n  }\n};\n\nfunction removeRange(ranges, yRange) {\n  const newRanges = [];\n  for (const range of ranges) {\n    if (range[0] < yRange[0]) {\n      if (range[1] < yRange[0]) {\n        newRanges.push(range);\n        continue;\n      }\n      if (range[1] <= yRange[1]) {\n        newRanges.push([range[0], yRange[0] - 1]);\n      }\n      if (range[1] > yRange[1]) {\n        newRanges.push([range[0], yRange[0] - 1]);\n        newRanges.push([yRange[1] + 1, range[1]]);\n      }\n    } else if (range[0] === yRange[0]) {\n      if (range[1] > yRange[1]) {\n        newRanges.push([yRange[1] + 1, range[1]]);\n      }\n    } else if (range[0] > yRange[0]) {\n      if (range[0] > yRange[1]) {\n        newRanges.push(range);\n        continue;\n      }\n      if (range[1] > yRange[1]) {\n        newRanges.push([yRange[1] + 1, range[1]]);\n      }\n    }\n  }\n  return newRanges;\n}\n\nfunction manhattanDistance(pair) {\n  return Math.abs(pair.beacon[0] - pair.sensor[0]) + Math.abs(pair.beacon[1] - pair.sensor[1]);\n}\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day16_1/index.js",["467","468","469","470","471","472","473","474","475","476","477","478","479","480","481"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n')\n  .map((row) => row.match(/Valve ([A-Z]{2}) has flow rate=([0-9]+); tunnel(?:s)? lead(?:s)? to valve(?:s)? ([A-Z]{2}(?:, [A-Z]{2})*)/))\n  .map((match) => ({ name: match[1], rate: parseInt(match[2]), neighbors: match[3].split(', ').sort() }))\n  .reduce((acc, { name, ...rest }) => { acc[name] = { ...rest }; return acc; }, {});\n\nconst calculateSolution = (input) => {\n  const state = {\n    pressureRelieved: 0, currentRoom: 'AA', rooms: {}, minutesRemaining: 30,\n  };\n  for (const room in input) {\n    state.rooms[room] = { on: false, score: 0, name: room };\n    input[room].shortestPaths = {};\n    for (const destRoom in input) {\n      if (room === destRoom) continue;\n      input[room].shortestPaths[destRoom] = shortestPath(input, room, destRoom, {}, []);\n    }\n  }\n  return makeMove(input, state);\n};\n\nconst shortestPath = (input, start, end, memo, path) => {\n  if (input[start].neighbors.includes(end)) {\n    memo[`${start}-${end}`] = 1;\n    return 1;\n  }\n  if (!memo[`${start}-${end}`]) {\n    path.push(start);\n    let minDist = Infinity;\n    for (const neighbor of input[start].neighbors) {\n      if (path.includes(neighbor)) continue;\n      minDist = Math.min(minDist, 1 + shortestPath(input, neighbor, end, memo, path));\n    }\n    if (minDist === Infinity) {\n      path.pop();\n      return Infinity;\n    }\n    memo[`${start}-${end}`] = minDist;\n    path.pop();\n  }\n  return memo[`${start}-${end}`];\n};\n\nconst makeMove = (roomData, state) => {\n  for (const room of Object.values(state.rooms)) {\n    room.score = calculateScoreGain(roomData, state, room);\n  }\n  const rooms = Object.values(state.rooms).sort((a, b) => b.score - a.score);\n\n  let maxScore = state.pressureRelieved;\n\n  for (const room of rooms) {\n    if (room.score === 0) {\n      continue;\n    }\n    const nextState = {\n      ...state,\n      rooms: {\n        ...Object.keys(state.rooms)\n          .reduce((rooms, roomId) => {\n            rooms[roomId] = {\n              ...state.rooms[roomId],\n            };\n            return rooms;\n          }, {}),\n      },\n    };\n    const timePassing = Math.min(roomData[state.currentRoom].shortestPaths[room.name] + 1, state.minutesRemaining);\n    nextState.pressureRelieved += room.score;\n    nextState.minutesRemaining -= timePassing;\n    nextState.currentRoom = room.name;\n    nextState.rooms[room.name].on = true;\n    if (nextState.minutesRemaining > 0) {\n      maxScore = Math.max(maxScore, makeMove(roomData, nextState));\n    } else {\n      maxScore = Math.max(maxScore, nextState.pressureRelieved);\n    }\n  }\n  return maxScore;\n};\n\nconst calculateScoreGain = (roomData, state, room) => {\n  if (room.on || roomData[room.name].rate === 0) {\n    return 0;\n  }\n  return (state.minutesRemaining - roomData[state.currentRoom].shortestPaths[room.name] - 1) * roomData[room.name].rate;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day16_2/index.js",["482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n')\n  .map((row) => row.match(/Valve ([A-Z]{2}) has flow rate=([0-9]+); tunnel(?:s)? lead(?:s)? to valve(?:s)? ([A-Z]{2}(?:, [A-Z]{2})*)/))\n  .map((match) => ({ name: match[1], rate: parseInt(match[2]), neighbors: match[3].split(', ').sort() }))\n  .reduce((acc, { name, ...rest }) => { acc[name] = { ...rest }; return acc; }, {});\n\nconst calculateSolution = (input) => {\n  const state = {\n    pressureRelieved: 0, meRoom: 'AA', rooms: {}, minutesRemaining: 26, meIdleTime: 0, elephantRoom: 'AA', elephantIdleTime: 0,\n  };\n  for (const room in input) {\n    state.rooms[room] = { on: false, score: 0, name: room };\n    input[room].shortestPaths = {};\n    for (const destRoom in input) {\n      if (room === destRoom) continue;\n      input[room].shortestPaths[destRoom] = shortestPath(input, room, destRoom, {}, []);\n    }\n  }\n  return makeMove(input, state);\n};\n\nconst shortestPath = (input, start, end, memo, path) => {\n  if (input[start].neighbors.includes(end)) {\n    memo[`${start}-${end}`] = 1;\n    return 1;\n  }\n  if (!memo[`${start}-${end}`]) {\n    path.push(start);\n    let minDist = Infinity;\n    for (const neighbor of input[start].neighbors) {\n      if (path.includes(neighbor)) continue;\n      minDist = Math.min(minDist, 1 + shortestPath(input, neighbor, end, memo, path));\n    }\n    if (minDist === Infinity) {\n      path.pop();\n      return Infinity;\n    }\n    memo[`${start}-${end}`] = minDist;\n    path.pop();\n  }\n  return memo[`${start}-${end}`];\n};\n\nconst makeMove = (roomData, state) => {\n  if (state.meIdleTime > 0 && state.elephantIdleTime > 0) {\n    const timeToPass = Math.min(state.meIdleTime, state.elephantIdleTime);\n    state.meIdleTime -= timeToPass;\n    state.elephantIdleTime -= timeToPass;\n    state.minutesRemaining -= timeToPass;\n  }\n\n  for (const room of Object.values(state.rooms)) {\n    room.meScore = calculateScoreGain(roomData, state, room, state.meRoom);\n    room.elephantScore = calculateScoreGain(roomData, state, room, state.elephantRoom);\n  }\n  const rooms = Object.values(state.rooms).sort((a, b) => b.meScore - a.meScore);\n\n  let maxScore = state.pressureRelieved;\n\n  if (state.meIdleTime === 0) {\n    for (const room of rooms.filter((room) => room.meScore > 0)) {\n      if (state.minutesRemaining === 26) {\n        console.log(`Trying room ${room.name} of ${JSON.stringify(rooms.filter((room) => room.meScore > 0).map((filterRoom) => filterRoom.name))}`);\n      }\n      const nextState = {\n        ...state,\n        rooms: {\n          ...Object.keys(state.rooms)\n            .reduce((rooms, roomId) => {\n              rooms[roomId] = {\n                ...state.rooms[roomId],\n              };\n              return rooms;\n            }, {}),\n        },\n      };\n      const meIdleTime = Math.min(roomData[state.meRoom].shortestPaths[room.name] + 1, state.minutesRemaining);\n      nextState.pressureRelieved += room.meScore;\n      nextState.meRoom = room.name;\n      nextState.meIdleTime = meIdleTime;\n      nextState.rooms[room.name].on = true;\n      if (nextState.minutesRemaining > 0) {\n        maxScore = Math.max(maxScore, makeMove(roomData, nextState));\n      } else {\n        maxScore = Math.max(maxScore, nextState.pressureRelieved);\n      }\n    }\n  } else {\n    for (const room of rooms.filter((room) => room.elephantScore > 0)) {\n      const nextState = {\n        ...state,\n        rooms: {\n          ...Object.keys(state.rooms)\n            .reduce((rooms, roomId) => {\n              rooms[roomId] = {\n                ...state.rooms[roomId],\n              };\n              return rooms;\n            }, {}),\n        },\n      };\n      const elephantIdleTime = Math.min(roomData[state.elephantRoom].shortestPaths[room.name] + 1, state.minutesRemaining);\n      nextState.pressureRelieved += room.elephantScore;\n      nextState.elephantRoom = room.name;\n      nextState.rooms[room.name].on = true;\n      nextState.elephantIdleTime = elephantIdleTime;\n      if (nextState.minutesRemaining > 0) {\n        maxScore = Math.max(maxScore, makeMove(roomData, nextState));\n      } else {\n        maxScore = Math.max(maxScore, nextState.pressureRelieved);\n      }\n    }\n  }\n  return maxScore;\n};\n\nconst calculateScoreGain = (roomData, state, room, currentRoom) => {\n  if (room.on || roomData[room.name].rate === 0) {\n    return 0;\n  }\n  return (state.minutesRemaining - roomData[currentRoom].shortestPaths[room.name] - 1) * roomData[room.name].rate;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day17_1/index.js",["509","510","511","512","513","514","515","516","517","518","519","520","521","522"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('');\n\nconst calculateSolution = (wind) => {\n  const grid = [];\n  for (let x = 0; x < 7; x++) {\n    grid.push(new Array(7).fill('.'));\n  }\n  const shapes = [\n    [['#'], ['#'], ['#'], ['#']],\n    [['.', '#', '.'], ['#', '#', '#'], ['.', '#', '.']],\n    [['#', '.', '.'], ['#', '.', '.'], ['#', '#', '#']],\n    [['#', '#', '#', '#']],\n    [['#', '#'], ['#', '#']],\n  ];\n  let shapeIndex = 0;\n  let windIndex = 0;\n  let currentTop = 0;\n\n  for (let it = 0; it < 2022; it++) {\n    const gridHeight = grid[0].length;\n    for (let y = 0; y < currentTop + 7 - gridHeight; y++) {\n      for (let x = 0; x < 7; x++) {\n        grid[x].push('.');\n      }\n    }\n    let shapeOffset = [2, currentTop + 3];\n    const shape = shapes[shapeIndex];\n\n    shapeIndex++;\n    shapeIndex %= shapes.length;\n    while (true) {\n      const windOffset = wind[windIndex] === '<' ? -1 : 1;\n      const offsetAfterWind = [shapeOffset[0] + windOffset, shapeOffset[1]];\n      windIndex++;\n      windIndex %= wind.length;\n      if (isValid(grid, shape, offsetAfterWind)) {\n        shapeOffset = offsetAfterWind;\n      }\n      const offsetAfterFall = [shapeOffset[0], shapeOffset[1] - 1];\n      if (isValid(grid, shape, offsetAfterFall)) {\n        shapeOffset = offsetAfterFall;\n      } else {\n        drawShape(grid, shape, shapeOffset);\n        currentTop = Math.max(currentTop, shapeOffset[1] + shape[0].length);\n        break;\n      }\n    }\n  }\n  return currentTop;\n};\n\nconst isValid = (grid, shape, offset) => {\n  for (let x = 0; x < shape.length; x++) {\n    for (let y = 0; y < shape[0].length; y++) {\n      if (shape[x][y] === '.') {\n        continue;\n      }\n      const gridX = offset[0] + x;\n      const gridY = offset[1] + y;\n      if (gridX < 0 || gridX >= 7 || gridY < 0) {\n        return false;\n      }\n      if (grid[gridX][gridY] === '#') {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst drawShape = (grid, shape, offset) => {\n  for (let x = 0; x < shape.length; x++) {\n    for (let y = 0; y < shape[0].length; y++) {\n      if (shape[x][y] === '.') {\n        continue;\n      }\n      const gridX = offset[0] + x;\n      const gridY = offset[1] + y;\n      grid[gridX][gridY] = '#';\n    }\n  }\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day17_2/index.js",["523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('');\n\nconst calculateSolution = (wind) => {\n  const shapes = [\n    [['#'], ['#'], ['#'], ['#']],\n    [['.', '#', '.'], ['#', '#', '#'], ['.', '#', '.']],\n    [['#', '.', '.'], ['#', '.', '.'], ['#', '#', '#']],\n    [['#', '#', '#', '#']],\n    [['#', '#'], ['#', '#']],\n  ];\n  const cycle = 40;\n  const extraNeeded = 1000000000000 % cycle;\n  const iterations = Math.floor(1000000000000 / cycle);\n  const grid = [];\n  for (let x = 0; x < 7; x++) {\n    grid.push(new Array(7).fill('.'));\n  }\n\n  let shapeIndex = 0;\n  let windIndex = 0;\n  let currentTop = 0;\n\n  let previousCycleHeight = 0;\n  const cycleHeightDiffs = [];\n  let previousCycleIt = 0;\n  const cycleLengths = [];\n\n  let topOffset = 0;\n\n  const indexSet = new Set();\n  let cycleIndexes;\n  for (let it = 0; it < 1000000000000; it++) {\n    const indexKey = `${shapeIndex}-${windIndex}`;\n    if (!cycleIndexes) {\n      if (indexSet.has(indexKey)) {\n        cycleIndexes = [shapeIndex, windIndex];\n      } else {\n        indexSet.add(indexKey);\n      }\n    } else if (shapeIndex === cycleIndexes[0] && windIndex === cycleIndexes[1]) {\n      cycleHeightDiffs.push(currentTop - previousCycleHeight);\n      previousCycleHeight = currentTop;\n      cycleLengths.push(it - previousCycleIt);\n      previousCycleIt = it;\n\n      if (cycleHeightDiffs.length >= 3) {\n        const lastThreeHeightDiffs = cycleHeightDiffs.slice(-3);\n        const lastThreeCycleLengths = cycleLengths.slice(-3);\n        if (lastThreeHeightDiffs[0] === lastThreeHeightDiffs[1]\n            && lastThreeHeightDiffs[0] === lastThreeHeightDiffs[2]\n            && lastThreeCycleLengths[0] === lastThreeCycleLengths[1]\n            && lastThreeCycleLengths[0] === lastThreeCycleLengths[2]) {\n          const cycleLength = lastThreeCycleLengths[0];\n          const heightPerCycle = lastThreeHeightDiffs[0];\n          const shapesLeft = 1000000000000 - it;\n          const cyclesRemaining = Math.floor((shapesLeft) / cycleLength);\n          topOffset = cyclesRemaining * heightPerCycle;\n          it += (cyclesRemaining * cycleLength);\n          if (it >= 1000000000000) {\n            break;\n          }\n        }\n      }\n    }\n\n    const gridHeight = grid[0].length;\n    for (let y = 0; y < currentTop + 7 - gridHeight; y++) {\n      for (let x = 0; x < 7; x++) {\n        grid[x].push('.');\n      }\n    }\n    let shapeOffset = [2, currentTop + 3];\n    const shape = shapes[shapeIndex];\n\n    shapeIndex++;\n    shapeIndex %= shapes.length;\n    while (true) {\n      const windOffset = wind[windIndex] === '<' ? -1 : 1;\n      const offsetAfterWind = [shapeOffset[0] + windOffset, shapeOffset[1]];\n      windIndex++;\n      windIndex %= wind.length;\n      if (isValid(grid, shape, offsetAfterWind)) {\n        shapeOffset = offsetAfterWind;\n      }\n      const offsetAfterFall = [shapeOffset[0], shapeOffset[1] - 1];\n      if (isValid(grid, shape, offsetAfterFall)) {\n        shapeOffset = offsetAfterFall;\n      } else {\n        drawShape(grid, shape, shapeOffset);\n        currentTop = Math.max(currentTop, shapeOffset[1] + shape[0].length);\n        break;\n      }\n    }\n  }\n\n  return currentTop + topOffset;\n};\n\nconst isValid = (grid, shape, offset) => {\n  for (let x = 0; x < shape.length; x++) {\n    for (let y = 0; y < shape[0].length; y++) {\n      if (shape[x][y] === '.') {\n        continue;\n      }\n      const gridX = offset[0] + x;\n      const gridY = offset[1] + y;\n      if (gridX < 0 || gridX >= 7 || gridY < 0) {\n        return false;\n      }\n      if (grid[gridX][gridY] === '#') {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst drawShape = (grid, shape, offset) => {\n  for (let x = 0; x < shape.length; x++) {\n    for (let y = 0; y < shape[0].length; y++) {\n      if (shape[x][y] === '.') {\n        continue;\n      }\n      const gridX = offset[0] + x;\n      const gridY = offset[1] + y;\n      grid[gridX][gridY] = '#';\n    }\n  }\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day18_1/index.js",["543","544","545","546","547","548","549","550","551","552","553","554","555"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => row.split(',').map((val) => parseInt(val)));\n\nconst calculateSolution = (input) => {\n  const { maxX, maxY, maxZ } = input.reduce((acc, curr) => {\n    acc.maxX = Math.max(acc.maxX, curr[0]);\n    acc.maxY = Math.max(acc.maxY, curr[1]);\n    acc.maxZ = Math.max(acc.maxZ, curr[2]);\n    return acc;\n  }, { maxX: 0, maxY: 0, maxZ: 0 });\n  const grid = [];\n  for (let x = 0; x < maxX + 1; x++) {\n    grid.push([]);\n    for (let y = 0; y < maxY + 1; y++) {\n      grid[x].push(new Array(maxZ + 1).fill('.'));\n    }\n  }\n  for (const point of input) {\n    grid[point[0]][point[1]][point[2]] = '#';\n  }\n\n  // for (let x = 1; x < grid.length - 1; x++) {\n  //   for (let y = 1; y < grid[0].length - 1; y++) {\n  //     for (let z = 1; z < grid[0][0].length - 1; z++) {\n  //       const boundRegion = grid[x][y][z] === \".\" && getBoundRegion(x, y, z, grid, new Set());\n  //       if (!boundRegion) continue;\n  //       for (const point of boundRegion) {\n  //         grid[point[0]][point[1]][point[2]] = \"#\";\n  //       }\n  //     }\n  //   }\n  // }\n\n  let surfaceArea = 0;\n  for (const point of input) {\n    const neighbors = getNeighbors(grid, ...point);\n\n    for (const neighbor of neighbors) {\n      if (neighbor !== '#') {\n        surfaceArea += 1;\n      }\n    }\n  }\n  return surfaceArea;\n};\n\nconst getBoundRegion = (x, y, z, grid, visited) => {\n  const neighborCoords = getNeighborCoordinates(x, y, z);\n\n  const emptyNeighbors = [];\n  for (const neighborCoord of neighborCoords) {\n    const neighbor = grid[neighborCoord[0]][neighborCoord[1]][neighborCoord[2]];\n    if (neighbor === undefined) {\n      return undefined;\n    }\n    if (visited.has(JSON.stringify(neighborCoord))) {\n      continue;\n    }\n    if (neighbor === '.') {\n      visited.add(JSON.stringify(neighborCoord));\n      emptyNeighbors.push(neighbor);\n      const rest = getBoundRegion(neighborCoord[0], neighborCoord[1], neighborCoord[2], grid, visited);\n      if (rest) {\n        emptyNeighbors.push();\n      } else {\n        return undefined;\n      }\n    }\n  }\n  return [...emptyNeighbors, [x, y, z]];\n};\n\nconst getNeighbors = (grid, x, y, z) => {\n  const neighbors = [];\n  neighbors.push(grid[x][y][z + 1]);\n  neighbors.push(grid[x][y][z - 1]);\n  neighbors.push(grid[x][y + 1]?.[z]);\n  neighbors.push(grid[x][y - 1]?.[z]);\n  neighbors.push(grid[x + 1]?.[y][z]);\n  neighbors.push(grid[x - 1]?.[y][z]);\n  return neighbors;\n};\n\nconst getNeighborCoordinates = (x, y, z) => {\n  const neighbors = [];\n  neighbors.push([x, y, z + 1]);\n  neighbors.push([x, y, z - 1]);\n  neighbors.push([x, y + 1, z]);\n  neighbors.push([x, y - 1, z]);\n  neighbors.push([x + 1, y, z]);\n  neighbors.push([x - 1, y, z]);\n  return neighbors;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day18_2/index.js",["556","557","558","559","560","561","562","563","564","565","566","567","568","569"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => row.split(',').map((val) => parseInt(val)));\n\nconst calculateSolution = (input) => {\n  const { maxX, maxY, maxZ } = input.reduce((acc, curr) => {\n    acc.maxX = Math.max(acc.maxX, curr[0]);\n    acc.maxY = Math.max(acc.maxY, curr[1]);\n    acc.maxZ = Math.max(acc.maxZ, curr[2]);\n    return acc;\n  }, { maxX: 0, maxY: 0, maxZ: 0 });\n  const grid = [];\n  for (let x = 0; x < maxX + 1; x++) {\n    grid.push([]);\n    for (let y = 0; y < maxY + 1; y++) {\n      grid[x].push(new Array(maxZ + 1).fill('.'));\n    }\n  }\n  for (const point of input) {\n    grid[point[0]][point[1]][point[2]] = '#';\n  }\n\n  for (let x = 1; x < grid.length - 1; x++) {\n    for (let y = 1; y < grid[0].length - 1; y++) {\n      for (let z = 1; z < grid[0][0].length - 1; z++) {\n        const boundRegion = grid[x][y][z] === '.' && getBoundRegion(x, y, z, grid, new Set());\n        if (!boundRegion) continue;\n        for (const point of boundRegion) {\n          grid[point[0]][point[1]][point[2]] = '#';\n        }\n      }\n    }\n  }\n\n  let surfaceArea = 0;\n  for (const point of input) {\n    const neighbors = getNeighbors(grid, ...point);\n\n    for (const neighbor of neighbors) {\n      if (neighbor !== '#') {\n        surfaceArea += 1;\n      }\n    }\n  }\n  return surfaceArea;\n};\n\nconst getBoundRegion = (x, y, z, grid, visited) => {\n  const neighborCoords = getNeighborCoordinates(x, y, z);\n\n  const emptyNeighbors = [];\n  for (const neighborCoord of neighborCoords) {\n    const neighbor = grid[neighborCoord[0]]?.[neighborCoord[1]]?.[neighborCoord[2]];\n    if (neighbor === undefined) {\n      return undefined;\n    }\n    if (visited.has(JSON.stringify(neighborCoord))) {\n      continue;\n    }\n    if (neighbor === '.') {\n      visited.add(JSON.stringify(neighborCoord));\n      emptyNeighbors.push(neighborCoord);\n      const rest = getBoundRegion(neighborCoord[0], neighborCoord[1], neighborCoord[2], grid, visited);\n      if (rest) {\n        emptyNeighbors.push(...rest);\n      } else {\n        return undefined;\n      }\n    }\n  }\n  return [...emptyNeighbors, [x, y, z]];\n};\n\nconst getNeighbors = (grid, x, y, z) => {\n  const neighbors = [];\n  neighbors.push(grid[x][y][z + 1]);\n  neighbors.push(grid[x][y][z - 1]);\n  neighbors.push(grid[x][y + 1]?.[z]);\n  neighbors.push(grid[x][y - 1]?.[z]);\n  neighbors.push(grid[x + 1]?.[y][z]);\n  neighbors.push(grid[x - 1]?.[y][z]);\n  return neighbors;\n};\n\nconst getNeighborCoordinates = (x, y, z) => {\n  const neighbors = [];\n  neighbors.push([x, y, z + 1]);\n  neighbors.push([x, y, z - 1]);\n  neighbors.push([x, y + 1, z]);\n  neighbors.push([x, y - 1, z]);\n  neighbors.push([x + 1, y, z]);\n  neighbors.push([x - 1, y, z]);\n  return neighbors;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day19_1/index.js",["570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('\\n').map((row) => {\n  const match = row.match(/Blueprint (\\d+): Each ore robot costs (\\d+) ore. Each clay robot costs (\\d+) ore. Each obsidian robot costs (\\d+) ore and (\\d+) clay. Each geode robot costs (\\d+) ore and (\\d+) obsidian./);\n  return {\n    id: parseInt(match[1]),\n    oreRobotCost: parseInt(match[2]),\n    clayRobotCost: parseInt(match[3]),\n    obsidianRobotCost: [parseInt(match[4]), parseInt(match[5])],\n    geodeRobotCost: [parseInt(match[6]), parseInt(match[7])],\n  };\n});\n\nconst calculateSolution = (input) => {\n  let qualityLevel = 0;\n  for (const blueprint of input) {\n    const [score, choices] = runSimulation(blueprint);\n    qualityLevel += (score * blueprint.id);\n  }\n  return qualityLevel;\n};\n\nconst runSimulation = (blueprint) => {\n  const simulationState = {\n    minute: 1,\n    oreRobotCount: 1,\n    clayRobotCount: 0,\n    obsidianRobotCount: 0,\n    geodeRobotCount: 0,\n    oreCount: 0,\n    clayCount: 0,\n    obsidianCount: 0,\n    geodeCount: 0,\n    blueprint,\n    maxClayRobots: Math.floor((24 - 2 - blueprint.geodeRobotCost[1]) / blueprint.clayRobotCost),\n    maxOreRobots: Math.floor((24 - 3 - blueprint.geodeRobotCost[1] - blueprint.obsidianRobotCost[1]) / blueprint.oreRobotCost) + 1,\n  };\n\n  return stepSimulation(simulationState);\n};\n\nlet simsRun = 0;\n\nconst stepSimulation = (state, choices = []) => {\n  if (state.minute > 24 || unwinnableState(state)) {\n    simsRun++;\n    if (simsRun % 1000000 === 0) {\n      console.log(`Sims executed: ${simsRun}`);\n    }\n    return [state.geodeCount, choices];\n  }\n  // const minOreCost = Math.min(state.blueprint.oreRobotCost,\n  //   state.blueprint.clayRobotCost,\n  //   state.blueprint.obsidianRobotCost[0],\n  //   state.blueprint.geodeRobotCost[0]);\n  // while (minOreCost > state.oreCount && state.minute <= 23) {\n  //   incrementTime(state);\n  // }\n\n  const canBuyOreRobot = state.oreCount >= state.blueprint.oreRobotCost && state.oreRobotCount < state.maxOreRobots;\n  const canBuyClayRobot = state.oreCount >= state.blueprint.clayRobotCost && state.clayRobotCount < state.maxClayRobots;\n  const canBuyObsidianRobot = state.oreCount >= state.blueprint.obsidianRobotCost[0]\n    && state.clayCount >= state.blueprint.obsidianRobotCost[1];\n  const canBuyGeodeRobot = state.oreCount >= state.blueprint.geodeRobotCost[0]\n    && state.obsidianCount >= state.blueprint.geodeRobotCost[1];\n  const possibleMoves = [\n    ['buyGeodeRobot', canBuyGeodeRobot],\n    ['buyObsidianRobot', canBuyObsidianRobot],\n    ['buyClayRobot', canBuyClayRobot],\n    ['buyOreRobot', canBuyOreRobot],\n    ['doNothing', !canBuyOreRobot || !canBuyClayRobot || !canBuyObsidianRobot || !canBuyGeodeRobot],\n  ];\n\n  let maxScore = 0;\n  let winningChoices = [];\n  for (const option of possibleMoves) {\n    if (!option[1]) {\n      continue;\n    }\n    const nextState = generateNextState(option[0], state);\n\n    const [score, finishedChoices] = stepSimulation(nextState, [...choices, option[0]]);\n    if (score > maxScore) {\n      maxScore = score;\n      winningChoices = finishedChoices;\n    }\n    maxScore = Math.max(maxScore, score);\n    if (option === 'buyGeodeRobot') {\n      break;\n    }\n  }\n  return [maxScore, winningChoices];\n};\n\nconst unwinnableState = (state) => {\n  const geodeCutoff = 23;\n  // const obsidianCutoff = geodeCutoff-1-()\n};\n\nconst generateNextState = (option, state) => {\n  const nextState = { ...state };\n  incrementTime(nextState);\n  switch (option) {\n    case 'buyOreRobot':\n      nextState.oreRobotCount++;\n      nextState.oreCount -= nextState.blueprint.oreRobotCost;\n      break;\n    case 'buyClayRobot':\n      nextState.clayRobotCount++;\n      nextState.oreCount -= nextState.blueprint.clayRobotCost;\n      break;\n    case 'buyObsidianRobot':\n      nextState.obsidianRobotCount++;\n      nextState.oreCount -= nextState.blueprint.obsidianRobotCost[0];\n      nextState.clayCount -= nextState.blueprint.obsidianRobotCost[1];\n      break;\n    case 'buyGeodeRobot':\n      nextState.geodeRobotCount++;\n      nextState.oreCount -= nextState.blueprint.geodeRobotCost[0];\n      nextState.obsidianCount -= nextState.blueprint.geodeRobotCost[1];\n      break;\n  }\n  return nextState;\n};\n\n// const minPredictedOutput = (state) => {\n//   const pState = { ...state };\n//   if (!pState.clayRobotCount) {\n//     const minutesForClayRobot = Math.ceil((pState.blueprint.clayRobotCost - pState.oreCount) / pState.oreRobotCount);\n//     for (let x = 0; x <= minutesForClayRobot; x++) {\n//       incrementTime(pState);\n//     }\n//     pState.clayRobotCount += 1;\n//     pState.oreCount -= pState.blueprint.clayRobotCost;\n//   }\n//   if (!pState.obsidianRobotCount) {\n//     const minutesForObsidianRobot = Math.max(\n//       Math.ceil((pState.blueprint.obsidianRobotCost[1] - pState.clayCount) / pState.clayRobotCount),\n//       Math.ceil((pState.blueprint.obsidianRobotCost[0] - pState.oreCount) / pState.oreRobotCount));\n//       for (let x = 0; x <= minutesForObsidianRobot; x++) {\n//         incrementTime(pState);\n//       }\n//     pState.obsidianRobotCount += 1;\n//     pState.clayCount -= pState.blueprint.obsidianRobotCost[1];\n//     pState.oreCount -= pState.blueprint.obsidianRobotCost[0];\n//   }\n//   if (!pState.geodeRobotCount) {\n//     const minutesForGeodeRobot = Math.max(\n//       Math.ceil((pState.blueprint.geodeRobotCost[1] - pState.obsidianCount) / pState.obsidianRobotCount),\n//       Math.ceil((pState.blueprint.geodeRobotCost[0] - pState.oreCount) / pState.oreRobotCount));\n//       for (let x = 0; x <= minutesForGeodeRobot; x++) {\n//         incrementTime(pState);\n//       }\n//     pState.geodeRobotCount += 1;\n//     pState.obsidianCount -= pState.blueprint.geodeRobotCost[1];\n//     pState.oreCount -= pState.blueprint.geodeRobotCost[0];\n//   }\n//   return (24-pState.minute) * pState.geodeRobotCount;\n// }\n\nconst incrementTime = (state) => {\n  state.minute += 1;\n  state.oreCount += state.oreRobotCount;\n  state.clayCount += state.clayRobotCount;\n  state.obsidianCount += state.obsidianRobotCount;\n  state.geodeCount += state.geodeRobotCount;\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day19_2/index.js",["601","602","603"],[],"const solution = {\n  solve: (input) => calculateSolution(parseInput(input)),\n};\n\nconst parseInput = (input) => input.split('');\n\nconst calculateSolution = (input) => {\n};\n\nexport default solution;\n","/home/jacob/advent-of-code/2022/solutions/day20_1/index.js",[],[],"/home/jacob/advent-of-code/2022/solutions/day20_2/index.js",[],[],"/home/jacob/advent-of-code/2022/solutions/day21_1/index.js",["604","605","606"],[],"/home/jacob/advent-of-code/2022/solutions/day21_2/index.js",["607","608","609"],[],"/home/jacob/advent-of-code/2022/solutions/day22_1/index.js",["610","611","612"],[],"/home/jacob/advent-of-code/2022/solutions/day22_2/index.js",["613","614","615"],[],"/home/jacob/advent-of-code/2022/solutions/day23_1/index.js",["616","617","618"],[],"/home/jacob/advent-of-code/2022/solutions/day23_2/index.js",["619","620","621"],[],"/home/jacob/advent-of-code/2022/solutions/day24_1/index.js",["622","623","624"],[],"/home/jacob/advent-of-code/2022/solutions/day24_2/index.js",["625","626","627"],[],"/home/jacob/advent-of-code/2022/solutions/day25_1/index.js",["628","629","630"],[],"/home/jacob/advent-of-code/2022/solutions/day25_2/index.js",["631","632","633"],[],{"ruleId":"634","severity":2,"message":"635","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":7,"endColumn":31,"fix":"637"},{"ruleId":"634","severity":2,"message":"638","line":12,"column":13,"nodeType":null,"messageId":"636","endLine":14,"endColumn":10,"fix":"639"},{"ruleId":"634","severity":2,"message":"640","line":15,"column":5,"nodeType":null,"messageId":"641","endLine":15,"endColumn":6,"fix":"642"},{"ruleId":"634","severity":2,"message":"635","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":7,"endColumn":31,"fix":"643"},{"ruleId":"634","severity":2,"message":"638","line":12,"column":13,"nodeType":null,"messageId":"636","endLine":14,"endColumn":10,"fix":"644"},{"ruleId":"634","severity":2,"message":"645","line":15,"column":5,"nodeType":null,"messageId":"636","endLine":15,"endColumn":40,"fix":"646"},{"ruleId":"634","severity":2,"message":"647","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":75,"fix":"648"},{"ruleId":"634","severity":2,"message":"649","line":16,"column":19,"nodeType":null,"messageId":"636","endLine":16,"endColumn":43,"fix":"650"},{"ruleId":"634","severity":2,"message":"647","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":75,"fix":"651"},{"ruleId":"634","severity":2,"message":"652","line":10,"column":13,"nodeType":null,"messageId":"636","endLine":10,"endColumn":32,"fix":"653"},{"ruleId":"634","severity":2,"message":"654","line":11,"column":13,"nodeType":null,"messageId":"636","endLine":11,"endColumn":32,"fix":"655"},{"ruleId":"634","severity":2,"message":"656","line":12,"column":13,"nodeType":null,"messageId":"636","endLine":12,"endColumn":32,"fix":"657"},{"ruleId":"658","severity":1,"message":"659","line":27,"column":10,"nodeType":"660","messageId":"661","endLine":27,"endColumn":19},{"ruleId":"634","severity":2,"message":"662","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":47,"fix":"663"},{"ruleId":"634","severity":2,"message":"664","line":10,"column":41,"nodeType":null,"messageId":"636","endLine":10,"endColumn":43,"fix":"665"},{"ruleId":"634","severity":2,"message":"664","line":11,"column":45,"nodeType":null,"messageId":"636","endLine":11,"endColumn":47,"fix":"666"},{"ruleId":"634","severity":2,"message":"664","line":12,"column":45,"nodeType":null,"messageId":"636","endLine":12,"endColumn":47,"fix":"667"},{"ruleId":"658","severity":1,"message":"659","line":29,"column":10,"nodeType":"660","messageId":"661","endLine":29,"endColumn":19},{"ruleId":"668","severity":1,"message":"669","line":29,"column":10,"nodeType":"670","messageId":"671","endLine":29,"endColumn":19},{"ruleId":"668","severity":1,"message":"672","line":1,"column":10,"nodeType":"670","messageId":"671","endLine":1,"endColumn":15},{"ruleId":"634","severity":2,"message":"673","line":1,"column":23,"nodeType":null,"messageId":"636","endLine":1,"endColumn":31,"fix":"674"},{"ruleId":"634","severity":2,"message":"675","line":7,"column":30,"nodeType":null,"messageId":"676","endLine":7,"endColumn":30,"fix":"677"},{"ruleId":"634","severity":2,"message":"678","line":8,"column":1,"nodeType":null,"messageId":"636","endLine":8,"endColumn":14,"fix":"679"},{"ruleId":"634","severity":2,"message":"680","line":9,"column":3,"nodeType":null,"messageId":"636","endLine":9,"endColumn":58,"fix":"681"},{"ruleId":"634","severity":2,"message":"682","line":16,"column":9,"nodeType":null,"messageId":"636","endLine":19,"endColumn":5,"fix":"683"},{"ruleId":"668","severity":1,"message":"672","line":1,"column":10,"nodeType":"670","messageId":"671","endLine":1,"endColumn":15},{"ruleId":"634","severity":2,"message":"673","line":1,"column":23,"nodeType":null,"messageId":"636","endLine":1,"endColumn":31,"fix":"684"},{"ruleId":"634","severity":2,"message":"675","line":7,"column":30,"nodeType":null,"messageId":"676","endLine":7,"endColumn":30,"fix":"685"},{"ruleId":"634","severity":2,"message":"678","line":8,"column":1,"nodeType":null,"messageId":"636","endLine":8,"endColumn":14,"fix":"686"},{"ruleId":"634","severity":2,"message":"687","line":9,"column":1,"nodeType":null,"messageId":"636","endLine":9,"endColumn":58,"fix":"688"},{"ruleId":"634","severity":2,"message":"689","line":17,"column":1,"nodeType":null,"messageId":"636","endLine":18,"endColumn":49,"fix":"690"},{"ruleId":"634","severity":2,"message":"691","line":19,"column":7,"nodeType":null,"messageId":"636","endLine":19,"endColumn":52,"fix":"692"},{"ruleId":"634","severity":2,"message":"693","line":20,"column":7,"nodeType":null,"messageId":"636","endLine":20,"endColumn":52,"fix":"694"},{"ruleId":"634","severity":2,"message":"695","line":21,"column":6,"nodeType":null,"messageId":"641","endLine":21,"endColumn":9,"fix":"696"},{"ruleId":"634","severity":2,"message":"697","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":86,"fix":"698"},{"ruleId":"634","severity":2,"message":"699","line":11,"column":32,"nodeType":null,"messageId":"636","endLine":11,"endColumn":35,"fix":"700"},{"ruleId":"634","severity":2,"message":"664","line":20,"column":56,"nodeType":null,"messageId":"636","endLine":20,"endColumn":58,"fix":"701"},{"ruleId":"634","severity":2,"message":"699","line":34,"column":26,"nodeType":null,"messageId":"636","endLine":34,"endColumn":29,"fix":"702"},{"ruleId":"634","severity":2,"message":"697","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":86,"fix":"703"},{"ruleId":"634","severity":2,"message":"699","line":11,"column":32,"nodeType":null,"messageId":"636","endLine":11,"endColumn":35,"fix":"704"},{"ruleId":"634","severity":2,"message":"664","line":19,"column":56,"nodeType":null,"messageId":"636","endLine":19,"endColumn":58,"fix":"705"},{"ruleId":"634","severity":2,"message":"699","line":33,"column":26,"nodeType":null,"messageId":"636","endLine":33,"endColumn":29,"fix":"706"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"707"},{"ruleId":"658","severity":1,"message":"708","line":7,"column":35,"nodeType":"709","messageId":"661","endLine":7,"endColumn":37},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"710"},{"ruleId":"658","severity":1,"message":"708","line":7,"column":35,"nodeType":"709","messageId":"661","endLine":7,"endColumn":37},{"ruleId":"634","severity":2,"message":"662","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":47,"fix":"711"},{"ruleId":"634","severity":2,"message":"699","line":11,"column":29,"nodeType":null,"messageId":"636","endLine":11,"endColumn":32,"fix":"712"},{"ruleId":"634","severity":2,"message":"713","line":12,"column":21,"nodeType":null,"messageId":"636","endLine":12,"endColumn":24,"fix":"714"},{"ruleId":"634","severity":2,"message":"715","line":13,"column":23,"nodeType":null,"messageId":"636","endLine":13,"endColumn":27,"fix":"716"},{"ruleId":"634","severity":2,"message":"717","line":15,"column":30,"nodeType":null,"messageId":"636","endLine":15,"endColumn":34,"fix":"718"},{"ruleId":"634","severity":2,"message":"719","line":16,"column":25,"nodeType":null,"messageId":"636","endLine":16,"endColumn":28,"fix":"720"},{"ruleId":"634","severity":2,"message":"721","line":18,"column":32,"nodeType":null,"messageId":"636","endLine":18,"endColumn":36,"fix":"722"},{"ruleId":"634","severity":2,"message":"723","line":24,"column":28,"nodeType":null,"messageId":"636","endLine":24,"endColumn":33,"fix":"724"},{"ruleId":"634","severity":2,"message":"725","line":38,"column":50,"nodeType":null,"messageId":"636","endLine":38,"endColumn":101,"fix":"726"},{"ruleId":"634","severity":2,"message":"662","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":47,"fix":"727"},{"ruleId":"658","severity":1,"message":"708","line":7,"column":35,"nodeType":"709","messageId":"661","endLine":7,"endColumn":37},{"ruleId":"634","severity":2,"message":"699","line":11,"column":29,"nodeType":null,"messageId":"636","endLine":11,"endColumn":32,"fix":"728"},{"ruleId":"634","severity":2,"message":"713","line":12,"column":21,"nodeType":null,"messageId":"636","endLine":12,"endColumn":24,"fix":"729"},{"ruleId":"634","severity":2,"message":"715","line":13,"column":23,"nodeType":null,"messageId":"636","endLine":13,"endColumn":27,"fix":"730"},{"ruleId":"634","severity":2,"message":"717","line":15,"column":30,"nodeType":null,"messageId":"636","endLine":15,"endColumn":34,"fix":"731"},{"ruleId":"634","severity":2,"message":"719","line":16,"column":25,"nodeType":null,"messageId":"636","endLine":16,"endColumn":28,"fix":"732"},{"ruleId":"634","severity":2,"message":"721","line":18,"column":32,"nodeType":null,"messageId":"636","endLine":18,"endColumn":36,"fix":"733"},{"ruleId":"634","severity":2,"message":"723","line":24,"column":28,"nodeType":null,"messageId":"636","endLine":24,"endColumn":33,"fix":"734"},{"ruleId":"634","severity":2,"message":"725","line":45,"column":50,"nodeType":null,"messageId":"636","endLine":45,"endColumn":101,"fix":"735"},{"ruleId":"634","severity":2,"message":"736","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":74,"fix":"737"},{"ruleId":"634","severity":2,"message":"738","line":11,"column":24,"nodeType":null,"messageId":"636","endLine":11,"endColumn":115,"fix":"739"},{"ruleId":"634","severity":2,"message":"738","line":14,"column":24,"nodeType":null,"messageId":"636","endLine":14,"endColumn":115,"fix":"740"},{"ruleId":"634","severity":2,"message":"741","line":17,"column":24,"nodeType":null,"messageId":"636","endLine":17,"endColumn":115,"fix":"742"},{"ruleId":"634","severity":2,"message":"741","line":20,"column":24,"nodeType":null,"messageId":"636","endLine":20,"endColumn":115,"fix":"743"},{"ruleId":"634","severity":2,"message":"744","line":24,"column":46,"nodeType":null,"messageId":"636","endLine":24,"endColumn":89,"fix":"745"},{"ruleId":"634","severity":2,"message":"746","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":74,"fix":"747"},{"ruleId":"634","severity":2,"message":"647","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":75,"fix":"748"},{"ruleId":"634","severity":2,"message":"749","line":8,"column":14,"nodeType":null,"messageId":"636","endLine":8,"endColumn":37,"fix":"750"},{"ruleId":"634","severity":2,"message":"751","line":33,"column":45,"nodeType":null,"messageId":"636","endLine":33,"endColumn":78,"fix":"752"},{"ruleId":"658","severity":1,"message":"708","line":36,"column":37,"nodeType":"709","messageId":"661","endLine":36,"endColumn":39},{"ruleId":"634","severity":2,"message":"753","line":39,"column":7,"nodeType":null,"messageId":"636","endLine":39,"endColumn":38,"fix":"754"},{"ruleId":"755","severity":2,"message":"756","line":42,"column":23,"nodeType":"757","messageId":"758","endLine":42,"endColumn":25},{"ruleId":"755","severity":2,"message":"756","line":45,"column":46,"nodeType":"757","messageId":"758","endLine":45,"endColumn":48},{"ruleId":"634","severity":2,"message":"647","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":75,"fix":"759"},{"ruleId":"634","severity":2,"message":"749","line":8,"column":14,"nodeType":null,"messageId":"636","endLine":8,"endColumn":37,"fix":"760"},{"ruleId":"634","severity":2,"message":"761","line":14,"column":20,"nodeType":null,"messageId":"636","endLine":14,"endColumn":126,"fix":"762"},{"ruleId":"763","severity":2,"message":"764","line":34,"column":15,"nodeType":"670","messageId":"765","endLine":34,"endColumn":25},{"ruleId":"634","severity":2,"message":"751","line":41,"column":45,"nodeType":null,"messageId":"636","endLine":41,"endColumn":78,"fix":"766"},{"ruleId":"634","severity":2,"message":"753","line":47,"column":7,"nodeType":null,"messageId":"636","endLine":47,"endColumn":38,"fix":"767"},{"ruleId":"634","severity":2,"message":"768","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":106,"fix":"769"},{"ruleId":"634","severity":2,"message":"770","line":13,"column":14,"nodeType":null,"messageId":"636","endLine":13,"endColumn":32,"fix":"771"},{"ruleId":"634","severity":2,"message":"772","line":16,"column":14,"nodeType":null,"messageId":"636","endLine":16,"endColumn":61,"fix":"773"},{"ruleId":"634","severity":2,"message":"768","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":106,"fix":"774"},{"ruleId":"634","severity":2,"message":"775","line":13,"column":33,"nodeType":null,"messageId":"636","endLine":13,"endColumn":36,"fix":"776"},{"ruleId":"634","severity":2,"message":"777","line":19,"column":26,"nodeType":null,"messageId":"636","endLine":19,"endColumn":29,"fix":"778"},{"ruleId":"763","severity":2,"message":"779","line":25,"column":15,"nodeType":"670","messageId":"765","endLine":25,"endColumn":18},{"ruleId":"763","severity":2,"message":"780","line":26,"column":15,"nodeType":"670","messageId":"765","endLine":26,"endColumn":21},{"ruleId":"634","severity":2,"message":"777","line":28,"column":30,"nodeType":null,"messageId":"636","endLine":28,"endColumn":33,"fix":"781"},{"ruleId":"634","severity":2,"message":"782","line":36,"column":36,"nodeType":null,"messageId":"636","endLine":36,"endColumn":50,"fix":"783"},{"ruleId":"634","severity":2,"message":"784","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":49,"fix":"785"},{"ruleId":"634","severity":2,"message":"662","line":8,"column":29,"nodeType":null,"messageId":"636","endLine":8,"endColumn":33,"fix":"786"},{"ruleId":"634","severity":2,"message":"699","line":9,"column":29,"nodeType":null,"messageId":"636","endLine":9,"endColumn":32,"fix":"787"},{"ruleId":"634","severity":2,"message":"699","line":10,"column":34,"nodeType":null,"messageId":"636","endLine":10,"endColumn":37,"fix":"788"},{"ruleId":"634","severity":2,"message":"699","line":11,"column":42,"nodeType":null,"messageId":"636","endLine":11,"endColumn":45,"fix":"789"},{"ruleId":"634","severity":2,"message":"699","line":12,"column":43,"nodeType":null,"messageId":"636","endLine":12,"endColumn":46,"fix":"790"},{"ruleId":"634","severity":2,"message":"699","line":13,"column":44,"nodeType":null,"messageId":"636","endLine":13,"endColumn":47,"fix":"791"},{"ruleId":"634","severity":2,"message":"792","line":16,"column":20,"nodeType":null,"messageId":"636","endLine":16,"endColumn":46,"fix":"793"},{"ruleId":"658","severity":1,"message":"708","line":23,"column":38,"nodeType":"709","messageId":"661","endLine":23,"endColumn":40},{"ruleId":"634","severity":2,"message":"794","line":25,"column":19,"nodeType":null,"messageId":"636","endLine":25,"endColumn":24,"fix":"795"},{"ruleId":"634","severity":2,"message":"796","line":31,"column":10,"nodeType":null,"messageId":"636","endLine":31,"endColumn":13,"fix":"797"},{"ruleId":"634","severity":2,"message":"798","line":33,"column":10,"nodeType":null,"messageId":"636","endLine":33,"endColumn":13,"fix":"799"},{"ruleId":"634","severity":2,"message":"800","line":39,"column":50,"nodeType":null,"messageId":"636","endLine":39,"endColumn":83,"fix":"801"},{"ruleId":"634","severity":2,"message":"784","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":49,"fix":"802"},{"ruleId":"634","severity":2,"message":"662","line":8,"column":29,"nodeType":null,"messageId":"636","endLine":8,"endColumn":33,"fix":"803"},{"ruleId":"634","severity":2,"message":"699","line":9,"column":29,"nodeType":null,"messageId":"636","endLine":9,"endColumn":32,"fix":"804"},{"ruleId":"634","severity":2,"message":"699","line":10,"column":34,"nodeType":null,"messageId":"636","endLine":10,"endColumn":37,"fix":"805"},{"ruleId":"634","severity":2,"message":"699","line":11,"column":42,"nodeType":null,"messageId":"636","endLine":11,"endColumn":45,"fix":"806"},{"ruleId":"634","severity":2,"message":"699","line":12,"column":43,"nodeType":null,"messageId":"636","endLine":12,"endColumn":46,"fix":"807"},{"ruleId":"634","severity":2,"message":"699","line":13,"column":44,"nodeType":null,"messageId":"636","endLine":13,"endColumn":47,"fix":"808"},{"ruleId":"634","severity":2,"message":"792","line":16,"column":20,"nodeType":null,"messageId":"636","endLine":16,"endColumn":46,"fix":"809"},{"ruleId":"763","severity":2,"message":"810","line":18,"column":22,"nodeType":"670","messageId":"765","endLine":18,"endColumn":28},{"ruleId":"658","severity":1,"message":"708","line":24,"column":46,"nodeType":"709","messageId":"661","endLine":24,"endColumn":48},{"ruleId":"634","severity":2,"message":"796","line":28,"column":10,"nodeType":null,"messageId":"636","endLine":28,"endColumn":13,"fix":"811"},{"ruleId":"634","severity":2,"message":"798","line":30,"column":10,"nodeType":null,"messageId":"636","endLine":30,"endColumn":13,"fix":"812"},{"ruleId":"634","severity":2,"message":"800","line":37,"column":50,"nodeType":null,"messageId":"636","endLine":37,"endColumn":83,"fix":"813"},{"ruleId":"634","severity":2,"message":"746","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":74,"fix":"814"},{"ruleId":"634","severity":2,"message":"815","line":23,"column":23,"nodeType":null,"messageId":"636","endLine":23,"endColumn":26,"fix":"816"},{"ruleId":"634","severity":2,"message":"817","line":28,"column":23,"nodeType":null,"messageId":"636","endLine":28,"endColumn":26,"fix":"818"},{"ruleId":"668","severity":1,"message":"819","line":71,"column":7,"nodeType":"670","messageId":"671","endLine":71,"endColumn":24},{"ruleId":"634","severity":2,"message":"699","line":75,"column":72,"nodeType":null,"messageId":"636","endLine":75,"endColumn":75,"fix":"820"},{"ruleId":"634","severity":2,"message":"699","line":77,"column":26,"nodeType":null,"messageId":"636","endLine":77,"endColumn":29,"fix":"821"},{"ruleId":"634","severity":2,"message":"746","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":74,"fix":"822"},{"ruleId":"634","severity":2,"message":"815","line":22,"column":23,"nodeType":null,"messageId":"636","endLine":22,"endColumn":26,"fix":"823"},{"ruleId":"634","severity":2,"message":"817","line":26,"column":23,"nodeType":null,"messageId":"636","endLine":26,"endColumn":26,"fix":"824"},{"ruleId":"668","severity":1,"message":"819","line":77,"column":7,"nodeType":"670","messageId":"671","endLine":77,"endColumn":24},{"ruleId":"634","severity":2,"message":"699","line":81,"column":72,"nodeType":null,"messageId":"636","endLine":81,"endColumn":75,"fix":"825"},{"ruleId":"634","severity":2,"message":"699","line":83,"column":26,"nodeType":null,"messageId":"636","endLine":83,"endColumn":29,"fix":"826"},{"ruleId":"634","severity":2,"message":"827","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":80,"fix":"828"},{"ruleId":"634","severity":2,"message":"829","line":9,"column":60,"nodeType":null,"messageId":"636","endLine":9,"endColumn":71,"fix":"830"},{"ruleId":"634","severity":2,"message":"827","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":80,"fix":"831"},{"ruleId":"634","severity":2,"message":"832","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":47,"fix":"833"},{"ruleId":"634","severity":2,"message":"834","line":6,"column":1,"nodeType":null,"messageId":"636","endLine":8,"endColumn":40,"fix":"835"},{"ruleId":"634","severity":2,"message":"775","line":19,"column":38,"nodeType":null,"messageId":"636","endLine":19,"endColumn":41,"fix":"836"},{"ruleId":"634","severity":2,"message":"777","line":30,"column":55,"nodeType":null,"messageId":"636","endLine":30,"endColumn":58,"fix":"837"},{"ruleId":"634","severity":2,"message":"777","line":36,"column":55,"nodeType":null,"messageId":"636","endLine":36,"endColumn":58,"fix":"838"},{"ruleId":"839","severity":1,"message":"840","line":51,"column":10,"nodeType":"841","messageId":"758","endLine":51,"endColumn":14},{"ruleId":"634","severity":2,"message":"842","line":79,"column":36,"nodeType":null,"messageId":"636","endLine":79,"endColumn":39,"fix":"843"},{"ruleId":"634","severity":2,"message":"775","line":90,"column":25,"nodeType":null,"messageId":"636","endLine":90,"endColumn":28,"fix":"844"},{"ruleId":"634","severity":2,"message":"845","line":1,"column":16,"nodeType":null,"messageId":"636","endLine":1,"endColumn":20,"fix":"846"},{"ruleId":"634","severity":2,"message":"832","line":7,"column":30,"nodeType":null,"messageId":"636","endLine":7,"endColumn":47,"fix":"847"},{"ruleId":"634","severity":2,"message":"834","line":8,"column":1,"nodeType":null,"messageId":"636","endLine":10,"endColumn":40,"fix":"848"},{"ruleId":"668","severity":1,"message":"849","line":13,"column":9,"nodeType":"670","messageId":"671","endLine":13,"endColumn":16},{"ruleId":"634","severity":2,"message":"775","line":21,"column":44,"nodeType":null,"messageId":"636","endLine":21,"endColumn":47,"fix":"850"},{"ruleId":"634","severity":2,"message":"777","line":22,"column":14,"nodeType":null,"messageId":"636","endLine":22,"endColumn":17,"fix":"851"},{"ruleId":"634","severity":2,"message":"777","line":34,"column":55,"nodeType":null,"messageId":"636","endLine":34,"endColumn":58,"fix":"852"},{"ruleId":"634","severity":2,"message":"777","line":40,"column":55,"nodeType":null,"messageId":"636","endLine":40,"endColumn":58,"fix":"853"},{"ruleId":"634","severity":2,"message":"854","line":59,"column":20,"nodeType":null,"messageId":"636","endLine":59,"endColumn":83,"fix":"855"},{"ruleId":"839","severity":1,"message":"840","line":65,"column":10,"nodeType":"841","messageId":"758","endLine":65,"endColumn":14},{"ruleId":"634","severity":2,"message":"842","line":96,"column":36,"nodeType":null,"messageId":"636","endLine":96,"endColumn":39,"fix":"856"},{"ruleId":"634","severity":2,"message":"775","line":108,"column":25,"nodeType":null,"messageId":"636","endLine":108,"endColumn":28,"fix":"857"},{"ruleId":"634","severity":2,"message":"832","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":47,"fix":"858"},{"ruleId":"634","severity":2,"message":"859","line":6,"column":1,"nodeType":null,"messageId":"636","endLine":6,"endColumn":115,"fix":"860"},{"ruleId":"634","severity":2,"message":"861","line":7,"column":1,"nodeType":null,"messageId":"636","endLine":7,"endColumn":120,"fix":"862"},{"ruleId":"634","severity":2,"message":"863","line":10,"column":24,"nodeType":null,"messageId":"676","endLine":10,"endColumn":24,"fix":"864"},{"ruleId":"634","severity":2,"message":"865","line":11,"column":22,"nodeType":null,"messageId":"676","endLine":11,"endColumn":22,"fix":"866"},{"ruleId":"634","severity":2,"message":"863","line":15,"column":7,"nodeType":null,"messageId":"676","endLine":15,"endColumn":7,"fix":"867"},{"ruleId":"634","severity":2,"message":"863","line":16,"column":24,"nodeType":null,"messageId":"676","endLine":16,"endColumn":24,"fix":"868"},{"ruleId":"634","severity":2,"message":"863","line":22,"column":7,"nodeType":null,"messageId":"676","endLine":22,"endColumn":7,"fix":"869"},{"ruleId":"634","severity":2,"message":"775","line":27,"column":38,"nodeType":null,"messageId":"636","endLine":27,"endColumn":41,"fix":"870"},{"ruleId":"634","severity":2,"message":"871","line":35,"column":30,"nodeType":null,"messageId":"636","endLine":35,"endColumn":33,"fix":"872"},{"ruleId":"634","severity":2,"message":"873","line":38,"column":30,"nodeType":null,"messageId":"636","endLine":38,"endColumn":33,"fix":"874"},{"ruleId":"634","severity":2,"message":"875","line":41,"column":9,"nodeType":null,"messageId":"636","endLine":41,"endColumn":79,"fix":"876"},{"ruleId":"634","severity":2,"message":"877","line":46,"column":11,"nodeType":null,"messageId":"636","endLine":46,"endColumn":173,"fix":"878"},{"ruleId":"634","severity":2,"message":"775","line":47,"column":25,"nodeType":null,"messageId":"636","endLine":47,"endColumn":28,"fix":"879"},{"ruleId":"634","severity":2,"message":"777","line":48,"column":21,"nodeType":null,"messageId":"636","endLine":48,"endColumn":24,"fix":"880"},{"ruleId":"634","severity":2,"message":"881","line":56,"column":17,"nodeType":null,"messageId":"636","endLine":56,"endColumn":35,"fix":"882"},{"ruleId":"634","severity":2,"message":"832","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":47,"fix":"883"},{"ruleId":"634","severity":2,"message":"859","line":6,"column":1,"nodeType":null,"messageId":"636","endLine":6,"endColumn":115,"fix":"884"},{"ruleId":"634","severity":2,"message":"861","line":7,"column":1,"nodeType":null,"messageId":"636","endLine":7,"endColumn":120,"fix":"885"},{"ruleId":"658","severity":1,"message":"708","line":9,"column":35,"nodeType":"709","messageId":"661","endLine":9,"endColumn":37},{"ruleId":"634","severity":2,"message":"886","line":20,"column":10,"nodeType":null,"messageId":"636","endLine":20,"endColumn":114,"fix":"887"},{"ruleId":"634","severity":2,"message":"888","line":22,"column":23,"nodeType":null,"messageId":"636","endLine":22,"endColumn":127,"fix":"889"},{"ruleId":"634","severity":2,"message":"832","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":47,"fix":"890"},{"ruleId":"634","severity":2,"message":"891","line":6,"column":1,"nodeType":null,"messageId":"636","endLine":6,"endColumn":135,"fix":"892"},{"ruleId":"634","severity":2,"message":"893","line":7,"column":1,"nodeType":null,"messageId":"636","endLine":7,"endColumn":102,"fix":"894"},{"ruleId":"634","severity":2,"message":"895","line":8,"column":3,"nodeType":null,"messageId":"636","endLine":8,"endColumn":77,"fix":"896"},{"ruleId":"634","severity":2,"message":"897","line":12,"column":25,"nodeType":null,"messageId":"636","endLine":12,"endColumn":55,"fix":"898"},{"ruleId":"899","severity":2,"message":"900","line":14,"column":3,"nodeType":"901","messageId":"902","endLine":21,"endColumn":4},{"ruleId":"634","severity":2,"message":"903","line":62,"column":36,"nodeType":null,"messageId":"641","endLine":63,"endColumn":11,"fix":"904"},{"ruleId":"763","severity":2,"message":"905","line":63,"column":20,"nodeType":"670","messageId":"765","endLine":63,"endColumn":25},{"ruleId":"634","severity":2,"message":"906","line":64,"column":11,"nodeType":null,"messageId":"641","endLine":64,"endColumn":13,"fix":"907"},{"ruleId":"634","severity":2,"message":"906","line":65,"column":1,"nodeType":null,"messageId":"641","endLine":65,"endColumn":3,"fix":"908"},{"ruleId":"634","severity":2,"message":"906","line":66,"column":11,"nodeType":null,"messageId":"641","endLine":66,"endColumn":13,"fix":"909"},{"ruleId":"634","severity":2,"message":"906","line":67,"column":1,"nodeType":null,"messageId":"641","endLine":67,"endColumn":3,"fix":"910"},{"ruleId":"634","severity":2,"message":"911","line":68,"column":1,"nodeType":null,"messageId":"636","endLine":68,"endColumn":11,"fix":"912"},{"ruleId":"634","severity":2,"message":"913","line":71,"column":34,"nodeType":null,"messageId":"636","endLine":71,"endColumn":114,"fix":"914"},{"ruleId":"634","severity":2,"message":"915","line":89,"column":11,"nodeType":null,"messageId":"636","endLine":89,"endColumn":120,"fix":"916"},{"ruleId":"634","severity":2,"message":"832","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":47,"fix":"917"},{"ruleId":"634","severity":2,"message":"891","line":6,"column":1,"nodeType":null,"messageId":"636","endLine":6,"endColumn":135,"fix":"918"},{"ruleId":"634","severity":2,"message":"893","line":7,"column":1,"nodeType":null,"messageId":"636","endLine":7,"endColumn":102,"fix":"919"},{"ruleId":"634","severity":2,"message":"920","line":8,"column":1,"nodeType":null,"messageId":"636","endLine":8,"endColumn":77,"fix":"921"},{"ruleId":"634","severity":2,"message":"922","line":12,"column":25,"nodeType":null,"messageId":"636","endLine":12,"endColumn":107,"fix":"923"},{"ruleId":"899","severity":2,"message":"900","line":14,"column":3,"nodeType":"901","messageId":"902","endLine":21,"endColumn":4},{"ruleId":"763","severity":2,"message":"924","line":64,"column":38,"nodeType":"670","messageId":"765","endLine":64,"endColumn":42},{"ruleId":"634","severity":2,"message":"925","line":66,"column":21,"nodeType":null,"messageId":"636","endLine":66,"endColumn":147,"fix":"926"},{"ruleId":"763","severity":2,"message":"924","line":66,"column":81,"nodeType":"670","messageId":"765","endLine":66,"endColumn":85},{"ruleId":"634","severity":2,"message":"927","line":71,"column":38,"nodeType":null,"messageId":"641","endLine":72,"endColumn":13,"fix":"928"},{"ruleId":"763","severity":2,"message":"929","line":72,"column":22,"nodeType":"670","messageId":"765","endLine":72,"endColumn":27},{"ruleId":"634","severity":2,"message":"906","line":73,"column":13,"nodeType":null,"messageId":"641","endLine":73,"endColumn":15,"fix":"930"},{"ruleId":"634","severity":2,"message":"931","line":74,"column":1,"nodeType":null,"messageId":"636","endLine":74,"endColumn":17,"fix":"932"},{"ruleId":"634","severity":2,"message":"906","line":75,"column":13,"nodeType":null,"messageId":"641","endLine":75,"endColumn":15,"fix":"933"},{"ruleId":"634","severity":2,"message":"906","line":76,"column":1,"nodeType":null,"messageId":"641","endLine":76,"endColumn":3,"fix":"934"},{"ruleId":"634","severity":2,"message":"906","line":77,"column":1,"nodeType":null,"messageId":"641","endLine":77,"endColumn":3,"fix":"935"},{"ruleId":"634","severity":2,"message":"936","line":80,"column":35,"nodeType":null,"messageId":"636","endLine":80,"endColumn":110,"fix":"937"},{"ruleId":"763","severity":2,"message":"938","line":92,"column":38,"nodeType":"670","messageId":"765","endLine":92,"endColumn":42},{"ruleId":"634","severity":2,"message":"927","line":96,"column":38,"nodeType":null,"messageId":"641","endLine":97,"endColumn":13,"fix":"939"},{"ruleId":"763","severity":2,"message":"929","line":97,"column":22,"nodeType":"670","messageId":"765","endLine":97,"endColumn":27},{"ruleId":"634","severity":2,"message":"940","line":98,"column":1,"nodeType":null,"messageId":"636","endLine":98,"endColumn":15,"fix":"941"},{"ruleId":"634","severity":2,"message":"906","line":99,"column":1,"nodeType":null,"messageId":"641","endLine":99,"endColumn":3,"fix":"942"},{"ruleId":"634","severity":2,"message":"906","line":100,"column":13,"nodeType":null,"messageId":"641","endLine":100,"endColumn":15,"fix":"943"},{"ruleId":"634","severity":2,"message":"906","line":101,"column":1,"nodeType":null,"messageId":"641","endLine":101,"endColumn":3,"fix":"944"},{"ruleId":"634","severity":2,"message":"906","line":102,"column":11,"nodeType":null,"messageId":"641","endLine":102,"endColumn":13,"fix":"945"},{"ruleId":"634","severity":2,"message":"946","line":105,"column":41,"nodeType":null,"messageId":"636","endLine":105,"endColumn":122,"fix":"947"},{"ruleId":"634","severity":2,"message":"948","line":124,"column":11,"nodeType":null,"messageId":"636","endLine":124,"endColumn":114,"fix":"949"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"950"},{"ruleId":"634","severity":2,"message":"775","line":10,"column":33,"nodeType":null,"messageId":"636","endLine":10,"endColumn":36,"fix":"951"},{"ruleId":"634","severity":2,"message":"952","line":13,"column":7,"nodeType":null,"messageId":"636","endLine":13,"endColumn":31,"fix":"953"},{"ruleId":"634","severity":2,"message":"954","line":14,"column":6,"nodeType":null,"messageId":"636","endLine":14,"endColumn":55,"fix":"955"},{"ruleId":"634","severity":2,"message":"956","line":15,"column":6,"nodeType":null,"messageId":"636","endLine":15,"endColumn":55,"fix":"957"},{"ruleId":"634","severity":2,"message":"958","line":16,"column":7,"nodeType":null,"messageId":"636","endLine":16,"endColumn":25,"fix":"959"},{"ruleId":"634","severity":2,"message":"960","line":17,"column":6,"nodeType":null,"messageId":"636","endLine":17,"endColumn":28,"fix":"961"},{"ruleId":"634","severity":2,"message":"775","line":27,"column":22,"nodeType":null,"messageId":"636","endLine":27,"endColumn":25,"fix":"962"},{"ruleId":"839","severity":1,"message":"840","line":35,"column":12,"nodeType":"841","messageId":"758","endLine":35,"endColumn":16},{"ruleId":"634","severity":2,"message":"963","line":36,"column":46,"nodeType":null,"messageId":"636","endLine":36,"endColumn":49,"fix":"964"},{"ruleId":"634","severity":2,"message":"775","line":59,"column":27,"nodeType":null,"messageId":"636","endLine":59,"endColumn":30,"fix":"965"},{"ruleId":"634","severity":2,"message":"777","line":67,"column":34,"nodeType":null,"messageId":"636","endLine":67,"endColumn":37,"fix":"966"},{"ruleId":"634","severity":2,"message":"775","line":78,"column":27,"nodeType":null,"messageId":"636","endLine":78,"endColumn":30,"fix":"967"},{"ruleId":"634","severity":2,"message":"777","line":83,"column":28,"nodeType":null,"messageId":"636","endLine":83,"endColumn":31,"fix":"968"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"969"},{"ruleId":"634","severity":2,"message":"952","line":9,"column":7,"nodeType":null,"messageId":"636","endLine":9,"endColumn":31,"fix":"970"},{"ruleId":"634","severity":2,"message":"954","line":10,"column":6,"nodeType":null,"messageId":"636","endLine":10,"endColumn":55,"fix":"971"},{"ruleId":"634","severity":2,"message":"956","line":11,"column":6,"nodeType":null,"messageId":"636","endLine":11,"endColumn":55,"fix":"972"},{"ruleId":"634","severity":2,"message":"958","line":12,"column":7,"nodeType":null,"messageId":"636","endLine":12,"endColumn":25,"fix":"973"},{"ruleId":"634","severity":2,"message":"960","line":13,"column":6,"nodeType":null,"messageId":"636","endLine":13,"endColumn":28,"fix":"974"},{"ruleId":"668","severity":1,"message":"975","line":16,"column":9,"nodeType":"670","messageId":"671","endLine":16,"endColumn":20},{"ruleId":"668","severity":1,"message":"976","line":17,"column":9,"nodeType":"670","messageId":"671","endLine":17,"endColumn":19},{"ruleId":"634","severity":2,"message":"775","line":20,"column":33,"nodeType":null,"messageId":"636","endLine":20,"endColumn":36,"fix":"977"},{"ruleId":"634","severity":2,"message":"978","line":53,"column":13,"nodeType":null,"messageId":"636","endLine":53,"endColumn":64,"fix":"979"},{"ruleId":"634","severity":2,"message":"980","line":54,"column":11,"nodeType":null,"messageId":"636","endLine":56,"endColumn":69,"fix":"981"},{"ruleId":"634","severity":2,"message":"982","line":60,"column":46,"nodeType":null,"messageId":"636","endLine":60,"endColumn":58,"fix":"983"},{"ruleId":"634","severity":2,"message":"984","line":62,"column":17,"nodeType":null,"messageId":"636","endLine":62,"endColumn":48,"fix":"985"},{"ruleId":"634","severity":2,"message":"775","line":73,"column":22,"nodeType":null,"messageId":"636","endLine":73,"endColumn":25,"fix":"986"},{"ruleId":"839","severity":1,"message":"840","line":81,"column":12,"nodeType":"841","messageId":"758","endLine":81,"endColumn":16},{"ruleId":"634","severity":2,"message":"963","line":82,"column":46,"nodeType":null,"messageId":"636","endLine":82,"endColumn":49,"fix":"987"},{"ruleId":"634","severity":2,"message":"775","line":106,"column":27,"nodeType":null,"messageId":"636","endLine":106,"endColumn":30,"fix":"988"},{"ruleId":"634","severity":2,"message":"777","line":114,"column":34,"nodeType":null,"messageId":"636","endLine":114,"endColumn":37,"fix":"989"},{"ruleId":"634","severity":2,"message":"775","line":125,"column":27,"nodeType":null,"messageId":"636","endLine":125,"endColumn":30,"fix":"990"},{"ruleId":"634","severity":2,"message":"777","line":130,"column":28,"nodeType":null,"messageId":"636","endLine":130,"endColumn":31,"fix":"991"},{"ruleId":"634","severity":2,"message":"992","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":75,"fix":"993"},{"ruleId":"634","severity":2,"message":"863","line":8,"column":45,"nodeType":null,"messageId":"676","endLine":8,"endColumn":45,"fix":"994"},{"ruleId":"634","severity":2,"message":"995","line":9,"column":1,"nodeType":null,"messageId":"676","endLine":9,"endColumn":1,"fix":"996"},{"ruleId":"634","severity":2,"message":"997","line":10,"column":1,"nodeType":null,"messageId":"636","endLine":10,"endColumn":5,"fix":"998"},{"ruleId":"634","severity":2,"message":"995","line":11,"column":1,"nodeType":null,"messageId":"676","endLine":11,"endColumn":1,"fix":"999"},{"ruleId":"634","severity":2,"message":"995","line":12,"column":5,"nodeType":null,"messageId":"676","endLine":12,"endColumn":5,"fix":"1000"},{"ruleId":"634","severity":2,"message":"1001","line":13,"column":1,"nodeType":null,"messageId":"636","endLine":13,"endColumn":35,"fix":"1002"},{"ruleId":"634","severity":2,"message":"775","line":18,"column":45,"nodeType":null,"messageId":"636","endLine":18,"endColumn":48,"fix":"1003"},{"ruleId":"634","severity":2,"message":"777","line":22,"column":42,"nodeType":null,"messageId":"636","endLine":22,"endColumn":45,"fix":"1004"},{"ruleId":"634","severity":2,"message":"777","line":42,"column":24,"nodeType":null,"messageId":"636","endLine":42,"endColumn":27,"fix":"1005"},{"ruleId":"668","severity":1,"message":"1006","line":50,"column":7,"nodeType":"670","messageId":"671","endLine":50,"endColumn":21},{"ruleId":"634","severity":2,"message":"775","line":62,"column":22,"nodeType":null,"messageId":"636","endLine":62,"endColumn":25,"fix":"1007"},{"ruleId":"634","severity":2,"message":"1008","line":65,"column":35,"nodeType":null,"messageId":"636","endLine":65,"endColumn":102,"fix":"1009"},{"ruleId":"634","severity":2,"message":"992","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":75,"fix":"1010"},{"ruleId":"634","severity":2,"message":"863","line":8,"column":45,"nodeType":null,"messageId":"676","endLine":8,"endColumn":45,"fix":"1011"},{"ruleId":"634","severity":2,"message":"995","line":9,"column":1,"nodeType":null,"messageId":"676","endLine":9,"endColumn":1,"fix":"1012"},{"ruleId":"634","severity":2,"message":"995","line":10,"column":5,"nodeType":null,"messageId":"676","endLine":10,"endColumn":5,"fix":"1013"},{"ruleId":"634","severity":2,"message":"997","line":11,"column":1,"nodeType":null,"messageId":"636","endLine":11,"endColumn":5,"fix":"1014"},{"ruleId":"634","severity":2,"message":"995","line":12,"column":5,"nodeType":null,"messageId":"676","endLine":12,"endColumn":5,"fix":"1015"},{"ruleId":"634","severity":2,"message":"1016","line":13,"column":3,"nodeType":null,"messageId":"636","endLine":13,"endColumn":35,"fix":"1017"},{"ruleId":"634","severity":2,"message":"775","line":18,"column":45,"nodeType":null,"messageId":"636","endLine":18,"endColumn":48,"fix":"1018"},{"ruleId":"634","severity":2,"message":"777","line":22,"column":42,"nodeType":null,"messageId":"636","endLine":22,"endColumn":45,"fix":"1019"},{"ruleId":"634","severity":2,"message":"775","line":28,"column":47,"nodeType":null,"messageId":"636","endLine":28,"endColumn":50,"fix":"1020"},{"ruleId":"634","severity":2,"message":"777","line":31,"column":48,"nodeType":null,"messageId":"636","endLine":31,"endColumn":51,"fix":"1021"},{"ruleId":"634","severity":2,"message":"777","line":42,"column":24,"nodeType":null,"messageId":"636","endLine":42,"endColumn":27,"fix":"1022"},{"ruleId":"634","severity":2,"message":"775","line":62,"column":22,"nodeType":null,"messageId":"636","endLine":62,"endColumn":25,"fix":"1023"},{"ruleId":"634","severity":2,"message":"1008","line":65,"column":35,"nodeType":null,"messageId":"636","endLine":65,"endColumn":102,"fix":"1024"},{"ruleId":"634","severity":2,"message":"1025","line":5,"column":30,"nodeType":null,"messageId":"636","endLine":5,"endColumn":47,"fix":"1026"},{"ruleId":"634","severity":2,"message":"1027","line":6,"column":1,"nodeType":null,"messageId":"636","endLine":6,"endColumn":215,"fix":"1028"},{"ruleId":"634","severity":2,"message":"995","line":7,"column":1,"nodeType":null,"messageId":"676","endLine":7,"endColumn":1,"fix":"1029"},{"ruleId":"634","severity":2,"message":"997","line":8,"column":1,"nodeType":null,"messageId":"636","endLine":8,"endColumn":5,"fix":"1030"},{"ruleId":"634","severity":2,"message":"995","line":9,"column":1,"nodeType":null,"messageId":"676","endLine":9,"endColumn":1,"fix":"1031"},{"ruleId":"634","severity":2,"message":"997","line":10,"column":1,"nodeType":null,"messageId":"636","endLine":10,"endColumn":5,"fix":"1032"},{"ruleId":"634","severity":2,"message":"995","line":11,"column":1,"nodeType":null,"messageId":"676","endLine":11,"endColumn":1,"fix":"1033"},{"ruleId":"634","severity":2,"message":"997","line":12,"column":1,"nodeType":null,"messageId":"636","endLine":12,"endColumn":5,"fix":"1034"},{"ruleId":"634","severity":2,"message":"995","line":13,"column":3,"nodeType":null,"messageId":"676","endLine":13,"endColumn":3,"fix":"1035"},{"ruleId":"634","severity":2,"message":"995","line":14,"column":1,"nodeType":null,"messageId":"676","endLine":14,"endColumn":1,"fix":"1036"},{"ruleId":"668","severity":1,"message":"1037","line":19,"column":19,"nodeType":"670","messageId":"671","endLine":19,"endColumn":26},{"ruleId":"634","severity":2,"message":"1038","line":20,"column":21,"nodeType":null,"messageId":"636","endLine":20,"endColumn":43,"fix":"1039"},{"ruleId":"634","severity":2,"message":"1040","line":38,"column":18,"nodeType":null,"messageId":"636","endLine":38,"endColumn":126,"fix":"1041"},{"ruleId":"634","severity":2,"message":"1042","line":62,"column":25,"nodeType":null,"messageId":"676","endLine":62,"endColumn":25,"fix":"1043"},{"ruleId":"634","severity":2,"message":"1042","line":63,"column":26,"nodeType":null,"messageId":"676","endLine":63,"endColumn":26,"fix":"1044"},{"ruleId":"634","severity":2,"message":"1045","line":64,"column":30,"nodeType":null,"messageId":"636","endLine":64,"endColumn":85,"fix":"1046"},{"ruleId":"634","severity":2,"message":"1047","line":65,"column":5,"nodeType":null,"messageId":"641","endLine":65,"endColumn":8,"fix":"1048"},{"ruleId":"634","severity":2,"message":"1049","line":66,"column":27,"nodeType":null,"messageId":"636","endLine":66,"endColumn":79,"fix":"1050"},{"ruleId":"634","severity":2,"message":"1047","line":67,"column":5,"nodeType":null,"messageId":"641","endLine":67,"endColumn":8,"fix":"1051"},{"ruleId":"634","severity":2,"message":"1052","line":69,"column":6,"nodeType":null,"messageId":"636","endLine":69,"endColumn":21,"fix":"1053"},{"ruleId":"634","severity":2,"message":"1054","line":70,"column":6,"nodeType":null,"messageId":"636","endLine":70,"endColumn":24,"fix":"1055"},{"ruleId":"634","severity":2,"message":"1056","line":71,"column":6,"nodeType":null,"messageId":"636","endLine":71,"endColumn":20,"fix":"1057"},{"ruleId":"634","severity":2,"message":"1058","line":72,"column":6,"nodeType":null,"messageId":"636","endLine":72,"endColumn":19,"fix":"1059"},{"ruleId":"634","severity":2,"message":"1060","line":73,"column":6,"nodeType":null,"messageId":"636","endLine":73,"endColumn":17,"fix":"1061"},{"ruleId":"634","severity":2,"message":"1052","line":90,"column":20,"nodeType":null,"messageId":"636","endLine":90,"endColumn":35,"fix":"1062"},{"ruleId":"668","severity":1,"message":"1063","line":97,"column":26,"nodeType":"670","messageId":"671","endLine":97,"endColumn":31},{"ruleId":"668","severity":1,"message":"1064","line":98,"column":9,"nodeType":"670","messageId":"671","endLine":98,"endColumn":20},{"ruleId":"634","severity":2,"message":"1058","line":106,"column":10,"nodeType":null,"messageId":"636","endLine":106,"endColumn":23,"fix":"1065"},{"ruleId":"634","severity":2,"message":"1056","line":110,"column":10,"nodeType":null,"messageId":"636","endLine":110,"endColumn":24,"fix":"1066"},{"ruleId":"634","severity":2,"message":"1054","line":114,"column":10,"nodeType":null,"messageId":"636","endLine":114,"endColumn":28,"fix":"1067"},{"ruleId":"634","severity":2,"message":"1052","line":119,"column":10,"nodeType":null,"messageId":"636","endLine":119,"endColumn":25,"fix":"1068"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"1069"},{"ruleId":"668","severity":1,"message":"1070","line":7,"column":28,"nodeType":"670","messageId":"671","endLine":7,"endColumn":33},{"ruleId":"634","severity":2,"message":"1071","line":7,"column":39,"nodeType":null,"messageId":"641","endLine":8,"endColumn":1,"fix":"1072"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"1073"},{"ruleId":"668","severity":1,"message":"1070","line":7,"column":28,"nodeType":"670","messageId":"671","endLine":7,"endColumn":33},{"ruleId":"634","severity":2,"message":"1071","line":7,"column":39,"nodeType":null,"messageId":"641","endLine":8,"endColumn":1,"fix":"1074"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"1075"},{"ruleId":"668","severity":1,"message":"1070","line":7,"column":28,"nodeType":"670","messageId":"671","endLine":7,"endColumn":33},{"ruleId":"634","severity":2,"message":"1071","line":7,"column":39,"nodeType":null,"messageId":"641","endLine":8,"endColumn":1,"fix":"1076"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"1077"},{"ruleId":"668","severity":1,"message":"1070","line":7,"column":28,"nodeType":"670","messageId":"671","endLine":7,"endColumn":33},{"ruleId":"634","severity":2,"message":"1071","line":7,"column":39,"nodeType":null,"messageId":"641","endLine":8,"endColumn":1,"fix":"1078"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"1079"},{"ruleId":"668","severity":1,"message":"1070","line":7,"column":28,"nodeType":"670","messageId":"671","endLine":7,"endColumn":33},{"ruleId":"634","severity":2,"message":"1071","line":7,"column":39,"nodeType":null,"messageId":"641","endLine":8,"endColumn":1,"fix":"1080"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"1081"},{"ruleId":"668","severity":1,"message":"1070","line":7,"column":28,"nodeType":"670","messageId":"671","endLine":7,"endColumn":33},{"ruleId":"634","severity":2,"message":"1071","line":7,"column":39,"nodeType":null,"messageId":"641","endLine":8,"endColumn":1,"fix":"1082"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"1083"},{"ruleId":"668","severity":1,"message":"1070","line":7,"column":28,"nodeType":"670","messageId":"671","endLine":7,"endColumn":33},{"ruleId":"634","severity":2,"message":"1071","line":7,"column":39,"nodeType":null,"messageId":"641","endLine":8,"endColumn":1,"fix":"1084"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"1085"},{"ruleId":"668","severity":1,"message":"1070","line":7,"column":28,"nodeType":"670","messageId":"671","endLine":7,"endColumn":33},{"ruleId":"634","severity":2,"message":"1071","line":7,"column":39,"nodeType":null,"messageId":"641","endLine":8,"endColumn":1,"fix":"1086"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"1087"},{"ruleId":"668","severity":1,"message":"1070","line":7,"column":28,"nodeType":"670","messageId":"671","endLine":7,"endColumn":33},{"ruleId":"634","severity":2,"message":"1071","line":7,"column":39,"nodeType":null,"messageId":"641","endLine":8,"endColumn":1,"fix":"1088"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"1089"},{"ruleId":"668","severity":1,"message":"1070","line":7,"column":28,"nodeType":"670","messageId":"671","endLine":7,"endColumn":33},{"ruleId":"634","severity":2,"message":"1071","line":7,"column":39,"nodeType":null,"messageId":"641","endLine":8,"endColumn":1,"fix":"1090"},{"ruleId":"634","severity":2,"message":"664","line":5,"column":43,"nodeType":null,"messageId":"636","endLine":5,"endColumn":45,"fix":"1091"},{"ruleId":"668","severity":1,"message":"1070","line":7,"column":28,"nodeType":"670","messageId":"671","endLine":7,"endColumn":33},{"ruleId":"634","severity":2,"message":"1071","line":7,"column":39,"nodeType":null,"messageId":"641","endLine":8,"endColumn":1,"fix":"1092"},"prettier/prettier","Replace `·input⏎··.split('\\n\\n')⏎··.map((elf)·=>·elf.split('\\n'` with `⏎··input.split(\"\\n\\n\").map((elf)·=>·elf.split(\"\\n\"`","replace",{"range":"1093","text":"1094"},"Replace `⏎······(acc,·curr)·=>·[...acc,·curr.reduce((acc2,·curr2)·=>·acc2·+·curr2)],⏎······[],` with `(acc,·curr)·=>·[...acc,·curr.reduce((acc2,·curr2)·=>·acc2·+·curr2)],·[])`",{"range":"1095","text":"1096"},"Delete `)`","delete",{"range":"1097","text":"1098"},{"range":"1099","text":"1094"},{"range":"1100","text":"1096"},"Replace `).sort((a,·b)·=>·b·-·a).slice(0,·3)` with `.sort((a,·b)·=>·b·-·a)⏎····.slice(0,·3)⏎····`",{"range":"1101","text":"1102"},"Replace `'\\n').map((row)·=>·row.split('·'` with `\"\\n\").map((row)·=>·row.split(\"·\"`",{"range":"1103","text":"1104"},"Replace `(choiceScore·+·winScore)` with `choiceScore·+·winScore`",{"range":"1105","text":"1106"},{"range":"1107","text":"1104"},"Replace `'C',·Y:·'A',·Z:·'B'` with `\"C\",·Y:·\"A\",·Z:·\"B\"`",{"range":"1108","text":"1109"},"Replace `'A',·Y:·'B',·Z:·'C'` with `\"A\",·Y:·\"B\",·Z:·\"C\"`",{"range":"1110","text":"1111"},"Replace `'B',·Y:·'C',·Z:·'A'` with `\"B\",·Y:·\"C\",·Z:·\"A\"`",{"range":"1112","text":"1113"},"consistent-return","Expected to return a value at the end of function 'findMatch'.","FunctionDeclaration","missingReturn","Replace `'\\n'` with `\"\\n\"`",{"range":"1114","text":"1115"},"Replace `''` with `\"\"`",{"range":"1116","text":"1117"},{"range":"1118","text":"1117"},{"range":"1119","text":"1117"},"no-unused-vars","'findMatch' is defined but never used.","Identifier","unusedVar","'parse' is defined but never used.","Replace `'mathjs'` with `\"mathjs\"`",{"range":"1120","text":"1121"},"Insert `⏎·`","insert",{"range":"1122","text":"1123"},"Replace `··.split('\\n'` with `····.split(\"\\n\"`",{"range":"1124","text":"1125"},"Replace `.map((row)·=>·row.split(',').map((elf)·=>·elf.split('-'` with `··.map((row)·=>·row.split(\",\").map((elf)·=>·elf.split(\"-\"`",{"range":"1126","text":"1127"},"Replace `⏎······(elf1[0]·<=·elf2[0]·&&·elf1[1]·>=·elf2[1])⏎······||·(elf1[0]·>=·elf2[0]·&&·elf1[1]·<=·elf2[1])⏎····` with `(elf1[0]·<=·elf2[0]·&&·elf1[1]·>=·elf2[1])·||·(elf1[0]·>=·elf2[0]·&&·elf1[1]·<=·elf2[1])`",{"range":"1128","text":"1129"},{"range":"1130","text":"1121"},{"range":"1131","text":"1123"},{"range":"1132","text":"1125"},"Replace `··.map((row)·=>·row.split(',').map((elf)·=>·elf.split('-'` with `····.map((row)·=>·row.split(\",\").map((elf)·=>·elf.split(\"-\"`",{"range":"1133","text":"1134"},"Replace `⏎······(elf1[0]·<=·elf2[0]·&&·elf1[1]·>=·elf2[0])` with `······(elf1[0]·<=·elf2[0]·&&·elf1[1]·>=·elf2[0])·||`",{"range":"1135","text":"1136"},"Replace `||·(elf2[0]·<=·elf1[0]·&&·elf2[1]·>=·elf1[0])` with `(elf2[0]·<=·elf1[0]·&&·elf2[1]·>=·elf1[0])·||`",{"range":"1137","text":"1138"},"Replace `||·(elf1[1]·>=·elf2[1]·&&·elf1[0]·<=·elf2[1])` with `(elf1[1]·>=·elf2[1]·&&·elf1[0]·<=·elf2[1])·||`",{"range":"1139","text":"1140"},"Delete `·||`",{"range":"1141","text":"1098"},"Replace `'\\n\\n').map((section)·=>·section.split('\\n'` with `\"\\n\\n\").map((section)·=>·section.split(\"\\n\"`",{"range":"1142","text":"1143"},"Replace `'·'` with `\"·\"`",{"range":"1144","text":"1145"},{"range":"1146","text":"1117"},{"range":"1147","text":"1145"},{"range":"1148","text":"1143"},{"range":"1149","text":"1145"},{"range":"1150","text":"1117"},{"range":"1151","text":"1145"},{"range":"1152","text":"1117"},"Expected to return a value at the end of arrow function.","ArrowFunctionExpression",{"range":"1153","text":"1117"},{"range":"1154","text":"1115"},{"range":"1155","text":"1145"},"Replace `'$'` with `\"$\"`",{"range":"1156","text":"1157"},"Replace `'ls'` with `\"ls\"`",{"range":"1158","text":"1159"},"Replace `'cd'` with `\"cd\"`",{"range":"1160","text":"1161"},"Replace `'/'` with `\"/\"`",{"range":"1162","text":"1163"},"Replace `'..'` with `\"..\"`",{"range":"1164","text":"1165"},"Replace `'dir'` with `\"dir\"`",{"range":"1166","text":"1167"},"Replace `.map((folder)·=>·getDirectorySize(folder,·results))` with `⏎····.map((folder)·=>·getDirectorySize(folder,·results))⏎····`",{"range":"1168","text":"1169"},{"range":"1170","text":"1115"},{"range":"1171","text":"1145"},{"range":"1172","text":"1157"},{"range":"1173","text":"1159"},{"range":"1174","text":"1161"},{"range":"1175","text":"1163"},{"range":"1176","text":"1165"},{"range":"1177","text":"1167"},{"range":"1178","text":"1169"},"Replace `·input.split('\\n').map((row)·=>·row.split(''` with `⏎··input⏎····.split(\"\\n\")⏎····.map((row)·=>·row.split(\"\"`",{"range":"1179","text":"1180"},"Replace `·input[x][y].visible·=·true;·}·else·if·(input[x2][y].height·>=·input[x][y].height)·{·break;` with `⏎··········input[x][y].visible·=·true;⏎········}·else·if·(input[x2][y].height·>=·input[x][y].height)·{⏎··········break;⏎·······`",{"range":"1181","text":"1182"},{"range":"1183","text":"1182"},"Replace `·input[x][y].visible·=·true;·}·else·if·(input[x][y2].height·>=·input[x][y].height)·{·break;` with `⏎··········input[x][y].visible·=·true;⏎········}·else·if·(input[x][y2].height·>=·input[x][y].height)·{⏎··········break;⏎·······`",{"range":"1184","text":"1185"},{"range":"1186","text":"1185"},"Replace `·acc·+=·(curr.visible·?·1·:·0);·return·acc;` with `⏎····acc·+=·curr.visible·?·1·:·0;⏎····return·acc;⏎·`",{"range":"1187","text":"1188"},"Replace `·input.split('\\n').map((row)·=>·row.split(''` with `⏎··input.split(\"\\n\").map((row)·=>·row.split(\"\"`",{"range":"1189","text":"1190"},{"range":"1191","text":"1104"},"Replace `·D:·[0,·1],·L:·[-1,·0],` with `⏎··D:·[0,·1],⏎··L:·[-1,·0],⏎·`",{"range":"1192","text":"1193"},"Replace `·acc·+=·curr·?·1·:·0;·return·acc;` with `⏎····acc·+=·curr·?·1·:·0;⏎····return·acc;⏎·`",{"range":"1194","text":"1195"},"Replace `(xDist·*·xDist·+·yDist·*·yDist)` with `xDist·*·xDist·+·yDist·*·yDist`",{"range":"1196","text":"1197"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"range":"1198","text":"1104"},{"range":"1199","text":"1193"},"Replace `[500,·500],·[500,·500],·[500,·500],·[500,·500],·[500,·500],·[500,·500],·[500,·500],·[500,·500],·[500,·500]` with `⏎····[500,·500],⏎····[500,·500],⏎····[500,·500],⏎····[500,·500],⏎····[500,·500],⏎····[500,·500],⏎····[500,·500],⏎····[500,·500],⏎····[500,·500],⏎··`",{"range":"1200","text":"1201"},"no-shadow","'tailVector' is already declared in the upper scope on line 29 column 13.","noShadow",{"range":"1202","text":"1195"},{"range":"1203","text":"1197"},"Replace `·input.split('\\n').map((row)·=>·(row·===·'noop'·?·0·:·parseInt(row.split('·'` with `⏎··input.split(\"\\n\").map((row)·=>·(row·===·\"noop\"·?·0·:·parseInt(row.split(\"·\"`",{"range":"1204","text":"1205"},"Replace `(input[x]·?·2·:·1)` with `input[x]·?·2·:·1`",{"range":"1206","text":"1207"},"Replace `(valueToUse·*·((cycle·%·2)·?·cycle·-·1·:·cycle)` with `valueToUse·*·(cycle·%·2·?·cycle·-·1·:·cycle`",{"range":"1208","text":"1209"},{"range":"1210","text":"1205"},"Replace `'.'` with `\".\"`",{"range":"1211","text":"1212"},"Replace `'#'` with `\"#\"`",{"range":"1213","text":"1214"},"'row' is already declared in the upper scope on line 16 column 11.","'column' is already declared in the upper scope on line 17 column 11.",{"range":"1215","text":"1214"},"Replace `'')).join('\\n'` with `\"\")).join(\"\\n\"`",{"range":"1216","text":"1217"},"Replace `'\\n\\n'` with `\"\\n\\n\"`",{"range":"1218","text":"1219"},{"range":"1220","text":"1115"},{"range":"1221","text":"1145"},{"range":"1222","text":"1145"},{"range":"1223","text":"1145"},{"range":"1224","text":"1145"},{"range":"1225","text":"1145"},"Replace `.split(':·')[1].split(',')` with `⏎······.split(\":·\")[1]⏎······.split(\",\")⏎······`",{"range":"1226","text":"1227"},"Replace `'old'` with `\"old\"`",{"range":"1228","text":"1229"},"Replace `'+'` with `\"+\"`",{"range":"1230","text":"1231"},"Replace `'*'` with `\"*\"`",{"range":"1232","text":"1233"},"Replace `·acc[curr.id]·=·curr;·return·acc;` with `⏎····acc[curr.id]·=·curr;⏎····return·acc;⏎·`",{"range":"1234","text":"1235"},{"range":"1236","text":"1219"},{"range":"1237","text":"1115"},{"range":"1238","text":"1145"},{"range":"1239","text":"1145"},{"range":"1240","text":"1145"},{"range":"1241","text":"1145"},{"range":"1242","text":"1145"},{"range":"1243","text":"1227"},"'modVal' is already declared in the upper scope on line 11 column 9.",{"range":"1244","text":"1231"},{"range":"1245","text":"1233"},{"range":"1246","text":"1235"},{"range":"1247","text":"1190"},"Replace `'z'` with `\"z\"`",{"range":"1248","text":"1249"},"Replace `'a'` with `\"a\"`",{"range":"1250","text":"1251"},"'visualizeDistance' is assigned a value but never used.",{"range":"1252","text":"1145"},{"range":"1253","text":"1145"},{"range":"1254","text":"1190"},{"range":"1255","text":"1249"},{"range":"1256","text":"1251"},{"range":"1257","text":"1145"},{"range":"1258","text":"1145"},"Replace `·input.split('\\n\\n').map((pair)·=>·pair.split('\\n'` with `⏎··input.split(\"\\n\\n\").map((pair)·=>·pair.split(\"\\n\"`",{"range":"1259","text":"1260"},"Replace `(index·+·1)` with `index·+·1`",{"range":"1261","text":"1262"},{"range":"1263","text":"1260"},"Replace `·input.split('\\n'` with `⏎··input⏎····.split(\"\\n\"`",{"range":"1264","text":"1265"},"Replace `··.map((row)·=>·row.split('·->·')⏎····.map((coords)·=>·coords.split(',')⏎······.map((coord)·=>·parseInt(coord)))` with `····.map((row)·=>⏎······row.split(\"·->·\").map((coords)·=>·coords.split(\",\").map((coord)·=>·parseInt(coord)))⏎····`",{"range":"1266","text":"1267"},{"range":"1268","text":"1212"},{"range":"1269","text":"1214"},{"range":"1270","text":"1214"},"no-constant-condition","Unexpected constant condition.","Literal","Replace `'O'` with `\"O\"`",{"range":"1271","text":"1272"},{"range":"1273","text":"1212"},"Replace `'fs'` with `\"fs\"`",{"range":"1274","text":"1275"},{"range":"1276","text":"1265"},{"range":"1277","text":"1267"},"'xCoords' is assigned a value but never used.",{"range":"1278","text":"1212"},{"range":"1279","text":"1214"},{"range":"1280","text":"1214"},{"range":"1281","text":"1214"},"Replace `'sandpile.txt',·transposed.map((row)·=>·row.join('')).join('\\n'` with `\"sandpile.txt\",·transposed.map((row)·=>·row.join(\"\")).join(\"\\n\"`",{"range":"1282","text":"1283"},{"range":"1284","text":"1272"},{"range":"1285","text":"1212"},{"range":"1286","text":"1265"},"Replace `··.map((row)·=>·row.match(/Sensor·at·x=(-?[0-9]+),·y=(-?[0-9]+):·closest·beacon·is·at·x=(-?[0-9]+),·y=(-?[0-9]+)/)` with `····.map((row)·=>⏎······row.match(⏎········/Sensor·at·x=(-?[0-9]+),·y=(-?[0-9]+):·closest·beacon·is·at·x=(-?[0-9]+),·y=(-?[0-9]+)/⏎······)⏎····`",{"range":"1287","text":"1288"},"Replace `··.map((match)·=>·({·sensor:·[parseInt(match[1]),·parseInt(match[2])],·beacon:·[parseInt(match[3]),·parseInt(match[4])]` with `····.map((match)·=>·({⏎······sensor:·[parseInt(match[1]),·parseInt(match[2])],⏎······beacon:·[parseInt(match[3]),·parseInt(match[4])],⏎···`",{"range":"1289","text":"1290"},"Insert `⏎····`",{"range":"1291","text":"1292"},"Insert `⏎······`",{"range":"1293","text":"1294"},{"range":"1295","text":"1292"},{"range":"1296","text":"1292"},{"range":"1297","text":"1292"},{"range":"1298","text":"1212"},"Replace `'S'` with `\"S\"`",{"range":"1299","text":"1300"},"Replace `'B'` with `\"B\"`",{"range":"1301","text":"1302"},"Replace `(pair.sensor[1]·+·distance)·<·targetRow·||·(pair.sensor[1]·-·distance)` with `pair.sensor[1]·+·distance·<·targetRow·||·pair.sensor[1]·-·distance`",{"range":"1303","text":"1304"},"Replace `(pair.sensor[1]·<·targetRow·&&·pair.sensor[1]·+·remainingDistance·>=·targetRow)·||·(pair.sensor[1]·>·targetRow·&&·pair.sensor[1]·-·remainingDistance·<=·targetRow)` with `⏎········(pair.sensor[1]·<·targetRow·&&·pair.sensor[1]·+·remainingDistance·>=·targetRow)·||⏎········(pair.sensor[1]·>·targetRow·&&·pair.sensor[1]·-·remainingDistance·<=·targetRow)⏎······`",{"range":"1305","text":"1306"},{"range":"1307","text":"1212"},{"range":"1308","text":"1214"},"Replace `'S'·||·val·===·'#'` with `\"S\"·||·val·===·\"#\"`",{"range":"1309","text":"1310"},{"range":"1311","text":"1265"},{"range":"1312","text":"1288"},{"range":"1313","text":"1290"},"Replace `let·x·=·Math.max(pair.sensor[0]·-·distance,·0);·x·<=·Math.min(pair.sensor[0]·+·distance,·width·-·1);·x++` with `⏎······let·x·=·Math.max(pair.sensor[0]·-·distance,·0);⏎······x·<=·Math.min(pair.sensor[0]·+·distance,·width·-·1);⏎······x++⏎····`",{"range":"1314","text":"1315"},"Replace `Math.max(pair.sensor[1]·-·remainingDistance,·0),·Math.min(pair.sensor[1]·+·remainingDistance,·width·-·1)` with `⏎········Math.max(pair.sensor[1]·-·remainingDistance,·0),⏎········Math.min(pair.sensor[1]·+·remainingDistance,·width·-·1),⏎······`",{"range":"1316","text":"1317"},{"range":"1318","text":"1265"},"Replace `··.map((row)·=>·row.match(/Valve·([A-Z]{2})·has·flow·rate=([0-9]+);·tunnel(?:s)?·lead(?:s)?·to·valve(?:s)?·([A-Z]{2}(?:,·[A-Z]{2})*)/)` with `····.map((row)·=>⏎······row.match(⏎········/Valve·([A-Z]{2})·has·flow·rate=([0-9]+);·tunnel(?:s)?·lead(?:s)?·to·valve(?:s)?·([A-Z]{2}(?:,·[A-Z]{2})*)/⏎······)⏎····`",{"range":"1319","text":"1320"},"Replace `··.map((match)·=>·({·name:·match[1],·rate:·parseInt(match[2]),·neighbors:·match[3].split(',·').sort()` with `····.map((match)·=>·({⏎······name:·match[1],⏎······rate:·parseInt(match[2]),⏎······neighbors:·match[3].split(\",·\").sort(),⏎···`",{"range":"1321","text":"1322"},"Replace `.reduce((acc,·{·name,·...rest·})·=>·{·acc[name]·=·{·...rest·};·return·acc;` with `··.reduce((acc,·{·name,·...rest·})·=>·{⏎······acc[name]·=·{·...rest·};⏎······return·acc;⏎···`",{"range":"1323","text":"1324"},"Replace `·currentRoom:·'AA',·rooms:·{},` with `⏎····currentRoom:·\"AA\",⏎····rooms:·{},⏎···`",{"range":"1325","text":"1326"},"guard-for-in","The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.","ForInStatement","wrap","Delete `⏎··········`",{"range":"1327","text":"1098"},"'rooms' is already declared in the upper scope on line 51 column 9.","Delete `··`",{"range":"1328","text":"1098"},{"range":"1329","text":"1098"},{"range":"1330","text":"1098"},{"range":"1331","text":"1098"},"Replace `··········` with `········`",{"range":"1332","text":"1333"},"Replace `roomData[state.currentRoom].shortestPaths[room.name]·+·1,·state.minutesRemaining` with `⏎······roomData[state.currentRoom].shortestPaths[room.name]·+·1,⏎······state.minutesRemaining⏎····`",{"range":"1334","text":"1335"},"Replace `state.minutesRemaining·-·roomData[state.currentRoom].shortestPaths[room.name]·-·1)·*·roomData[room.name].rate` with `⏎····(state.minutesRemaining·-·roomData[state.currentRoom].shortestPaths[room.name]·-·1)·*⏎····roomData[room.name].rate⏎··)`",{"range":"1336","text":"1337"},{"range":"1338","text":"1265"},{"range":"1339","text":"1320"},{"range":"1340","text":"1322"},"Replace `··.reduce((acc,·{·name,·...rest·})·=>·{·acc[name]·=·{·...rest·};·return·acc;` with `····.reduce((acc,·{·name,·...rest·})·=>·{⏎······acc[name]·=·{·...rest·};⏎······return·acc;⏎···`",{"range":"1341","text":"1342"},"Replace `·meRoom:·'AA',·rooms:·{},·minutesRemaining:·26,·meIdleTime:·0,·elephantRoom:·'AA',` with `⏎····meRoom:·\"AA\",⏎····rooms:·{},⏎····minutesRemaining:·26,⏎····meIdleTime:·0,⏎····elephantRoom:·\"AA\",⏎···`",{"range":"1343","text":"1344"},"'room' is already declared in the upper scope on line 64 column 16.","Replace ``Trying·room·${room.name}·of·${JSON.stringify(rooms.filter((room)·=>·room.meScore·>·0).map((filterRoom)·=>·filterRoom.name))}`` with `⏎··········`Trying·room·${room.name}·of·${JSON.stringify(⏎············rooms.filter((room)·=>·room.meScore·>·0).map((filterRoom)·=>·filterRoom.name)⏎··········)}`⏎········`",{"range":"1345","text":"1346"},"Delete `⏎············`",{"range":"1347","text":"1098"},"'rooms' is already declared in the upper scope on line 59 column 9.",{"range":"1348","text":"1098"},"Replace `················` with `··············`",{"range":"1349","text":"1350"},{"range":"1351","text":"1098"},{"range":"1352","text":"1098"},{"range":"1353","text":"1098"},"Replace `roomData[state.meRoom].shortestPaths[room.name]·+·1,·state.minutesRemaining` with `⏎········roomData[state.meRoom].shortestPaths[room.name]·+·1,⏎········state.minutesRemaining⏎······`",{"range":"1354","text":"1355"},"'room' is already declared in the upper scope on line 92 column 16.",{"range":"1356","text":"1098"},"Replace `··············` with `············`",{"range":"1357","text":"1358"},{"range":"1359","text":"1098"},{"range":"1360","text":"1098"},{"range":"1361","text":"1098"},{"range":"1362","text":"1098"},"Replace `roomData[state.elephantRoom].shortestPaths[room.name]·+·1,·state.minutesRemaining` with `⏎········roomData[state.elephantRoom].shortestPaths[room.name]·+·1,⏎········state.minutesRemaining⏎······`",{"range":"1363","text":"1364"},"Replace `state.minutesRemaining·-·roomData[currentRoom].shortestPaths[room.name]·-·1)·*·roomData[room.name].rate` with `⏎····(state.minutesRemaining·-·roomData[currentRoom].shortestPaths[room.name]·-·1)·*⏎····roomData[room.name].rate⏎··)`",{"range":"1365","text":"1366"},{"range":"1367","text":"1117"},{"range":"1368","text":"1212"},"Replace `'#'],·['#'],·['#'],·['#'` with `\"#\"],·[\"#\"],·[\"#\"],·[\"#\"`",{"range":"1369","text":"1370"},"Replace `['.',·'#',·'.'],·['#',·'#',·'#'],·['.',·'#',·'.']` with `⏎······[\".\",·\"#\",·\".\"],⏎······[\"#\",·\"#\",·\"#\"],⏎······[\".\",·\"#\",·\".\"],⏎····`",{"range":"1371","text":"1372"},"Replace `['#',·'.',·'.'],·['#',·'.',·'.'],·['#',·'#',·'#']` with `⏎······[\"#\",·\".\",·\".\"],⏎······[\"#\",·\".\",·\".\"],⏎······[\"#\",·\"#\",·\"#\"],⏎····`",{"range":"1373","text":"1374"},"Replace `'#',·'#',·'#',·'#'` with `\"#\",·\"#\",·\"#\",·\"#\"`",{"range":"1375","text":"1376"},"Replace `['#',·'#'],·['#',·'#']` with `⏎······[\"#\",·\"#\"],⏎······[\"#\",·\"#\"],⏎····`",{"range":"1377","text":"1378"},{"range":"1379","text":"1212"},"Replace `'<'` with `\"<\"`",{"range":"1380","text":"1381"},{"range":"1382","text":"1212"},{"range":"1383","text":"1214"},{"range":"1384","text":"1212"},{"range":"1385","text":"1214"},{"range":"1386","text":"1117"},{"range":"1387","text":"1370"},{"range":"1388","text":"1372"},{"range":"1389","text":"1374"},{"range":"1390","text":"1376"},{"range":"1391","text":"1378"},"'extraNeeded' is assigned a value but never used.","'iterations' is assigned a value but never used.",{"range":"1392","text":"1212"},"Replace `lastThreeHeightDiffs[0]·===·lastThreeHeightDiffs[1]` with `⏎··········lastThreeHeightDiffs[0]·===·lastThreeHeightDiffs[1]·&&`",{"range":"1393","text":"1394"},"Replace `··&&·lastThreeHeightDiffs[0]·===·lastThreeHeightDiffs[2]⏎············&&·lastThreeCycleLengths[0]·===·lastThreeCycleLengths[1]⏎············&&·lastThreeCycleLengths[0]·===·lastThreeCycleLengths[2]` with `lastThreeHeightDiffs[0]·===·lastThreeHeightDiffs[2]·&&⏎··········lastThreeCycleLengths[0]·===·lastThreeCycleLengths[1]·&&⏎··········lastThreeCycleLengths[0]·===·lastThreeCycleLengths[2]⏎········`",{"range":"1395","text":"1396"},"Replace `(shapesLeft)` with `shapesLeft`",{"range":"1397","text":"1398"},"Replace `(cyclesRemaining·*·cycleLength)` with `cyclesRemaining·*·cycleLength`",{"range":"1399","text":"1400"},{"range":"1401","text":"1212"},{"range":"1402","text":"1381"},{"range":"1403","text":"1212"},{"range":"1404","text":"1214"},{"range":"1405","text":"1212"},{"range":"1406","text":"1214"},"Replace `·input.split('\\n').map((row)·=>·row.split(','` with `⏎··input.split(\"\\n\").map((row)·=>·row.split(\",\"`",{"range":"1407","text":"1408"},{"range":"1409","text":"1292"},"Insert `··`",{"range":"1410","text":"1411"},"Replace `····` with `······`",{"range":"1412","text":"1413"},{"range":"1414","text":"1411"},{"range":"1415","text":"1411"},"Replace `··},·{·maxX:·0,·maxY:·0,·maxZ:·0·}` with `····},⏎····{·maxX:·0,·maxY:·0,·maxZ:·0·}⏎··`",{"range":"1416","text":"1417"},{"range":"1418","text":"1212"},{"range":"1419","text":"1214"},{"range":"1420","text":"1214"},"'getBoundRegion' is assigned a value but never used.",{"range":"1421","text":"1212"},"Replace `neighborCoord[0],·neighborCoord[1],·neighborCoord[2],·grid,·visited` with `⏎········neighborCoord[0],⏎········neighborCoord[1],⏎········neighborCoord[2],⏎········grid,⏎········visited⏎······`",{"range":"1422","text":"1423"},{"range":"1424","text":"1408"},{"range":"1425","text":"1292"},{"range":"1426","text":"1411"},{"range":"1427","text":"1411"},{"range":"1428","text":"1413"},{"range":"1429","text":"1411"},"Replace `},·{·maxX:·0,·maxY:·0,·maxZ:·0·}` with `··},⏎····{·maxX:·0,·maxY:·0,·maxZ:·0·}⏎··`",{"range":"1430","text":"1431"},{"range":"1432","text":"1212"},{"range":"1433","text":"1214"},{"range":"1434","text":"1212"},{"range":"1435","text":"1214"},{"range":"1436","text":"1214"},{"range":"1437","text":"1212"},{"range":"1438","text":"1423"},"Replace `·input.split('\\n'` with `⏎··input.split(\"\\n\"`",{"range":"1439","text":"1440"},"Replace `··const·match·=·row.match(/Blueprint·(\\d+):·Each·ore·robot·costs·(\\d+)·ore.·Each·clay·robot·costs·(\\d+)·ore.·Each·obsidian·robot·costs·(\\d+)·ore·and·(\\d+)·clay.·Each·geode·robot·costs·(\\d+)·ore·and·(\\d+)·obsidian./` with `····const·match·=·row.match(⏎······/Blueprint·(\\d+):·Each·ore·robot·costs·(\\d+)·ore.·Each·clay·robot·costs·(\\d+)·ore.·Each·obsidian·robot·costs·(\\d+)·ore·and·(\\d+)·clay.·Each·geode·robot·costs·(\\d+)·ore·and·(\\d+)·obsidian./⏎····`",{"range":"1441","text":"1442"},{"range":"1443","text":"1411"},{"range":"1444","text":"1413"},{"range":"1445","text":"1411"},{"range":"1446","text":"1413"},{"range":"1447","text":"1411"},{"range":"1448","text":"1413"},{"range":"1449","text":"1411"},{"range":"1450","text":"1411"},"'choices' is assigned a value but never used.","Replace `(score·*·blueprint.id)` with `score·*·blueprint.id`",{"range":"1451","text":"1452"},"Replace `·Math.floor((24·-·3·-·blueprint.geodeRobotCost[1]·-·blueprint.obsidianRobotCost[1])·/·blueprint.oreRobotCost` with `⏎······Math.floor(⏎········(24·-·3·-·blueprint.geodeRobotCost[1]·-·blueprint.obsidianRobotCost[1])·/⏎··········blueprint.oreRobotCost⏎······`",{"range":"1453","text":"1454"},"Insert `⏎···`",{"range":"1455","text":"1456"},{"range":"1457","text":"1456"},"Replace `·state.oreCount·>=·state.blueprint.obsidianRobotCost[0]` with `⏎····state.oreCount·>=·state.blueprint.obsidianRobotCost[0]·&&`",{"range":"1458","text":"1459"},"Delete `&&·`",{"range":"1460","text":"1098"},"Replace `·state.oreCount·>=·state.blueprint.geodeRobotCost[0]` with `⏎····state.oreCount·>=·state.blueprint.geodeRobotCost[0]·&&`",{"range":"1461","text":"1462"},{"range":"1463","text":"1098"},"Replace `'buyGeodeRobot'` with `\"buyGeodeRobot\"`",{"range":"1464","text":"1465"},"Replace `'buyObsidianRobot'` with `\"buyObsidianRobot\"`",{"range":"1466","text":"1467"},"Replace `'buyClayRobot'` with `\"buyClayRobot\"`",{"range":"1468","text":"1469"},"Replace `'buyOreRobot'` with `\"buyOreRobot\"`",{"range":"1470","text":"1471"},"Replace `'doNothing'` with `\"doNothing\"`",{"range":"1472","text":"1473"},{"range":"1474","text":"1465"},"'state' is defined but never used.","'geodeCutoff' is assigned a value but never used.",{"range":"1475","text":"1471"},{"range":"1476","text":"1469"},{"range":"1477","text":"1467"},{"range":"1478","text":"1465"},{"range":"1479","text":"1117"},"'input' is defined but never used.","Delete `⏎`",{"range":"1480","text":"1098"},{"range":"1481","text":"1117"},{"range":"1482","text":"1098"},{"range":"1483","text":"1117"},{"range":"1484","text":"1098"},{"range":"1485","text":"1117"},{"range":"1486","text":"1098"},{"range":"1487","text":"1117"},{"range":"1488","text":"1098"},{"range":"1489","text":"1117"},{"range":"1490","text":"1098"},{"range":"1491","text":"1117"},{"range":"1492","text":"1098"},{"range":"1493","text":"1117"},{"range":"1494","text":"1098"},{"range":"1495","text":"1117"},{"range":"1496","text":"1098"},{"range":"1497","text":"1117"},{"range":"1498","text":"1098"},{"range":"1499","text":"1117"},{"range":"1500","text":"1098"},[110,164],"\n  input.split(\"\\n\\n\").map((elf) => elf.split(\"\\n\"",[285,370],"(acc, curr) => [...acc, curr.reduce((acc2, curr2) => acc2 + curr2)], [])",[375,376],"",[110,164],[285,370],[375,410],".sort((a, b) => b - a)\n    .slice(0, 3)\n    ",[123,155],"\"\\n\").map((row) => row.split(\" \"",[560,584],"choiceScore + winScore",[123,155],[276,295],"\"C\", Y: \"A\", Z: \"B\"",[311,330],"\"A\", Y: \"B\", Z: \"C\"",[346,365],"\"B\", Y: \"C\", Z: \"A\"",[123,127],"\"\\n\"",[271,273],"\"\"",[321,323],[371,373],[22,30],"\"mathjs\"",[143,143],"\n ",[150,163],"    .split(\"\\n\"",[167,222],"  .map((row) => row.split(\",\").map((elf) => elf.split(\"-\"",[399,505],"(elf1[0] <= elf2[0] && elf1[1] >= elf2[1]) || (elf1[0] >= elf2[0] && elf1[1] <= elf2[1])",[22,30],[143,143],[150,163],[165,222],"    .map((row) => row.split(\",\").map((elf) => elf.split(\"-\"",[400,449],"      (elf1[0] <= elf2[0] && elf1[1] >= elf2[0]) ||",[456,501],"(elf2[0] <= elf1[0] && elf2[1] >= elf1[0]) ||",[508,553],"(elf1[1] >= elf2[1] && elf1[0] <= elf2[1]) ||",[559,562],[123,166],"\"\\n\\n\").map((section) => section.split(\"\\n\"",[352,355],"\" \"",[678,680],[996,999],[123,166],[352,355],[668,670],[986,989],[123,125],[123,125],[123,127],[321,324],[347,350],"\"$\"",[376,380],"\"ls\"",[431,435],"\"cd\"",[463,466],"\"/\"",[536,540],"\"..\"",[724,729],"\"dir\"",[1186,1237],"\n    .map((folder) => getDirectorySize(folder, results))\n    ",[123,127],[321,324],[347,350],[376,380],[431,435],[463,466],[536,540],[724,729],[1362,1413],[110,154],"\n  input\n    .split(\"\\n\")\n    .map((row) => row.split(\"\"",[410,501],"\n          input[x][y].visible = true;\n        } else if (input[x2][y].height >= input[x][y].height) {\n          break;\n       ",[590,681],[755,846],"\n          input[x][y].visible = true;\n        } else if (input[x][y2].height >= input[x][y].height) {\n          break;\n       ",[938,1029],[1095,1138],"\n    acc += curr.visible ? 1 : 0;\n    return acc;\n ",[110,154],"\n  input.split(\"\\n\").map((row) => row.split(\"\"",[123,155],[197,220],"\n  D: [0, 1],\n  L: [-1, 0],\n ",[882,915],"\n    acc += curr ? 1 : 0;\n    return acc;\n ",[1056,1087],"xDist * xDist + yDist * yDist",[123,155],[197,220],[325,431],"\n    [500, 500],\n    [500, 500],\n    [500, 500],\n    [500, 500],\n    [500, 500],\n    [500, 500],\n    [500, 500],\n    [500, 500],\n    [500, 500],\n  ",[1200,1233],[1374,1405],[110,186],"\n  input.split(\"\\n\").map((row) => (row === \"noop\" ? 0 : parseInt(row.split(\" \"",[363,381],"input[x] ? 2 : 1",[535,582],"valueToUse * (cycle % 2 ? cycle - 1 : cycle",[110,186],[367,370],"\".\"",[550,553],"\"#\"",[816,819],[911,925],"\"\")).join(\"\\n\"",[123,129],"\"\\n\\n\"",[231,235],[266,269],[318,321],[378,381],[440,443],[503,506],[584,610],"\n      .split(\": \")[1]\n      .split(\",\")\n      ",[865,870],"\"old\"",[966,969],"\"+\"",[1008,1011],"\"*\"",[1137,1170],"\n    acc[curr.id] = curr;\n    return acc;\n ",[123,129],[231,235],[266,269],[318,321],[378,381],[440,443],[503,506],[584,610],[931,934],[993,996],[1234,1267],[110,154],[687,690],"\"z\"",[809,812],"\"a\"",[2018,2021],[2056,2059],[110,154],[672,675],[754,757],[2167,2170],[2205,2208],[110,160],"\n  input.split(\"\\n\\n\").map((pair) => pair.split(\"\\n\"",[358,369],"index + 1",[110,160],[110,127],"\n  input\n    .split(\"\\n\"",[129,241],"    .map((row) =>\n      row.split(\" -> \").map((coords) => coords.split(\",\").map((coord) => parseInt(coord)))\n    ",[719,722],[1123,1126],[1376,1379],[2388,2391],"\"O\"",[2617,2620],[15,19],"\"fs\"",[132,149],[151,263],[710,713],[729,732],[1152,1155],[1405,1408],[1819,1882],"\"sandpile.txt\", transposed.map((row) => row.join(\"\")).join(\"\\n\"",[2852,2855],[3082,3085],[110,127],[129,243],"    .map((row) =>\n      row.match(\n        /Sensor at x=(-?[0-9]+), y=(-?[0-9]+): closest beacon is at x=(-?[0-9]+), y=(-?[0-9]+)/\n      )\n    ",[245,364],"    .map((match) => ({\n      sensor: [parseInt(match[1]), parseInt(match[2])],\n      beacon: [parseInt(match[3]), parseInt(match[4])],\n   ",[433,433],"\n    ",[463,463],"\n      ",[663,663],[695,695],[932,932],[1148,1151],[1382,1385],"\"S\"",[1462,1465],"\"B\"",[1527,1597],"pair.sensor[1] + distance < targetRow || pair.sensor[1] - distance",[1801,1963],"\n        (pair.sensor[1] < targetRow && pair.sensor[1] + remainingDistance >= targetRow) ||\n        (pair.sensor[1] > targetRow && pair.sensor[1] - remainingDistance <= targetRow)\n      ",[1991,1994],[2018,2021],[2145,2163],"\"S\" || val === \"#\"",[110,127],[129,243],[245,364],[653,757],"\n      let x = Math.max(pair.sensor[0] - distance, 0);\n      x <= Math.min(pair.sensor[0] + distance, width - 1);\n      x++\n    ",[856,960],"\n        Math.max(pair.sensor[1] - remainingDistance, 0),\n        Math.min(pair.sensor[1] + remainingDistance, width - 1),\n      ",[110,127],[129,263],"    .map((row) =>\n      row.match(\n        /Valve ([A-Z]{2}) has flow rate=([0-9]+); tunnel(?:s)? lead(?:s)? to valve(?:s)? ([A-Z]{2}(?:, [A-Z]{2})*)/\n      )\n    ",[265,366],"    .map((match) => ({\n      name: match[1],\n      rate: parseInt(match[2]),\n      neighbors: match[3].split(\", \").sort(),\n   ",[373,447],"  .reduce((acc, { name, ...rest }) => {\n      acc[name] = { ...rest };\n      return acc;\n   ",[538,568],"\n    currentRoom: \"AA\",\n    rooms: {},\n   ",[1986,1997],[2036,2038],[2056,2058],[2104,2106],[2109,2111],[2135,2145],"        ",[2202,2282],"\n      roomData[state.currentRoom].shortestPaths[room.name] + 1,\n      state.minutesRemaining\n    ",[2815,2924],"\n    (state.minutesRemaining - roomData[state.currentRoom].shortestPaths[room.name] - 1) *\n    roomData[room.name].rate\n  )",[110,127],[129,263],[265,366],[371,447],"    .reduce((acc, { name, ...rest }) => {\n      acc[name] = { ...rest };\n      return acc;\n   ",[538,620],"\n    meRoom: \"AA\",\n    rooms: {},\n    minutesRemaining: 26,\n    meIdleTime: 0,\n    elephantRoom: \"AA\",\n   ",[2397,2523],"\n          `Trying room ${room.name} of ${JSON.stringify(\n            rooms.filter((room) => room.meScore > 0).map((filterRoom) => filterRoom.name)\n          )}`\n        ",[2632,2645],[2686,2688],[2706,2722],"              ",[2758,2760],[2763,2765],[2791,2793],[2865,2940],"\n        roomData[state.meRoom].shortestPaths[room.name] + 1,\n        state.minutesRemaining\n      ",[3506,3519],[3548,3562],"            ",[3580,3582],[3632,3634],[3637,3639],[3675,3677],[3745,3826],"\n        roomData[state.elephantRoom].shortestPaths[room.name] + 1,\n        state.minutesRemaining\n      ",[4409,4512],"\n    (state.minutesRemaining - roomData[currentRoom].shortestPaths[room.name] - 1) *\n    roomData[room.name].rate\n  )",[123,125],[250,253],[286,310],"\"#\"], [\"#\"], [\"#\"], [\"#\"",[319,368],"\n      [\".\", \"#\", \".\"],\n      [\"#\", \"#\", \"#\"],\n      [\".\", \"#\", \".\"],\n    ",[376,425],"\n      [\"#\", \".\", \".\"],\n      [\"#\", \".\", \".\"],\n      [\"#\", \"#\", \"#\"],\n    ",[434,452],"\"#\", \"#\", \"#\", \"#\"",[461,483],"\n      [\"#\", \"#\"],\n      [\"#\", \"#\"],\n    ",[751,754],[968,971],"\"<\"",[1721,1724],[1937,1940],[2165,2168],[2295,2298],[123,125],[192,216],[225,274],[282,331],[340,358],[367,389],[601,604],[1572,1623],"\n          lastThreeHeightDiffs[0] === lastThreeHeightDiffs[1] &&",[1634,1828],"lastThreeHeightDiffs[0] === lastThreeHeightDiffs[2] &&\n          lastThreeCycleLengths[0] === lastThreeCycleLengths[1] &&\n          lastThreeCycleLengths[0] === lastThreeCycleLengths[2]\n        ",[2040,2052],"shapesLeft",[2141,2172],"cyclesRemaining * cycleLength",[2423,2426],[2640,2643],[3406,3409],[3622,3625],[3850,3853],[3980,3983],[110,155],"\n  input.split(\"\\n\").map((row) => row.split(\",\"",[271,271],[288,288],"  ",[332,336],"      ",[376,376],[424,424],[436,470],"    },\n    { maxX: 0, maxY: 0, maxZ: 0 }\n  ",[635,638],[724,727],[1345,1348],[1853,1856],[1981,2048],"\n        neighborCoord[0],\n        neighborCoord[1],\n        neighborCoord[2],\n        grid,\n        visited\n      ",[110,155],[271,271],[288,288],[336,336],[376,380],[424,424],[438,470],"  },\n    { maxX: 0, maxY: 0, maxZ: 0 }\n  ",[635,638],[724,727],[933,936],[1108,1111],[1312,1315],[1824,1827],[1957,2024],[110,127],"\n  input.split(\"\\n\"",[144,358],"    const match = row.match(\n      /Blueprint (\\d+): Each ore robot costs (\\d+) ore. Each clay robot costs (\\d+) ore. Each obsidian robot costs (\\d+) ore and (\\d+) clay. Each geode robot costs (\\d+) ore and (\\d+) obsidian./\n    ",[361,361],[372,376],[400,400],[438,442],[477,477],[542,546],[606,606],[609,609],[787,809],"score * blueprint.id",[1225,1333],"\n      Math.floor(\n        (24 - 3 - blueprint.geodeRobotCost[1] - blueprint.obsidianRobotCost[1]) /\n          blueprint.oreRobotCost\n      ",[1976,1976],"\n   ",[2094,2094],[2219,2274],"\n    state.oreCount >= state.blueprint.obsidianRobotCost[0] &&",[2279,2282],[2365,2417],"\n    state.oreCount >= state.blueprint.geodeRobotCost[0] &&",[2422,2425],[2514,2529],"\"buyGeodeRobot\"",[2555,2573],"\"buyObsidianRobot\"",[2602,2616],"\"buyClayRobot\"",[2641,2654],"\"buyOreRobot\"",[2678,2689],"\"doNothing\"",[3219,3234],[3552,3565],[3684,3698],[3819,3837],[4040,4055],[123,125],[167,168],[123,125],[167,168],[123,125],[167,168],[123,125],[167,168],[123,125],[167,168],[123,125],[167,168],[123,125],[167,168],[123,125],[167,168],[123,125],[167,168],[123,125],[167,168],[123,125],[167,168]]