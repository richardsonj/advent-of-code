[{"/home/jacob/advent-of-code/2016/solutions/day01_1/index.js":"1","/home/jacob/advent-of-code/2016/solutions/day01_2/index.js":"2","/home/jacob/advent-of-code/2016/solutions/day02_1/index.js":"3","/home/jacob/advent-of-code/2016/solutions/day02_2/index.js":"4","/home/jacob/advent-of-code/2016/solutions/day03_1/index.js":"5","/home/jacob/advent-of-code/2016/solutions/day03_2/index.js":"6","/home/jacob/advent-of-code/2016/solutions/day04_1/index.js":"7","/home/jacob/advent-of-code/2016/solutions/day04_2/index.js":"8","/home/jacob/advent-of-code/2016/solutions/day05_1/index.js":"9","/home/jacob/advent-of-code/2016/solutions/day05_2/index.js":"10","/home/jacob/advent-of-code/2016/solutions/day06_1/index.js":"11","/home/jacob/advent-of-code/2016/solutions/day06_2/index.js":"12","/home/jacob/advent-of-code/2016/solutions/day07_1/index.js":"13","/home/jacob/advent-of-code/2016/solutions/day07_2/index.js":"14","/home/jacob/advent-of-code/2016/solutions/day08_1/index.js":"15","/home/jacob/advent-of-code/2016/solutions/day08_2/index.js":"16","/home/jacob/advent-of-code/2016/solutions/day09_1/index.js":"17","/home/jacob/advent-of-code/2016/solutions/day09_2/index.js":"18","/home/jacob/advent-of-code/2016/solutions/day10_1/index.js":"19","/home/jacob/advent-of-code/2016/solutions/day10_2/index.js":"20","/home/jacob/advent-of-code/2016/solutions/day11_1/index.js":"21","/home/jacob/advent-of-code/2016/solutions/day11_2/index.js":"22","/home/jacob/advent-of-code/2016/solutions/day12_1/index.js":"23","/home/jacob/advent-of-code/2016/solutions/day12_2/index.js":"24","/home/jacob/advent-of-code/2016/solutions/day13_1/index.js":"25","/home/jacob/advent-of-code/2016/solutions/day13_2/index.js":"26","/home/jacob/advent-of-code/2016/solutions/day14_1/index.js":"27","/home/jacob/advent-of-code/2016/solutions/day14_2/index.js":"28","/home/jacob/advent-of-code/2016/solutions/day15_1/index.js":"29","/home/jacob/advent-of-code/2016/solutions/day15_2/index.js":"30","/home/jacob/advent-of-code/2016/solutions/day16_1/index.js":"31","/home/jacob/advent-of-code/2016/solutions/day16_2/index.js":"32","/home/jacob/advent-of-code/2016/solutions/day17_1/index.js":"33","/home/jacob/advent-of-code/2016/solutions/day17_2/index.js":"34","/home/jacob/advent-of-code/2016/solutions/day18_1/index.js":"35","/home/jacob/advent-of-code/2016/solutions/day18_2/index.js":"36","/home/jacob/advent-of-code/2016/solutions/day19_1/index.js":"37","/home/jacob/advent-of-code/2016/solutions/day19_2/index.js":"38","/home/jacob/advent-of-code/2016/solutions/day20_1/index.js":"39","/home/jacob/advent-of-code/2016/solutions/day20_2/index.js":"40","/home/jacob/advent-of-code/2016/solutions/day21_1/index.js":"41","/home/jacob/advent-of-code/2016/solutions/day21_2/index.js":"42","/home/jacob/advent-of-code/2016/solutions/day22_1/index.js":"43","/home/jacob/advent-of-code/2016/solutions/day22_2/index.js":"44","/home/jacob/advent-of-code/2016/solutions/day23_1/index.js":"45","/home/jacob/advent-of-code/2016/solutions/day23_2/index.js":"46","/home/jacob/advent-of-code/2016/solutions/day24_1/index.js":"47","/home/jacob/advent-of-code/2016/solutions/day24_2/index.js":"48","/home/jacob/advent-of-code/2016/solutions/day25_1/index.js":"49","/home/jacob/advent-of-code/2016/solutions/day25_2/index.js":"50"},{"size":811,"mtime":1670346745000,"results":"51","hashOfConfig":"52"},{"size":1004,"mtime":1670346745000,"results":"53","hashOfConfig":"52"},{"size":893,"mtime":1670346745000,"results":"54","hashOfConfig":"52"},{"size":1178,"mtime":1670346745000,"results":"55","hashOfConfig":"52"},{"size":502,"mtime":1670346745000,"results":"56","hashOfConfig":"52"},{"size":740,"mtime":1670346745000,"results":"57","hashOfConfig":"52"},{"size":944,"mtime":1670346745000,"results":"58","hashOfConfig":"52"},{"size":1231,"mtime":1670346745000,"results":"59","hashOfConfig":"52"},{"size":461,"mtime":1670346745000,"results":"60","hashOfConfig":"52"},{"size":730,"mtime":1670346745000,"results":"61","hashOfConfig":"52"},{"size":719,"mtime":1670346745000,"results":"62","hashOfConfig":"52"},{"size":719,"mtime":1670346745000,"results":"63","hashOfConfig":"52"},{"size":903,"mtime":1670346745000,"results":"64","hashOfConfig":"52"},{"size":1260,"mtime":1670346745000,"results":"65","hashOfConfig":"52"},{"size":2069,"mtime":1670346745000,"results":"66","hashOfConfig":"52"},{"size":2005,"mtime":1670346745000,"results":"67","hashOfConfig":"52"},{"size":836,"mtime":1670346745000,"results":"68","hashOfConfig":"52"},{"size":868,"mtime":1670346745000,"results":"69","hashOfConfig":"52"},{"size":1651,"mtime":1670346745000,"results":"70","hashOfConfig":"52"},{"size":2066,"mtime":1670346745000,"results":"71","hashOfConfig":"52"},{"size":4366,"mtime":1670346745000,"results":"72","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"73","hashOfConfig":"52"},{"size":1025,"mtime":1670860047305,"results":"74","hashOfConfig":"52"},{"size":1057,"mtime":1670860137865,"results":"75","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"76","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"77","hashOfConfig":"52"},{"size":1299,"mtime":1670867238005,"results":"78","hashOfConfig":"52"},{"size":1456,"mtime":1670868262675,"results":"79","hashOfConfig":"52"},{"size":870,"mtime":1670871488275,"results":"80","hashOfConfig":"52"},{"size":870,"mtime":1670871592265,"results":"81","hashOfConfig":"52"},{"size":873,"mtime":1670878909925,"results":"82","hashOfConfig":"52"},{"size":878,"mtime":1670878954835,"results":"83","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"84","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"85","hashOfConfig":"52"},{"size":748,"mtime":1670882160435,"results":"86","hashOfConfig":"52"},{"size":752,"mtime":1670882201695,"results":"87","hashOfConfig":"52"},{"size":542,"mtime":1670884272555,"results":"88","hashOfConfig":"52"},{"size":635,"mtime":1670914313275,"results":"89","hashOfConfig":"52"},{"size":838,"mtime":1672758592254,"results":"90","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"91","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"92","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"93","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"94","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"95","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"96","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"97","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"98","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"99","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"100","hashOfConfig":"52"},{"size":243,"mtime":1670346745000,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"105"},"1taol1g",{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":12,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":9,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":12,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":13,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":12,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":9,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":22,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":6,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":"215"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":4,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":4,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":7,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":7,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"189"},"/home/jacob/advent-of-code/2016/solutions/day01_1/index.js",["286","287"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\", \");\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let x = 0;\r\n  let y = 0;\r\n  let direction = 0;\r\n  for (let dir of input) {\r\n    if (dir.substring(0, 1) === \"L\") {\r\n      direction--;\r\n    } else {\r\n      direction++;\r\n    }\r\n    direction += 4;\r\n    direction %= 4;\r\n    let distance = parseInt(dir.substring(1));\r\n    switch (direction) {\r\n      case 0:\r\n        y -= distance;\r\n        break;\r\n      case 1:\r\n        x += distance;\r\n        break;\r\n      case 2:\r\n        y += distance;\r\n        break;\r\n      case 3:\r\n        x -= distance;\r\n        break;\r\n    }\r\n  }\r\n\r\n  return Math.abs(x) + Math.abs(y);\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day01_2/index.js",["288","289","290","291"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\", \");\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let x = 0;\r\n  let y = 0;\r\n  let direction = 0;\r\n  let visited = [`${x}:${y}`];\r\n  for (let dir of input) {\r\n    if (dir.substring(0, 1) === \"L\") {\r\n      direction--;\r\n    } else {\r\n      direction++;\r\n    }\r\n    direction += 4;\r\n    direction %= 4;\r\n    let distance = parseInt(dir.substring(1));\r\n    for (let i = 0; i < distance; i++) {\r\n      switch (direction) {\r\n        case 0:\r\n          y--;\r\n          break;\r\n        case 1:\r\n          x++;\r\n          break;\r\n        case 2:\r\n          y++;\r\n          break;\r\n        case 3:\r\n          x--;\r\n          break;\r\n      }\r\n      if (visited.includes(`${x}:${y}`)) {\r\n        return Math.abs(x) + Math.abs(y);\r\n      } else {\r\n        visited.push(`${x}:${y}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return 0;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day02_1/index.js",["292","293","294","295","296","297","298","299","300"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\").map((line) => line.split(\"\"));\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let keypad = [\r\n    [\"1\", \"2\", \"3\"],\r\n    [\"4\", \"5\", \"6\"],\r\n    [\"7\", \"8\", \"9\"],\r\n  ];\r\n  let pos = [1, 1];\r\n\r\nlet code = \"\"\r\n\r\n  for (let inst of input) {\r\n    for (let dir of inst) {\r\n      switch (dir) {\r\n        case \"U\":\r\n          pos[0] > 0 ? pos[0]-- : undefined;\r\n          break;\r\n        case \"L\":\r\n          pos[1] > 0 ? pos[1]-- : undefined;\r\n          break;\r\n        case \"D\":\r\n          pos[0] < 2 ? pos[0]++ : undefined;\r\n          break;\r\n        case \"R\":\r\n          pos[1] < 2 ? pos[1]++ : undefined;\r\n          break;\r\n      }\r\n    }\r\n    code += keypad[pos[0]][pos[1]];\r\n  }\r\n  return code;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day02_2/index.js",["301","302","303","304","305","306","307","308","309","310"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\").map((line) => line.split(\"\"));\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let keypad = [\r\n    [\"\", \"\", \"1\", \"\", \"\"],\r\n    [\"\", \"2\", \"3\", \"5\", \"\"],\r\n    [\"5\", \"6\", \"7\", \"8\", \"9\"],\r\n    [\"\", \"A\", \"B\", \"C\", \"\"],\r\n    [\"\", \"\", \"D\", \"\", \"\"],\r\n  ];\r\n  let pos = [2, 0];\r\n\r\n  let code = \"\";\r\n\r\n  for (let inst of input) {\r\n    for (let dir of inst) {\r\n      switch (dir) {\r\n        case \"U\":\r\n          pos[0] > 0 && keypad[pos[0] - 1][pos[1]] !== \"\"\r\n            ? pos[0]--\r\n            : undefined;\r\n          break;\r\n        case \"L\":\r\n          pos[1] > 0 && keypad[pos[0]][pos[1] - 1] !== \"\"\r\n            ? pos[1]--\r\n            : undefined;\r\n          break;\r\n        case \"D\":\r\n          pos[0] < 4 && keypad[pos[0] + 1][pos[1]] !== \"\" ? pos[0]++ : undefined;\r\n          break;\r\n        case \"R\":\r\n          pos[1] < 4 && keypad[pos[0]][pos[1] + 1] !== \"\" ? pos[1]++ : undefined;\r\n          break;\r\n      }\r\n    }\r\n    code += keypad[pos[0]][pos[1]];\r\n  }\r\n  return code;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day03_1/index.js",["311","312","313"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\").map((line) =>\r\n    line\r\n      .trim()\r\n      .split(/\\s+/)\r\n      .map((num) => parseInt(num))\r\n  );\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let count = 0;\r\n  for (let row of input) {\r\n    row.sort((a,b)=>a-b);\r\n    if (row[0] + row[1] > row[2]){\r\n      count++;\r\n    }\r\n  }\r\n  return count;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day03_2/index.js",["314","315","316"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\").map((line) =>\r\n    line\r\n      .trim()\r\n      .split(/\\s+/)\r\n      .map((num) => parseInt(num))\r\n  );\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let count = 0;\r\n  let cols = [[], [], []];\r\n  for (let row of input) {\r\n    cols[0].push(row[0]);\r\n    cols[1].push(row[1]);\r\n    cols[2].push(row[2]);\r\n    if (cols[0].length == 3) {\r\n      for (let col of cols) {\r\n        col.sort((a, b) => a - b);\r\n        if (col[0] + col[1] > col[2]) {\r\n          count++;\r\n        }\r\n      }\r\n      cols = [[], [], []];\r\n    }\r\n  }\r\n  return count;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day04_1/index.js",["317","318","319","320","321","322","323","324"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\").map((line) => {\r\n    const [, name, id, checksum] = line.match(\r\n      /((?:[a-z]+\\-)*[a-z]+)\\-(\\d+)\\[([a-z]+)\\]/\r\n    );\r\n    return { name, id, checksum };\r\n  });\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let total = 0;\r\n  for (let room of input) {\r\n    if (generateCheckSum(room.name) === room.checksum) {\r\n      total += parseInt(room.id);\r\n    }\r\n  }\r\n  return total;\r\n};\r\n\r\nconst generateCheckSum = (name) => {\r\n  let counts = {};\r\n  for (let char of name.split(\"\")) {\r\n    if (char === \"-\") {\r\n      continue;\r\n    }\r\n    counts[char] ? counts[char]++ : (counts[char] = 1);\r\n  }\r\n  let letters = Object.keys(counts);\r\n  letters.sort((a, b) => counts[b] - counts[a] || a.localeCompare(b));\r\n  return letters.splice(0, 5).join(\"\");\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day04_2/index.js",["325","326","327","328","329","330","331","332","333","334","335","336","337"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\").map((line) => {\r\n    const [, name, id, checksum] = line.match(\r\n      /((?:[a-z]+\\-)*[a-z]+)\\-(\\d+)\\[([a-z]+)\\]/\r\n    );\r\n    return { name, id, checksum };\r\n  });\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  for (let room of input) {\r\n    if (generateCheckSum(room.name) === room.checksum) {\r\n      let realName = decrypt(room.name, parseInt(room.id));\r\n      if (realName === \"northpole object storage\") {\r\n        return room.id;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst decrypt = (name, id) => {\r\n  return name.split(\"\").map((char) => {\r\n    return char === \"-\"\r\n      ? \" \"\r\n      : String.fromCharCode(((char.charCodeAt(0) - 97 + id) % 26) + 97);\r\n  }).join(\"\");\r\n};\r\n\r\nconst generateCheckSum = (name) => {\r\n  let counts = {};\r\n  for (let char of name.split(\"\")) {\r\n    if (char === \"-\") {\r\n      continue;\r\n    }\r\n    counts[char] ? counts[char]++ : (counts[char] = 1);\r\n  }\r\n  let letters = Object.keys(counts);\r\n  letters.sort((a, b) => counts[b] - counts[a] || a.localeCompare(b));\r\n  return letters.splice(0, 5).join(\"\");\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day05_1/index.js",["338","339","340"],[],"import md5 from 'md5';\r\n\r\nconst solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input;\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let password = \"\"\r\n  for (let x = 0; password.length < 8; x++) {\r\n    let hash = md5(`${input}${x}`);\r\n    if (hash.startsWith(\"00000\")) {\r\n      password += hash[5];\r\n    }\r\n  }\r\n  return password;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day05_2/index.js",["341","342"],[],"import md5 from \"md5\";\r\n\r\nconst solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input;\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let password = \"        \";\r\n  for (\r\n    let x = 0;\r\n    password.split(\"\").filter((val) => val === \" \").length > 0;\r\n    x++\r\n  ) {\r\n    let hash = md5(`${input}${x}`);\r\n    if (hash.startsWith(\"00000\")) {\r\n      if (hash[5] >= 0 && hash[5] < 8 && password[hash[5]] === \" \") {\r\n        password =\r\n          password.substring(0, parseInt(hash[5])) +\r\n          hash[6] +\r\n          password.substring(parseInt(hash[5]) + 1);\r\n      }\r\n    }\r\n  }\r\n  return password;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day06_1/index.js",["343","344","345","346","347"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\");\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let chars = [];\r\n  for (let x = 0; x < input[0].length; x++) {\r\n    chars.push({});\r\n  }\r\n  for (let word of input) {\r\n    for (let x = 0; x < word.length; x++) {\r\n      chars[x][word[x]] ? chars[x][word[x]]++ : (chars[x][word[x]] = 1);\r\n    }\r\n  }\r\n  let answer = \"\";\r\n  for (let charSet of chars) {\r\n    let candidates = Object.keys(charSet);\r\n    candidates.sort((left, right) => charSet[right] - charSet[left]);\r\n    answer += candidates[0];\r\n  }\r\n  return answer;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day06_2/index.js",["348","349","350","351","352"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\");\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let chars = [];\r\n  for (let x = 0; x < input[0].length; x++) {\r\n    chars.push({});\r\n  }\r\n  for (let word of input) {\r\n    for (let x = 0; x < word.length; x++) {\r\n      chars[x][word[x]] ? chars[x][word[x]]++ : (chars[x][word[x]] = 1);\r\n    }\r\n  }\r\n  let answer = \"\";\r\n  for (let charSet of chars) {\r\n    let candidates = Object.keys(charSet);\r\n    candidates.sort((left, right) => charSet[left] - charSet[right]);\r\n    answer += candidates[0];\r\n  }\r\n  return answer;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day07_1/index.js",["353"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\");\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let count = 0;\r\n  for (let ip of input) {\r\n    let inBraces = false;\r\n    let isTLS = false;\r\n    for (let x = 0; x < ip.length; x++) {\r\n      if (ip[x] === \"[\") {\r\n        inBraces = true;\r\n        continue;\r\n      }\r\n      if (ip[x] === \"]\") {\r\n        inBraces = false;\r\n        continue;\r\n      }\r\n      if (\r\n        ip[x + 1] &&\r\n        ip[x + 2] &&\r\n        ip[x + 3] &&\r\n        ip[x] !== ip[x + 1] &&\r\n        ip[x] === ip[x + 3] &&\r\n        ip[x + 1] === ip[x + 2]\r\n      ) {\r\n        if (inBraces) {\r\n          isTLS = false;\r\n          break;\r\n        }\r\n        isTLS = true;\r\n      }\r\n    }\r\n    if (isTLS) count++;\r\n  }\r\n  return count;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day07_2/index.js",["354","355","356","357","358","359","360","361","362","363","364","365"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\");\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let count = 0;\r\n  for (let ip of input) {\r\n    let inBraces = false;\r\n    let isTLS = false;\r\n    let found = [];\r\n    for (let x = 0; x < ip.length; x++) {\r\n      if (ip[x] === \"[\") {\r\n        inBraces = true;\r\n        continue;\r\n      }\r\n      if (ip[x] === \"]\") {\r\n        inBraces = false;\r\n        continue;\r\n      }\r\n      if (\r\n        ip[x + 1] &&\r\n        ip[x + 2] &&\r\n        ip[x] !== ip[x + 1] &&\r\n        ip[x] === ip[x + 2]\r\n      ) {\r\n        if (inBraces) {\r\n          let key = `${ip[x]}${ip[x+1]}`;\r\n          let hyperkey = `${ip[x+1]}${ip[x]}0`\r\n          if (found.includes(key)){\r\n            isTLS = true;\r\n            break;\r\n          }\r\n          found.push(hyperkey);\r\n        } else {\r\n          let key = `${ip[x+1]}${ip[x]}`;\r\n          let hyperkey = `${ip[x]}${ip[x+1]}0`\r\n          if (found.includes(hyperkey)) {\r\n            isTLS = true;\r\n            break;\r\n          }\r\n          found.push(key);\r\n        }\r\n      }\r\n    }\r\n    if (isTLS) count++;\r\n  }\r\n  return count;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day08_1/index.js",["366","367","368","369","370","371","372","373","374","375","376","377","378","379"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\").map((line) => {\r\n    let match = line.match(/rect (\\d*)x(\\d*)/);\r\n    if (match) {\r\n      return { type: \"rect\", x: parseInt(match[1]), y: parseInt(match[2]) };\r\n    }\r\n    match = line.match(/rotate column x=(\\d*) by (\\d*)/);\r\n    if (match) {\r\n      return {\r\n        type: \"rotate\",\r\n        col: parseInt(match[1]),\r\n        amount: parseInt(match[2]),\r\n      };\r\n    }\r\n    match = line.match(/rotate row y=(\\d*) by (\\d*)/);\r\n    if (match) {\r\n      return {\r\n        type: \"rotate\",\r\n        row: parseInt(match[1]),\r\n        amount: parseInt(match[2]),\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let screenWidth = 50;\r\n  let screenHeight = 6;\r\n  let screen = [];\r\n  for (let y = 0; y < screenHeight; y++) {\r\n    let row = [];\r\n    for (let x = 0; x < screenWidth; x++) {\r\n      row.push(\" \");\r\n    }\r\n    screen.push(row);\r\n  }\r\n\r\n  for (let action of input) {\r\n    switch (action.type) {\r\n      case \"rotate\":\r\n        rotate(action, screen);\r\n        break;\r\n      case \"rect\":\r\n        rect(action, screen);\r\n        break;\r\n    }\r\n  }\r\n\r\n  return screen.reduce(\r\n    (acc, curr) =>\r\n      acc + curr.reduce((acc2, curr2) => acc2 + (curr2 === \"#\" ? 1 : 0), 0),\r\n    0\r\n  );\r\n};\r\n\r\nconst rotate = (action, screen) => {\r\n  if (action.col !== undefined) {\r\n    let oldCol = [...screen.map(row=>row[action.col])];\r\n    \r\n    for (let x = 0; x < screen.length; x++) {\r\n        screen[(x + action.amount) % screen.length][action.col] = oldCol[x];\r\n    }\r\n  } else {\r\n    let oldRow = [...screen[action.row]];\r\n    let width = screen[action.row].length;\r\n    for (let x = 0; x < width; x++) {\r\n      screen[action.row][(x + action.amount) % width] = oldRow[x];\r\n    }\r\n  }\r\n};\r\n\r\nconst rect = (action, screen) => {\r\n  for (let y = 0; y < action.y; y++) {\r\n    for (let x = 0; x < action.x; x++) {\r\n      screen[y][x] = \"#\";\r\n    }\r\n  }\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day08_2/index.js",["380","381","382","383","384","385","386","387","388","389","390"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\").map((line) => {\r\n    let match = line.match(/rect (\\d*)x(\\d*)/);\r\n    if (match) {\r\n      return { type: \"rect\", x: parseInt(match[1]), y: parseInt(match[2]) };\r\n    }\r\n    match = line.match(/rotate column x=(\\d*) by (\\d*)/);\r\n    if (match) {\r\n      return {\r\n        type: \"rotate\",\r\n        col: parseInt(match[1]),\r\n        amount: parseInt(match[2]),\r\n      };\r\n    }\r\n    match = line.match(/rotate row y=(\\d*) by (\\d*)/);\r\n    if (match) {\r\n      return {\r\n        type: \"rotate\",\r\n        row: parseInt(match[1]),\r\n        amount: parseInt(match[2]),\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let screenWidth = 50;\r\n  let screenHeight = 6;\r\n  let screen = [];\r\n  for (let y = 0; y < screenHeight; y++) {\r\n    let row = [];\r\n    for (let x = 0; x < screenWidth; x++) {\r\n      row.push(\" \");\r\n    }\r\n    screen.push(row);\r\n  }\r\n\r\n  for (let action of input) {\r\n    switch (action.type) {\r\n      case \"rotate\":\r\n        rotate(action, screen);\r\n        break;\r\n      case \"rect\":\r\n        rect(action, screen);\r\n        break;\r\n    }\r\n  }\r\n\r\n  return screen.reduce((acc, curr) => acc + curr.join(\"\") + \"\\r\\n\", \"\");\r\n};\r\n\r\nconst rotate = (action, screen) => {\r\n  if (action.col !== undefined) {\r\n    let oldCol = [...screen.map((row) => row[action.col])];\r\n\r\n    for (let x = 0; x < screen.length; x++) {\r\n      screen[(x + action.amount) % screen.length][action.col] = oldCol[x];\r\n    }\r\n  } else {\r\n    let oldRow = [...screen[action.row]];\r\n    let width = screen[action.row].length;\r\n    for (let x = 0; x < width; x++) {\r\n      screen[action.row][(x + action.amount) % width] = oldRow[x];\r\n    }\r\n  }\r\n};\r\n\r\nconst rect = (action, screen) => {\r\n  for (let y = 0; y < action.y; y++) {\r\n    for (let x = 0; x < action.x; x++) {\r\n      screen[y][x] = \"#\";\r\n    }\r\n  }\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day09_1/index.js",["391","392"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input;\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  return decompress(input);\r\n};\r\n\r\nconst decompress = (input) => {\r\n  let length = input.length;\r\n  for (let x = 0; x < input.length; x++) {\r\n    if (input[x] === \"(\") {\r\n      let marker = \"(\";\r\n      x += 1;\r\n      for (; input[x - 1] !== \")\"; x++) {\r\n        marker += input[x];\r\n      }\r\n\r\n      let match = marker.match(/\\((\\d*)x(\\d*)\\)/);\r\n      if (!match) {\r\n        continue;\r\n      }\r\n      length -= marker.length;\r\n      const [, segLength, repeats] = match;\r\n      length += parseInt(segLength) * (parseInt(repeats) - 1);\r\n      x += parseInt(segLength) - 1;\r\n    }\r\n  }\r\n  return length;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day09_2/index.js",["393","394"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input;\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  return decompress(input);\r\n};\r\n\r\nconst decompress = (input) => {\r\n  let length = 0;\r\n  for (let x = 0; x < input.length; x++) {\r\n    if (input[x] === \"(\") {\r\n      let marker = \"(\";\r\n      x += 1;\r\n      for (; input[x - 1] !== \")\"; x++) {\r\n        marker += input[x];\r\n      }\r\n\r\n      let match = marker.match(/\\((\\d*)x(\\d*)\\)/);\r\n      if (!match) {\r\n        continue;\r\n      }\r\n      const [, segLength, repeats] = match;\r\n      length +=\r\n        decompress(input.substring(x, x + parseInt(segLength))) * (parseInt(repeats));\r\n      x += parseInt(segLength) - 1;\r\n    } else {\r\n      length += 1;\r\n    }\r\n  }\r\n  return length;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day10_1/index.js",["395","396","397"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\").reduce((acc, val) => {\r\n    let match = val.match(/value (\\d*) goes to bot (\\d*)/);\r\n    if (match) {\r\n      const botKey = `B${match[2]}`;\r\n      if (!acc[botKey]) {\r\n        acc[botKey] = { val: [] };\r\n      }\r\n      acc[botKey].val.push(parseInt(match[1]));\r\n      acc[botKey].val.sort((a, b) => a - b);\r\n      return acc;\r\n    }\r\n    match = val.match(\r\n      /bot (\\d*) gives low to (\\w*) (\\d*) and high to (\\w*) (\\d*)/\r\n    );\r\n    if (match) {\r\n      const botKey = `B${match[1]}`;\r\n      if (!acc[botKey]) {\r\n        acc[botKey] = { val: [] };\r\n      }\r\n      acc[botKey].low = `${match[2] === \"bot\" ? \"B\" : \"O\"}${match[3]}`;\r\n      acc[botKey].high = `${match[4] === \"bot\" ? \"B\" : \"O\"}${match[5]}`;\r\n      return acc;\r\n    }\r\n    throw new Error(`Couldn't parse line: ${val}`);\r\n  }, {});\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  while (true) {\r\n    for (let key in input) {\r\n      if (input[key].val.length === 2) {\r\n        if (input[key].val[0] === 17 && input[key].val[1] === 61) {\r\n          return key;\r\n        }\r\n        if (input[key].low.startsWith(\"B\")) {\r\n          input[input[key].low].val.push(input[key].val[0]);\r\n          input[input[key].low].val.sort((a, b) => a - b);\r\n        }\r\n        if (input[key].high.startsWith(\"B\")) {\r\n          input[input[key].high].val.push(input[key].val[1]);\r\n          input[input[key].high].val.sort((a, b) => a - b);\r\n        }\r\n        input[key].val = [];\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day10_2/index.js",["398","399","400","401","402","403"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\").reduce((acc, val) => {\r\n    let match = val.match(/value (\\d*) goes to bot (\\d*)/);\r\n    if (match) {\r\n      const botKey = `B${match[2]}`;\r\n      if (!acc[botKey]) {\r\n        acc[botKey] = { val: [] };\r\n      }\r\n      acc[botKey].val.push(parseInt(match[1]));\r\n      acc[botKey].val.sort((a, b) => a - b);\r\n      return acc;\r\n    }\r\n    match = val.match(\r\n      /bot (\\d*) gives low to (\\w*) (\\d*) and high to (\\w*) (\\d*)/\r\n    );\r\n    if (match) {\r\n      const botKey = `B${match[1]}`;\r\n      if (!acc[botKey]) {\r\n        acc[botKey] = { val: [] };\r\n      }\r\n      acc[botKey].low = `${match[2] === \"bot\" ? \"B\" : \"O\"}${match[3]}`;\r\n      acc[botKey].high = `${match[4] === \"bot\" ? \"B\" : \"O\"}${match[5]}`;\r\n      return acc;\r\n    }\r\n    throw new Error(`Couldn't parse line: ${val}`);\r\n  }, {});\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let found = true;\r\n  let outputs = {};\r\n  while (found === true) {\r\n    found = false;\r\n    for (let key in input) {\r\n      if (input[key].val.length === 2) {\r\n        found = true;\r\n        if (input[key].low.startsWith(\"B\")) {\r\n          input[input[key].low].val.push(input[key].val[0]);\r\n          input[input[key].low].val.sort((a, b) => a - b);\r\n        } else {\r\n          if (!outputs[input[key].low]) {\r\n            outputs[input[key].low] = [];\r\n          }\r\n          outputs[input[key].low].push(input[key].val[0]);\r\n        }\r\n        if (input[key].high.startsWith(\"B\")) {\r\n          input[input[key].high].val.push(input[key].val[1]);\r\n          input[input[key].high].val.sort((a, b) => a - b);\r\n        } else {\r\n          if (!outputs[input[key].high]) {\r\n            outputs[input[key].high] = [];\r\n          }\r\n          outputs[input[key].high].push(input[key].val[1]);\r\n        }\r\n        input[key].val = [];\r\n      }\r\n    }\r\n  }\r\n  return outputs[\"O0\"][0] * outputs[\"O1\"][0] * outputs[\"O2\"][0];\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day11_1/index.js",["404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\r\\n\").reduce(\r\n    (acc, curr) => {\r\n      let match = curr.match(\r\n        /The (\\w*) floor contains (?:a (\\w+)(?:-compatible)? (\\w+)|nothing relevant)(?:(?:, | )+(?:and )?(?:a (\\w+)(?:-compatible)? (\\w+)))?(?:(?:, )?(?:and )?(?:a (\\w+)(?:-compatible)? (\\w+)))?(?:(?:, )?(?:and )?(?:a (\\w+)(?:-compatible)? (\\w+)))?\\./\r\n      );\r\n      if (match && match.length > 2) {\r\n        for (let x = 2; x < match.length; x += 2) {\r\n          if (!match[x]) continue;\r\n          acc[match[1]].push({ chem: match[x], type: match[x + 1] });\r\n        }\r\n      }\r\n      return acc;\r\n    },\r\n    {\r\n      first: [],\r\n      second: [],\r\n      third: [],\r\n      fourth: [],\r\n    }\r\n  );\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  return makeMove(input, \"first\", [], {});\r\n};\r\n\r\nconst makeMove = (\r\n  floors,\r\n  elevatorFloor,\r\n  history,\r\n  memo = {}\r\n  //best = [Infinity]\r\n) => {\r\n  // if (history.length >= best[0]) {\r\n  //   return Infinity;\r\n  // }\r\n\r\n  let stateKey = stringify(floors, elevatorFloor);\r\n  if (invalidGameState(floors)) {\r\n    return Infinity;\r\n  }\r\n  if (history.includes(stateKey + \"*\")) {\r\n    return undefined;\r\n  }\r\n  if (history.includes(stateKey)) {\r\n    stateKey += \"*\";\r\n  }\r\n  if (memo[stateKey] !== undefined) {\r\n    //best[0] = Math.min(memo[stateKey] + history.length, best[0])\r\n    return memo[stateKey] + history.length;\r\n  }\r\n  let minMoves = Infinity;\r\n\r\n  if (winState(floors)) {\r\n    //best[0] = Math.min(history.length, best[0]);\r\n    memo[stateKey] = 0;\r\n    return history.length;\r\n  }\r\n  let potentialFloors;\r\n  switch (elevatorFloor) {\r\n    case \"first\":\r\n      potentialFloors = [\"second\"];\r\n      break;\r\n    case \"second\":\r\n      potentialFloors = [\"third\", \"first\"];\r\n      break;\r\n    case \"third\":\r\n      potentialFloors = [\"fourth\", \"second\"];\r\n      break;\r\n    case \"fourth\":\r\n      potentialFloors = [\"third\"];\r\n      break;\r\n  }\r\n\r\n  for (let destinationFloor of potentialFloors) {\r\n    for (let item1 of floors[elevatorFloor]) {\r\n      for (let item2 of [undefined, ...floors[elevatorFloor]]) {\r\n        if (item1 === item2) continue;\r\n        let nextFloors = copyFloors(floors);\r\n        nextFloors[destinationFloor].push(item1);\r\n        nextFloors[elevatorFloor].splice(\r\n          nextFloors[elevatorFloor].indexOf(item1),\r\n          1\r\n        );\r\n        if (item2) {\r\n          nextFloors[destinationFloor].push(item2);\r\n          nextFloors[elevatorFloor].splice(\r\n            nextFloors[elevatorFloor].indexOf(item2),\r\n            1\r\n          );\r\n        }\r\n        let nextMinMoves = makeMove(\r\n          nextFloors,\r\n          destinationFloor,\r\n          [...history, stateKey],\r\n          memo\r\n        );\r\n        if (nextMinMoves) {\r\n          minMoves = Math.min(minMoves, nextMinMoves);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (memo[stateKey]) {\r\n    memo[stateKey] = Math.min(memo[stateKey], minMoves - history.length);\r\n  } else {\r\n    memo[stateKey] = minMoves - history.length;\r\n  }\r\n  return minMoves;\r\n};\r\n\r\nconst copyFloors = (floors) => {\r\n  let newFloors = {};\r\n  for (let floor in floors) {\r\n    newFloors[floor] = [...floors[floor]];\r\n  }\r\n  return newFloors;\r\n};\r\n\r\nconst invalidGameState = (floors) => {\r\n  for (let floor of Object.values(floors)) {\r\n    for (let item of floor) {\r\n      if (item.type === \"microchip\") {\r\n        if (\r\n          floor.filter(\r\n            (val) => val.chem === item.chem && val.type === \"generator\"\r\n          ).length === 0 &&\r\n          floor.filter(\r\n            (val) => val.chem !== item.chem && val.type === \"generator\"\r\n          ).length > 0\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst winState = (floors) => {\r\n  return (\r\n    floors.first.length === 0 &&\r\n    floors.second.length === 0 &&\r\n    floors.third.length === 0\r\n  );\r\n};\r\n\r\nconst stringify = (floors, elevatorFloor) => {\r\n  let result = \"\";\r\n  for (let floor in floors) {\r\n    let floorValues = floors[floor].map((val) => `${val.chem}:${val.type}`);\r\n    floorValues.sort((val1, val2) => val1.localeCompare(val2));\r\n    result += `${floor}:${floorValues.join(\",\")}`;\r\n  }\r\n  result += `Elevator on: ${elevatorFloor}`;\r\n  return result;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day11_2/index.js",["428","429"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\");\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day12_1/index.js",["430","431","432","433","434","435","436","437"],[],"import Computer from \"../../Computer.js\"\r\n\r\nconst solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\n\");\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  const instructionParser = (inst) => inst.split(\" \");\r\n  const instructionSet = {\r\n    cpy: (registers, params) => { registers[params[1]] = Number.isInteger(parseInt(params[0])) ? parseInt(params[0]) : registers[params[0]]; return 1; },\r\n    inc: (registers, params) => { registers[params[0]]++; return 1; },\r\n    dec: (registers, params) => { registers[params[0]]--; return 1; },\r\n    jnz: (registers, params) => { return (Number.isInteger(parseInt(params[0])) ? parseInt(params[0]) : registers[params[0]]) !== 0 ? parseInt(params[1]) : 1; }\r\n  }\r\n  const registers = [\"a\", \"b\", \"c\", \"d\"];\r\n  const computer = new Computer(instructionSet, registers, instructionParser);\r\n  computer.process(input);\r\n  return computer.registers[\"a\"];\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day12_2/index.js",["438","439","440","441","442","443","444","445","446"],[],"import Computer from \"../../Computer.js\"\r\n\r\nconst solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\n\");\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  const instructionParser = (inst) => inst.split(\" \");\r\n  const instructionSet = {\r\n    cpy: (registers, params) => { registers[params[1]] = Number.isInteger(parseInt(params[0])) ? parseInt(params[0]) : registers[params[0]]; return 1; },\r\n    inc: (registers, params) => { registers[params[0]]++; return 1; },\r\n    dec: (registers, params) => { registers[params[0]]--; return 1; },\r\n    jnz: (registers, params) => { return (Number.isInteger(parseInt(params[0])) ? parseInt(params[0]) : registers[params[0]]) !== 0 ? parseInt(params[1]) : 1; }\r\n  }\r\n  const registers = [\"a\", \"b\", \"c\", \"d\"];\r\n  const computer = new Computer(instructionSet, registers, instructionParser);\r\n  computer.registers[\"c\"] = 1;\r\n  computer.process(input);\r\n  return computer.registers[\"a\"];\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day13_1/index.js",["447","448"],[],"/home/jacob/advent-of-code/2016/solutions/day13_2/index.js",["449","450"],[],"/home/jacob/advent-of-code/2016/solutions/day14_1/index.js",["451","452","453","454","455","456"],[],"import md5 from \"md5\";\r\n\r\nconst solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input;\r\n};\r\n\r\nconst hashMap = {};\r\n\r\nconst calculateSolution = (input) => {\r\n  let found = 0;\r\n  let index = 0;\r\n  while (found < 64) {\r\n    index++\r\n    const candidate = generateMd5(input, index);\r\n    const tripletChar = checkCandidateForTriple(candidate);\r\n    if (tripletChar && checkThousandHashes(index, tripletChar, input)) {\r\n      found++;\r\n    }\r\n  }\r\n  return index;\r\n};\r\n\r\nconst generateMd5 = (salt, seed) => {\r\n  if (!hashMap[seed]) {\r\n    hashMap[seed] = md5(`${salt}${seed}`);\r\n  }\r\n  return hashMap[seed];\r\n}\r\n\r\nconst checkCandidateForTriple = (candidate) => {\r\n  for (let x = 0; x < candidate.length-2; x++) {\r\n    if (candidate[x] === candidate[x+1] && candidate[x+1] === candidate[x+2]) {\r\n      return candidate[x];\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nconst checkThousandHashes = (index, targetChar, salt) => {\r\n  const target = `${targetChar}${targetChar}${targetChar}${targetChar}${targetChar}`;\r\n  for (let x = index + 1; x <= index + 1000; x++) {\r\n    const hash = generateMd5(salt, x);\r\n    if (hash.includes(target)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day14_2/index.js",["457","458","459","460","461","462"],[],"import md5 from \"md5\";\r\n\r\nconst solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input;\r\n};\r\n\r\nconst hashMap = {};\r\n\r\nconst calculateSolution = (input) => {\r\n  let found = 0;\r\n  let index = 0;\r\n  while (found < 64) {\r\n    index++\r\n    const candidate = generateMd5(input, index);\r\n    const tripletChar = checkCandidateForTriple(candidate);\r\n    if (tripletChar && checkThousandHashes(index, tripletChar, input)) {\r\n      found++;\r\n    }\r\n    if (index % 1000 === 0) {\r\n      console.log(index);\r\n    }\r\n  }\r\n  return index;\r\n};\r\n\r\nconst generateMd5 = (salt, seed) => {\r\n  if (!hashMap[seed]) {\r\n    let hash = md5(`${salt}${seed}`);\r\n    for (let x = 0; x < 2016; x++) {\r\n      hash = md5(hash);\r\n    }\r\n    hashMap[seed] = hash;\r\n  }\r\n  return hashMap[seed];\r\n}\r\n\r\nconst checkCandidateForTriple = (candidate) => {\r\n  for (let x = 0; x < candidate.length-2; x++) {\r\n    if (candidate[x] === candidate[x+1] && candidate[x+1] === candidate[x+2]) {\r\n      return candidate[x];\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nconst checkThousandHashes = (index, targetChar, salt) => {\r\n  const target = `${targetChar}${targetChar}${targetChar}${targetChar}${targetChar}`;\r\n  for (let x = index + 1; x <= index + 1000; x++) {\r\n    const hash = generateMd5(salt, x);\r\n    if (hash.includes(target)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day15_1/index.js",["463","464","465","466","467","468","469","470"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\n\")\r\n    .map(row => row.match(/Disc #([0-9]+) has ([0-9]+) positions; at time=0, it is at position ([0-9]+)./))\r\n    .map(row => ({ offset: parseInt(row[1]), size: parseInt(row[2]), pos: parseInt(row[3]) }));\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let seconds = 0\r\n  let lcm = 1;\r\n  for (let disc of input) {\r\n    seconds += calculateDisc(disc, lcm, seconds);\r\n    lcm *= disc.size;\r\n  }\r\n  return seconds;\r\n};\r\n\r\nconst calculateDisc = (disc, lcm, elapsed)=> {\r\n  let secondsToWait =  disc.size-((disc.pos + elapsed) % disc.size)-disc.offset;\r\n  while (secondsToWait < 0 || secondsToWait % lcm !== 0) {\r\n    secondsToWait += disc.size;\r\n  }\r\n  return secondsToWait;\r\n}\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day15_2/index.js",["471","472","473","474","475","476","477","478"],[],"/home/jacob/advent-of-code/2016/solutions/day16_1/index.js",["479","480","481","482","483","484","485"],[],"import { atan, map } from \"mathjs\";\r\n\r\nconst solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\").map(val => parseInt(val));\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  const size = 272;\r\n  let data = input;\r\n  while (data.length < size) {\r\n    data = applyDragon(data);\r\n  }\r\n  data = data.splice(0, size);\r\n  do {\r\n    data = checkSum(data);\r\n  } while (data.length % 2 === 0);\r\n  return data.join(\"\");\r\n};\r\n\r\nconst applyDragon = (input) => {\r\n  const reversed = [...input].reverse().map(val => val ? 0 : 1);\r\n  return [...input, 0, ...reversed];\r\n}\r\n\r\nconst checkSum = (data) => {\r\n  const checkSum = [];\r\n  for (let x = 0; x < data.length; x += 2) {\r\n    checkSum.push(data[x] === data[x + 1] ? 1 : 0);\r\n  }\r\n  return checkSum;\r\n}\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day16_2/index.js",["486","487","488","489","490","491","492"],[],"import { atan, map } from \"mathjs\";\r\n\r\nconst solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\").map(val => parseInt(val));\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  const size = 35651584;\r\n  let data = input;\r\n  while (data.length < size) {\r\n    data = applyDragon(data);\r\n  }\r\n  data = data.splice(0, size);\r\n  do {\r\n    data = checkSum(data);\r\n  } while (data.length % 2 === 0);\r\n  return data.join(\"\");\r\n};\r\n\r\nconst applyDragon = (input) => {\r\n  const reversed = [...input].reverse().map(val => val ? 0 : 1);\r\n  return [...input, 0, ...reversed];\r\n}\r\n\r\nconst checkSum = (data) => {\r\n  const checkSum = [];\r\n  for (let x = 0; x < data.length; x += 2) {\r\n    checkSum.push(data[x] === data[x + 1] ? 1 : 0);\r\n  }\r\n  return checkSum;\r\n}\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day17_1/index.js",["493","494"],[],"/home/jacob/advent-of-code/2016/solutions/day17_2/index.js",["495","496"],[],"/home/jacob/advent-of-code/2016/solutions/day18_1/index.js",["497","498","499"],[],"import { row } from \"mathjs\";\r\n\r\nconst solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\");\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  const rows = [input];\r\n  while (rows.length < 40) {\r\n    const prevRow = rows.slice(-1)[0];\r\n    const newRow = [];\r\n    for (let x = 0; x < prevRow.length; x++) {\r\n      const leftSafe = x === 0 || prevRow[x - 1] === \".\";\r\n      const rightSafe = x === prevRow.length - 1 || prevRow[x + 1] === \".\";\r\n      newRow.push(leftSafe != rightSafe ? '^' : '.');\r\n    }\r\n    rows.push(newRow);\r\n  }\r\n  return rows.flat().reduce((acc, curr) => acc + (curr === \".\" ? 1 : 0), 0);\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day18_2/index.js",["500","501","502"],[],"import { row } from \"mathjs\";\r\n\r\nconst solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\");\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  const rows = [input];\r\n  while (rows.length < 400000) {\r\n    const prevRow = rows.slice(-1)[0];\r\n    const newRow = [];\r\n    for (let x = 0; x < prevRow.length; x++) {\r\n      const leftSafe = x === 0 || prevRow[x - 1] === \".\";\r\n      const rightSafe = x === prevRow.length - 1 || prevRow[x + 1] === \".\";\r\n      newRow.push(leftSafe != rightSafe ? '^' : '.');\r\n    }\r\n    rows.push(newRow);\r\n  }\r\n  return rows.flat().reduce((acc, curr) => acc + (curr === \".\" ? 1 : 0), 0);\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day19_1/index.js",["503","504"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return parseInt(input);\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let elves = Object.keys(new Array(input).fill(0));\r\n  let even = true;\r\n  while (elves.length > 1) {\r\n    const nextEven = elves.length %2 === 1 ? !even : even;\r\n    elves = elves.filter((_val, index) => index % 2 === (even ? 0 : 1));\r\n    even = nextEven;\r\n  }\r\n  return parseInt(elves[0]) + 1;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day19_2/index.js",["505"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return parseInt(input);\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  let elves = Object.keys(new Array(input).fill(0));\r\n  let nextIndex = 0;\r\n  while (elves.length > 1) {\r\n    if (elves.length % 10000 === 0) {\r\n      console.log(elves.length);\r\n    }\r\n    const target = (Math.floor(elves.length / 2) + nextIndex) % elves.length;\r\n    elves.splice(target, 1);\r\n    if (target > nextIndex) {\r\n      nextIndex++;\r\n    }\r\n  }\r\n  return parseInt(elves[0]) + 1;\r\n};\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day20_1/index.js",["506","507","508","509","510","511","512","513","514","515"],[],"const solution = {\r\n  solve: (input) => {\r\n    return calculateSolution(parseInput(input));\r\n  },\r\n};\r\n\r\nconst parseInput = (input) => {\r\n  return input.split(\"\\n\").map(row=>row.split(\"-\").map(val=>parseInt(val)));\r\n};\r\n\r\nconst calculateSolution = (input) => {\r\n  const allowedRanges = [[0, Infinity]]\r\n  input.sort((a,b)=>a[0]-b[0]);\r\n // console.log(input);\r\n  for (const range of input) {\r\n    const overlaps = [];\r\n    for (let allowedRange of allowedRanges) {\r\n      if (range[1] >= allowedRange[0] && range[0] <= allowedRange[1]) {\r\n        overlaps.push(allowedRange);\r\n      }\r\n    }\r\n    for (let overlap of overlaps) {\r\n      const difference = findDiff(overlap, range);\r\n      allowedRanges.splice(allowedRanges.indexOf(overlap), 1);\r\n    }\r\n  }\r\n};\r\n\r\nconst findDiff =(allowed, remove)=> {\r\n  \r\n}\r\n\r\nexport default solution;\r\n","/home/jacob/advent-of-code/2016/solutions/day20_2/index.js",["516","517"],[],"/home/jacob/advent-of-code/2016/solutions/day21_1/index.js",["518","519"],[],"/home/jacob/advent-of-code/2016/solutions/day21_2/index.js",["520","521"],[],"/home/jacob/advent-of-code/2016/solutions/day22_1/index.js",["522","523"],[],"/home/jacob/advent-of-code/2016/solutions/day22_2/index.js",["524","525"],[],"/home/jacob/advent-of-code/2016/solutions/day23_1/index.js",["526","527"],[],"/home/jacob/advent-of-code/2016/solutions/day23_2/index.js",["528","529"],[],"/home/jacob/advent-of-code/2016/solutions/day24_1/index.js",["530","531"],[],"/home/jacob/advent-of-code/2016/solutions/day24_2/index.js",["532","533"],[],"/home/jacob/advent-of-code/2016/solutions/day25_1/index.js",["534","535"],[],"/home/jacob/advent-of-code/2016/solutions/day25_2/index.js",["536","537"],[],{"ruleId":"538","severity":2,"message":"539","line":15,"column":12,"nodeType":"540","messageId":"541","endLine":15,"endColumn":15,"fix":"542"},{"ruleId":"538","severity":2,"message":"543","line":23,"column":9,"nodeType":"540","messageId":"541","endLine":23,"endColumn":17,"fix":"544"},{"ruleId":"538","severity":2,"message":"545","line":15,"column":7,"nodeType":"540","messageId":"541","endLine":15,"endColumn":14,"fix":"546"},{"ruleId":"538","severity":2,"message":"539","line":16,"column":12,"nodeType":"540","messageId":"541","endLine":16,"endColumn":15,"fix":"547"},{"ruleId":"538","severity":2,"message":"543","line":24,"column":9,"nodeType":"540","messageId":"541","endLine":24,"endColumn":17,"fix":"548"},{"ruleId":"549","severity":2,"message":"550","line":42,"column":14,"nodeType":"551","messageId":"552","endLine":44,"endColumn":8,"fix":"553"},{"ruleId":"538","severity":2,"message":"554","line":12,"column":7,"nodeType":"540","messageId":"541","endLine":12,"endColumn":13,"fix":"555"},{"ruleId":"538","severity":2,"message":"556","line":17,"column":7,"nodeType":"540","messageId":"541","endLine":17,"endColumn":10,"fix":"557"},{"ruleId":"558","severity":2,"message":"559","line":19,"column":1,"nodeType":null,"messageId":"560","endLine":19,"endColumn":14,"fix":"561"},{"ruleId":"538","severity":2,"message":"562","line":21,"column":12,"nodeType":"540","messageId":"541","endLine":21,"endColumn":16,"fix":"563"},{"ruleId":"538","severity":2,"message":"539","line":22,"column":14,"nodeType":"540","messageId":"541","endLine":22,"endColumn":17,"fix":"564"},{"ruleId":"565","severity":2,"message":"566","line":25,"column":11,"nodeType":"567","messageId":"568","endLine":25,"endColumn":45},{"ruleId":"565","severity":2,"message":"566","line":28,"column":11,"nodeType":"567","messageId":"568","endLine":28,"endColumn":45},{"ruleId":"565","severity":2,"message":"566","line":31,"column":11,"nodeType":"567","messageId":"568","endLine":31,"endColumn":45},{"ruleId":"565","severity":2,"message":"566","line":34,"column":11,"nodeType":"567","messageId":"568","endLine":34,"endColumn":45},{"ruleId":"538","severity":2,"message":"554","line":12,"column":7,"nodeType":"540","messageId":"541","endLine":12,"endColumn":13,"fix":"569"},{"ruleId":"538","severity":2,"message":"556","line":19,"column":7,"nodeType":"540","messageId":"541","endLine":19,"endColumn":10,"fix":"570"},{"ruleId":"538","severity":2,"message":"562","line":23,"column":12,"nodeType":"540","messageId":"541","endLine":23,"endColumn":16,"fix":"571"},{"ruleId":"538","severity":2,"message":"539","line":24,"column":14,"nodeType":"540","messageId":"541","endLine":24,"endColumn":17,"fix":"572"},{"ruleId":"565","severity":2,"message":"566","line":27,"column":11,"nodeType":"567","messageId":"568","endLine":29,"endColumn":25},{"ruleId":"558","severity":2,"message":"573","line":27,"column":58,"nodeType":null,"messageId":"560","endLine":29,"endColumn":12,"fix":"574"},{"ruleId":"565","severity":2,"message":"566","line":32,"column":11,"nodeType":"567","messageId":"568","endLine":34,"endColumn":25},{"ruleId":"558","severity":2,"message":"575","line":32,"column":58,"nodeType":null,"messageId":"560","endLine":34,"endColumn":12,"fix":"576"},{"ruleId":"565","severity":2,"message":"566","line":37,"column":11,"nodeType":"567","messageId":"568","endLine":37,"endColumn":82},{"ruleId":"565","severity":2,"message":"566","line":40,"column":11,"nodeType":"567","messageId":"568","endLine":40,"endColumn":82},{"ruleId":"538","severity":2,"message":"577","line":18,"column":12,"nodeType":"540","messageId":"541","endLine":18,"endColumn":15,"fix":"578"},{"ruleId":"558","severity":2,"message":"579","line":19,"column":17,"nodeType":null,"messageId":"560","endLine":19,"endColumn":23,"fix":"580"},{"ruleId":"558","severity":2,"message":"581","line":20,"column":34,"nodeType":null,"messageId":"582","endLine":20,"endColumn":34,"fix":"583"},{"ruleId":"538","severity":2,"message":"577","line":19,"column":12,"nodeType":"540","messageId":"541","endLine":19,"endColumn":15,"fix":"584"},{"ruleId":"585","severity":2,"message":"586","line":23,"column":24,"nodeType":"587","messageId":"552","endLine":23,"endColumn":26},{"ruleId":"538","severity":2,"message":"588","line":24,"column":16,"nodeType":"540","messageId":"541","endLine":24,"endColumn":19,"fix":"589"},{"ruleId":"558","severity":2,"message":"590","line":9,"column":47,"nodeType":null,"messageId":"560","endLine":11,"endColumn":5,"fix":"591"},{"ruleId":"592","severity":2,"message":"593","line":10,"column":18,"nodeType":"594","messageId":"595","endLine":10,"endColumn":19,"suggestions":"596"},{"ruleId":"592","severity":2,"message":"593","line":10,"column":29,"nodeType":"594","messageId":"595","endLine":10,"endColumn":30,"suggestions":"597"},{"ruleId":"538","severity":2,"message":"598","line":18,"column":12,"nodeType":"540","messageId":"541","endLine":18,"endColumn":16,"fix":"599"},{"ruleId":"538","severity":2,"message":"600","line":27,"column":7,"nodeType":"540","messageId":"541","endLine":27,"endColumn":13,"fix":"601"},{"ruleId":"538","severity":2,"message":"602","line":28,"column":12,"nodeType":"540","messageId":"541","endLine":28,"endColumn":16,"fix":"603"},{"ruleId":"565","severity":2,"message":"566","line":32,"column":5,"nodeType":"567","messageId":"568","endLine":32,"endColumn":56},{"ruleId":"538","severity":2,"message":"604","line":34,"column":7,"nodeType":"540","messageId":"541","endLine":34,"endColumn":14,"fix":"605"},{"ruleId":"558","severity":2,"message":"590","line":9,"column":47,"nodeType":null,"messageId":"560","endLine":11,"endColumn":5,"fix":"606"},{"ruleId":"592","severity":2,"message":"593","line":10,"column":18,"nodeType":"594","messageId":"595","endLine":10,"endColumn":19,"suggestions":"607"},{"ruleId":"592","severity":2,"message":"593","line":10,"column":29,"nodeType":"594","messageId":"595","endLine":10,"endColumn":30,"suggestions":"608"},{"ruleId":"609","severity":1,"message":"610","line":16,"column":35,"nodeType":"611","messageId":"612","endLine":16,"endColumn":37},{"ruleId":"538","severity":2,"message":"598","line":17,"column":12,"nodeType":"540","messageId":"541","endLine":17,"endColumn":16,"fix":"613"},{"ruleId":"538","severity":2,"message":"614","line":19,"column":11,"nodeType":"540","messageId":"541","endLine":19,"endColumn":19,"fix":"615"},{"ruleId":"558","severity":2,"message":"616","line":28,"column":14,"nodeType":null,"messageId":"560","endLine":28,"endColumn":24,"fix":"617"},{"ruleId":"558","severity":2,"message":"618","line":29,"column":1,"nodeType":null,"messageId":"560","endLine":31,"endColumn":6,"fix":"619"},{"ruleId":"558","severity":2,"message":"620","line":32,"column":3,"nodeType":null,"messageId":"560","endLine":32,"endColumn":5,"fix":"621"},{"ruleId":"538","severity":2,"message":"600","line":36,"column":7,"nodeType":"540","messageId":"541","endLine":36,"endColumn":13,"fix":"622"},{"ruleId":"538","severity":2,"message":"602","line":37,"column":12,"nodeType":"540","messageId":"541","endLine":37,"endColumn":16,"fix":"623"},{"ruleId":"565","severity":2,"message":"566","line":41,"column":5,"nodeType":"567","messageId":"568","endLine":41,"endColumn":56},{"ruleId":"538","severity":2,"message":"604","line":43,"column":7,"nodeType":"540","messageId":"541","endLine":43,"endColumn":14,"fix":"624"},{"ruleId":"558","severity":2,"message":"625","line":1,"column":17,"nodeType":null,"messageId":"560","endLine":1,"endColumn":22,"fix":"626"},{"ruleId":"558","severity":2,"message":"627","line":14,"column":20,"nodeType":null,"messageId":"582","endLine":14,"endColumn":20,"fix":"628"},{"ruleId":"538","severity":2,"message":"629","line":16,"column":9,"nodeType":"540","messageId":"541","endLine":16,"endColumn":13,"fix":"630"},{"ruleId":"558","severity":2,"message":"631","line":15,"column":8,"nodeType":null,"messageId":"560","endLine":19,"endColumn":3,"fix":"632"},{"ruleId":"538","severity":2,"message":"629","line":20,"column":9,"nodeType":"540","messageId":"541","endLine":20,"endColumn":13,"fix":"633"},{"ruleId":"538","severity":2,"message":"634","line":12,"column":7,"nodeType":"540","messageId":"541","endLine":12,"endColumn":12,"fix":"635"},{"ruleId":"538","severity":2,"message":"636","line":16,"column":12,"nodeType":"540","messageId":"541","endLine":16,"endColumn":16,"fix":"637"},{"ruleId":"565","severity":2,"message":"566","line":18,"column":7,"nodeType":"567","messageId":"568","endLine":18,"endColumn":73},{"ruleId":"538","severity":2,"message":"638","line":22,"column":12,"nodeType":"540","messageId":"541","endLine":22,"endColumn":19,"fix":"639"},{"ruleId":"538","severity":2,"message":"640","line":23,"column":9,"nodeType":"540","messageId":"541","endLine":23,"endColumn":19,"fix":"641"},{"ruleId":"538","severity":2,"message":"634","line":12,"column":7,"nodeType":"540","messageId":"541","endLine":12,"endColumn":12,"fix":"642"},{"ruleId":"538","severity":2,"message":"636","line":16,"column":12,"nodeType":"540","messageId":"541","endLine":16,"endColumn":16,"fix":"643"},{"ruleId":"565","severity":2,"message":"566","line":18,"column":7,"nodeType":"567","messageId":"568","endLine":18,"endColumn":73},{"ruleId":"538","severity":2,"message":"638","line":22,"column":12,"nodeType":"540","messageId":"541","endLine":22,"endColumn":19,"fix":"644"},{"ruleId":"538","severity":2,"message":"640","line":23,"column":9,"nodeType":"540","messageId":"541","endLine":23,"endColumn":19,"fix":"645"},{"ruleId":"538","severity":2,"message":"646","line":13,"column":12,"nodeType":"540","messageId":"541","endLine":13,"endColumn":14,"fix":"647"},{"ruleId":"538","severity":2,"message":"646","line":13,"column":12,"nodeType":"540","messageId":"541","endLine":13,"endColumn":14,"fix":"648"},{"ruleId":"538","severity":2,"message":"649","line":16,"column":9,"nodeType":"540","messageId":"541","endLine":16,"endColumn":14,"fix":"650"},{"ruleId":"558","severity":2,"message":"651","line":26,"column":11,"nodeType":null,"messageId":"560","endLine":31,"endColumn":7,"fix":"652"},{"ruleId":"538","severity":2,"message":"653","line":33,"column":15,"nodeType":"540","messageId":"541","endLine":33,"endColumn":18,"fix":"654"},{"ruleId":"558","severity":2,"message":"655","line":33,"column":36,"nodeType":null,"messageId":"560","endLine":33,"endColumn":37,"fix":"656"},{"ruleId":"538","severity":2,"message":"657","line":34,"column":15,"nodeType":"540","messageId":"541","endLine":34,"endColumn":23,"fix":"658"},{"ruleId":"558","severity":2,"message":"659","line":34,"column":33,"nodeType":null,"messageId":"560","endLine":34,"endColumn":47,"fix":"660"},{"ruleId":"558","severity":2,"message":"581","line":35,"column":35,"nodeType":null,"messageId":"582","endLine":35,"endColumn":35,"fix":"661"},{"ruleId":"538","severity":2,"message":"653","line":41,"column":15,"nodeType":"540","messageId":"541","endLine":41,"endColumn":18,"fix":"662"},{"ruleId":"558","severity":2,"message":"655","line":41,"column":28,"nodeType":null,"messageId":"560","endLine":41,"endColumn":29,"fix":"663"},{"ruleId":"538","severity":2,"message":"657","line":42,"column":15,"nodeType":"540","messageId":"541","endLine":42,"endColumn":23,"fix":"664"},{"ruleId":"558","severity":2,"message":"665","line":42,"column":41,"nodeType":null,"messageId":"560","endLine":42,"endColumn":47,"fix":"666"},{"ruleId":"609","severity":1,"message":"610","line":8,"column":41,"nodeType":"611","messageId":"612","endLine":8,"endColumn":43},{"ruleId":"667","severity":2,"message":"668","line":8,"column":41,"nodeType":"611","messageId":"669","endLine":8,"endColumn":43},{"ruleId":"538","severity":2,"message":"670","line":33,"column":7,"nodeType":"540","messageId":"541","endLine":33,"endColumn":18,"fix":"671"},{"ruleId":"538","severity":2,"message":"672","line":34,"column":7,"nodeType":"540","messageId":"541","endLine":34,"endColumn":19,"fix":"673"},{"ruleId":"538","severity":2,"message":"674","line":35,"column":7,"nodeType":"540","messageId":"541","endLine":35,"endColumn":13,"fix":"675"},{"ruleId":"538","severity":2,"message":"577","line":37,"column":9,"nodeType":"540","messageId":"541","endLine":37,"endColumn":12,"fix":"676"},{"ruleId":"538","severity":2,"message":"677","line":44,"column":12,"nodeType":"540","messageId":"541","endLine":44,"endColumn":18,"fix":"678"},{"ruleId":"558","severity":2,"message":"679","line":56,"column":19,"nodeType":null,"messageId":"680","endLine":57,"endColumn":6,"fix":"681"},{"ruleId":"538","severity":2,"message":"682","line":64,"column":9,"nodeType":"540","messageId":"541","endLine":64,"endColumn":15,"fix":"683"},{"ruleId":"558","severity":2,"message":"684","line":64,"column":33,"nodeType":null,"messageId":"560","endLine":64,"endColumn":38,"fix":"685"},{"ruleId":"558","severity":2,"message":"686","line":65,"column":1,"nodeType":null,"messageId":"680","endLine":65,"endColumn":5,"fix":"687"},{"ruleId":"558","severity":2,"message":"688","line":67,"column":1,"nodeType":null,"messageId":"680","endLine":67,"endColumn":3,"fix":"689"},{"ruleId":"538","severity":2,"message":"690","line":70,"column":9,"nodeType":"540","messageId":"541","endLine":70,"endColumn":15,"fix":"691"},{"ruleId":"538","severity":2,"message":"692","line":71,"column":9,"nodeType":"540","messageId":"541","endLine":71,"endColumn":14,"fix":"693"},{"ruleId":"609","severity":1,"message":"610","line":8,"column":41,"nodeType":"611","messageId":"612","endLine":8,"endColumn":43},{"ruleId":"667","severity":2,"message":"668","line":8,"column":41,"nodeType":"611","messageId":"669","endLine":8,"endColumn":43},{"ruleId":"538","severity":2,"message":"670","line":33,"column":7,"nodeType":"540","messageId":"541","endLine":33,"endColumn":18,"fix":"694"},{"ruleId":"538","severity":2,"message":"672","line":34,"column":7,"nodeType":"540","messageId":"541","endLine":34,"endColumn":19,"fix":"695"},{"ruleId":"538","severity":2,"message":"674","line":35,"column":7,"nodeType":"540","messageId":"541","endLine":35,"endColumn":13,"fix":"696"},{"ruleId":"538","severity":2,"message":"577","line":37,"column":9,"nodeType":"540","messageId":"541","endLine":37,"endColumn":12,"fix":"697"},{"ruleId":"538","severity":2,"message":"677","line":44,"column":12,"nodeType":"540","messageId":"541","endLine":44,"endColumn":18,"fix":"698"},{"ruleId":"699","severity":2,"message":"700","line":55,"column":39,"nodeType":"587","messageId":"701","endLine":55,"endColumn":67,"fix":"702"},{"ruleId":"538","severity":2,"message":"682","line":60,"column":9,"nodeType":"540","messageId":"541","endLine":60,"endColumn":15,"fix":"703"},{"ruleId":"538","severity":2,"message":"690","line":66,"column":9,"nodeType":"540","messageId":"541","endLine":66,"endColumn":15,"fix":"704"},{"ruleId":"538","severity":2,"message":"692","line":67,"column":9,"nodeType":"540","messageId":"541","endLine":67,"endColumn":14,"fix":"705"},{"ruleId":"706","severity":2,"message":"707","line":16,"column":7,"nodeType":"708","messageId":"709","endLine":16,"endColumn":28,"fix":"710"},{"ruleId":"538","severity":2,"message":"711","line":25,"column":11,"nodeType":"540","messageId":"541","endLine":25,"endColumn":16,"fix":"712"},{"ruleId":"538","severity":2,"message":"711","line":25,"column":11,"nodeType":"540","messageId":"541","endLine":25,"endColumn":16,"fix":"713"},{"ruleId":"558","severity":2,"message":"714","line":30,"column":16,"nodeType":null,"messageId":"560","endLine":31,"endColumn":85,"fix":"715"},{"ruleId":"558","severity":2,"message":"716","line":19,"column":23,"nodeType":null,"messageId":"560","endLine":21,"endColumn":5,"fix":"717"},{"ruleId":"718","severity":1,"message":"719","line":36,"column":10,"nodeType":"594","messageId":"552","endLine":36,"endColumn":14},{"ruleId":"538","severity":2,"message":"653","line":37,"column":14,"nodeType":"540","messageId":"541","endLine":37,"endColumn":17,"fix":"720"},{"ruleId":"558","severity":2,"message":"716","line":19,"column":23,"nodeType":null,"messageId":"560","endLine":21,"endColumn":5,"fix":"721"},{"ruleId":"538","severity":2,"message":"722","line":37,"column":7,"nodeType":"540","messageId":"541","endLine":37,"endColumn":14,"fix":"723"},{"ruleId":"538","severity":2,"message":"653","line":40,"column":14,"nodeType":"540","messageId":"541","endLine":40,"endColumn":17,"fix":"724"},{"ruleId":"725","severity":2,"message":"726","line":65,"column":18,"nodeType":"594","messageId":"727","endLine":65,"endColumn":22,"fix":"728"},{"ruleId":"725","severity":2,"message":"729","line":65,"column":37,"nodeType":"594","messageId":"727","endLine":65,"endColumn":41,"fix":"730"},{"ruleId":"725","severity":2,"message":"731","line":65,"column":56,"nodeType":"594","messageId":"727","endLine":65,"endColumn":60,"fix":"732"},{"ruleId":"538","severity":2,"message":"711","line":10,"column":11,"nodeType":"540","messageId":"541","endLine":10,"endColumn":16,"fix":"733"},{"ruleId":"734","severity":2,"message":"735","line":39,"column":3,"nodeType":"736","messageId":"737","endLine":39,"endColumn":22,"fix":"738"},{"ruleId":"699","severity":2,"message":"700","line":49,"column":24,"nodeType":"587","messageId":"701","endLine":49,"endColumn":38,"fix":"739"},{"ruleId":"734","severity":2,"message":"735","line":56,"column":5,"nodeType":"736","messageId":"737","endLine":56,"endColumn":67,"fix":"740"},{"ruleId":"734","severity":2,"message":"735","line":62,"column":5,"nodeType":"736","messageId":"737","endLine":62,"endColumn":51,"fix":"741"},{"ruleId":"538","severity":2,"message":"742","line":82,"column":12,"nodeType":"540","messageId":"541","endLine":82,"endColumn":28,"fix":"743"},{"ruleId":"538","severity":2,"message":"744","line":83,"column":14,"nodeType":"540","messageId":"541","endLine":83,"endColumn":19,"fix":"745"},{"ruleId":"538","severity":2,"message":"746","line":84,"column":16,"nodeType":"540","messageId":"541","endLine":84,"endColumn":21,"fix":"747"},{"ruleId":"538","severity":2,"message":"748","line":86,"column":13,"nodeType":"540","messageId":"541","endLine":86,"endColumn":23,"fix":"749"},{"ruleId":"558","severity":2,"message":"750","line":88,"column":42,"nodeType":null,"messageId":"560","endLine":91,"endColumn":9,"fix":"751"},{"ruleId":"558","severity":2,"message":"752","line":94,"column":44,"nodeType":null,"messageId":"560","endLine":97,"endColumn":11,"fix":"753"},{"ruleId":"538","severity":2,"message":"754","line":99,"column":13,"nodeType":"540","messageId":"541","endLine":99,"endColumn":25,"fix":"755"},{"ruleId":"558","severity":2,"message":"756","line":99,"column":37,"nodeType":null,"messageId":"560","endLine":104,"endColumn":9,"fix":"757"},{"ruleId":"538","severity":2,"message":"758","line":120,"column":7,"nodeType":"540","messageId":"541","endLine":120,"endColumn":16,"fix":"759"},{"ruleId":"760","severity":2,"message":"761","line":121,"column":3,"nodeType":"762","messageId":"763","endLine":123,"endColumn":4},{"ruleId":"538","severity":2,"message":"764","line":121,"column":12,"nodeType":"540","messageId":"541","endLine":121,"endColumn":17,"fix":"765"},{"ruleId":"538","severity":2,"message":"764","line":128,"column":12,"nodeType":"540","messageId":"541","endLine":128,"endColumn":17,"fix":"766"},{"ruleId":"538","severity":2,"message":"767","line":129,"column":14,"nodeType":"540","messageId":"541","endLine":129,"endColumn":18,"fix":"768"},{"ruleId":"558","severity":2,"message":"769","line":132,"column":24,"nodeType":null,"messageId":"560","endLine":134,"endColumn":11,"fix":"770"},{"ruleId":"558","severity":2,"message":"771","line":135,"column":24,"nodeType":null,"messageId":"560","endLine":137,"endColumn":11,"fix":"772"},{"ruleId":"558","severity":2,"message":"773","line":148,"column":10,"nodeType":null,"messageId":"560","endLine":152,"endColumn":4,"fix":"774"},{"ruleId":"760","severity":2,"message":"761","line":157,"column":3,"nodeType":"762","messageId":"763","endLine":161,"endColumn":4},{"ruleId":"538","severity":2,"message":"764","line":157,"column":12,"nodeType":"540","messageId":"541","endLine":157,"endColumn":17,"fix":"775"},{"ruleId":"538","severity":2,"message":"776","line":158,"column":9,"nodeType":"540","messageId":"541","endLine":158,"endColumn":20,"fix":"777"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"782"},{"ruleId":"783","severity":2,"message":"784","line":1,"column":22,"nodeType":"594","endLine":1,"endColumn":41},{"ruleId":"558","severity":2,"message":"627","line":1,"column":41,"nodeType":null,"messageId":"582","endLine":1,"endColumn":41,"fix":"785"},{"ruleId":"558","severity":2,"message":"786","line":16,"column":34,"nodeType":null,"messageId":"560","endLine":16,"endColumn":151,"fix":"787"},{"ruleId":"558","severity":2,"message":"788","line":17,"column":34,"nodeType":null,"messageId":"560","endLine":17,"endColumn":68,"fix":"789"},{"ruleId":"558","severity":2,"message":"790","line":18,"column":34,"nodeType":null,"messageId":"560","endLine":18,"endColumn":68,"fix":"791"},{"ruleId":"558","severity":2,"message":"792","line":19,"column":34,"nodeType":null,"messageId":"560","endLine":19,"endColumn":161,"fix":"793"},{"ruleId":"558","severity":2,"message":"627","line":20,"column":4,"nodeType":null,"messageId":"582","endLine":20,"endColumn":4,"fix":"794"},{"ruleId":"725","severity":2,"message":"795","line":24,"column":29,"nodeType":"594","messageId":"727","endLine":24,"endColumn":32,"fix":"796"},{"ruleId":"783","severity":2,"message":"784","line":1,"column":22,"nodeType":"594","endLine":1,"endColumn":41},{"ruleId":"558","severity":2,"message":"627","line":1,"column":41,"nodeType":null,"messageId":"582","endLine":1,"endColumn":41,"fix":"797"},{"ruleId":"558","severity":2,"message":"786","line":16,"column":34,"nodeType":null,"messageId":"560","endLine":16,"endColumn":151,"fix":"798"},{"ruleId":"558","severity":2,"message":"788","line":17,"column":34,"nodeType":null,"messageId":"560","endLine":17,"endColumn":68,"fix":"799"},{"ruleId":"558","severity":2,"message":"790","line":18,"column":34,"nodeType":null,"messageId":"560","endLine":18,"endColumn":68,"fix":"800"},{"ruleId":"558","severity":2,"message":"792","line":19,"column":34,"nodeType":null,"messageId":"560","endLine":19,"endColumn":161,"fix":"801"},{"ruleId":"558","severity":2,"message":"627","line":20,"column":4,"nodeType":null,"messageId":"582","endLine":20,"endColumn":4,"fix":"802"},{"ruleId":"725","severity":2,"message":"803","line":23,"column":22,"nodeType":"594","messageId":"727","endLine":23,"endColumn":25,"fix":"804"},{"ruleId":"725","severity":2,"message":"795","line":25,"column":29,"nodeType":"594","messageId":"727","endLine":25,"endColumn":32,"fix":"805"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"806"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"807"},{"ruleId":"558","severity":2,"message":"627","line":19,"column":12,"nodeType":null,"messageId":"582","endLine":19,"endColumn":12,"fix":"808"},{"ruleId":"558","severity":2,"message":"627","line":34,"column":2,"nodeType":null,"messageId":"582","endLine":34,"endColumn":2,"fix":"809"},{"ruleId":"558","severity":2,"message":"810","line":37,"column":39,"nodeType":null,"messageId":"560","endLine":37,"endColumn":40,"fix":"811"},{"ruleId":"558","severity":2,"message":"812","line":38,"column":37,"nodeType":null,"messageId":"560","endLine":38,"endColumn":75,"fix":"813"},{"ruleId":"558","severity":2,"message":"627","line":43,"column":2,"nodeType":null,"messageId":"582","endLine":43,"endColumn":2,"fix":"814"},{"ruleId":"558","severity":2,"message":"627","line":54,"column":2,"nodeType":null,"messageId":"582","endLine":54,"endColumn":2,"fix":"815"},{"ruleId":"558","severity":2,"message":"627","line":19,"column":12,"nodeType":null,"messageId":"582","endLine":19,"endColumn":12,"fix":"816"},{"ruleId":"558","severity":2,"message":"627","line":41,"column":2,"nodeType":null,"messageId":"582","endLine":41,"endColumn":2,"fix":"817"},{"ruleId":"558","severity":2,"message":"810","line":44,"column":39,"nodeType":null,"messageId":"560","endLine":44,"endColumn":40,"fix":"818"},{"ruleId":"558","severity":2,"message":"812","line":45,"column":37,"nodeType":null,"messageId":"560","endLine":45,"endColumn":75,"fix":"819"},{"ruleId":"558","severity":2,"message":"627","line":50,"column":2,"nodeType":null,"messageId":"582","endLine":50,"endColumn":2,"fix":"820"},{"ruleId":"558","severity":2,"message":"627","line":61,"column":2,"nodeType":null,"messageId":"582","endLine":61,"endColumn":2,"fix":"821"},{"ruleId":"558","severity":2,"message":"822","line":8,"column":15,"nodeType":null,"messageId":"582","endLine":8,"endColumn":15,"fix":"823"},{"ruleId":"558","severity":2,"message":"824","line":9,"column":10,"nodeType":null,"messageId":"560","endLine":9,"endColumn":107,"fix":"825"},{"ruleId":"558","severity":2,"message":"826","line":10,"column":10,"nodeType":null,"messageId":"560","endLine":10,"endColumn":13,"fix":"827"},{"ruleId":"558","severity":2,"message":"627","line":14,"column":18,"nodeType":null,"messageId":"582","endLine":14,"endColumn":18,"fix":"828"},{"ruleId":"538","severity":2,"message":"829","line":16,"column":12,"nodeType":"540","messageId":"541","endLine":16,"endColumn":16,"fix":"830"},{"ruleId":"558","severity":2,"message":"581","line":23,"column":43,"nodeType":null,"messageId":"582","endLine":23,"endColumn":43,"fix":"831"},{"ruleId":"558","severity":2,"message":"832","line":24,"column":23,"nodeType":null,"messageId":"560","endLine":24,"endColumn":69,"fix":"833"},{"ruleId":"558","severity":2,"message":"627","line":29,"column":2,"nodeType":null,"messageId":"582","endLine":29,"endColumn":2,"fix":"834"},{"ruleId":"558","severity":2,"message":"822","line":8,"column":15,"nodeType":null,"messageId":"582","endLine":8,"endColumn":15,"fix":"835"},{"ruleId":"558","severity":2,"message":"824","line":9,"column":10,"nodeType":null,"messageId":"560","endLine":9,"endColumn":107,"fix":"836"},{"ruleId":"558","severity":2,"message":"826","line":10,"column":10,"nodeType":null,"messageId":"560","endLine":10,"endColumn":13,"fix":"837"},{"ruleId":"558","severity":2,"message":"627","line":14,"column":18,"nodeType":null,"messageId":"582","endLine":14,"endColumn":18,"fix":"838"},{"ruleId":"538","severity":2,"message":"829","line":16,"column":12,"nodeType":"540","messageId":"541","endLine":16,"endColumn":16,"fix":"839"},{"ruleId":"558","severity":2,"message":"581","line":23,"column":43,"nodeType":null,"messageId":"582","endLine":23,"endColumn":43,"fix":"840"},{"ruleId":"558","severity":2,"message":"832","line":24,"column":23,"nodeType":null,"messageId":"560","endLine":24,"endColumn":69,"fix":"841"},{"ruleId":"558","severity":2,"message":"627","line":29,"column":2,"nodeType":null,"messageId":"582","endLine":29,"endColumn":2,"fix":"842"},{"ruleId":"778","severity":1,"message":"843","line":1,"column":10,"nodeType":"540","messageId":"780","endLine":1,"endColumn":14},{"ruleId":"778","severity":1,"message":"844","line":1,"column":16,"nodeType":"540","messageId":"780","endLine":1,"endColumn":19},{"ruleId":"558","severity":2,"message":"845","line":10,"column":30,"nodeType":null,"messageId":"560","endLine":10,"endColumn":33,"fix":"846"},{"ruleId":"558","severity":2,"message":"847","line":27,"column":45,"nodeType":null,"messageId":"560","endLine":27,"endColumn":63,"fix":"848"},{"ruleId":"558","severity":2,"message":"627","line":29,"column":2,"nodeType":null,"messageId":"582","endLine":29,"endColumn":2,"fix":"849"},{"ruleId":"850","severity":2,"message":"851","line":32,"column":9,"nodeType":"540","messageId":"852","endLine":32,"endColumn":17},{"ruleId":"558","severity":2,"message":"627","line":37,"column":2,"nodeType":null,"messageId":"582","endLine":37,"endColumn":2,"fix":"853"},{"ruleId":"778","severity":1,"message":"843","line":1,"column":10,"nodeType":"540","messageId":"780","endLine":1,"endColumn":14},{"ruleId":"778","severity":1,"message":"844","line":1,"column":16,"nodeType":"540","messageId":"780","endLine":1,"endColumn":19},{"ruleId":"558","severity":2,"message":"845","line":10,"column":30,"nodeType":null,"messageId":"560","endLine":10,"endColumn":33,"fix":"854"},{"ruleId":"558","severity":2,"message":"847","line":27,"column":45,"nodeType":null,"messageId":"560","endLine":27,"endColumn":63,"fix":"855"},{"ruleId":"558","severity":2,"message":"627","line":29,"column":2,"nodeType":null,"messageId":"582","endLine":29,"endColumn":2,"fix":"856"},{"ruleId":"850","severity":2,"message":"851","line":32,"column":9,"nodeType":"540","messageId":"852","endLine":32,"endColumn":17},{"ruleId":"558","severity":2,"message":"627","line":37,"column":2,"nodeType":null,"messageId":"582","endLine":37,"endColumn":2,"fix":"857"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"858"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"859"},{"ruleId":"778","severity":1,"message":"860","line":1,"column":10,"nodeType":"540","messageId":"780","endLine":1,"endColumn":13},{"ruleId":"585","severity":2,"message":"861","line":21,"column":28,"nodeType":"587","messageId":"552","endLine":21,"endColumn":30},{"ruleId":"558","severity":2,"message":"862","line":21,"column":43,"nodeType":null,"messageId":"560","endLine":21,"endColumn":52,"fix":"863"},{"ruleId":"778","severity":1,"message":"860","line":1,"column":10,"nodeType":"540","messageId":"780","endLine":1,"endColumn":13},{"ruleId":"585","severity":2,"message":"861","line":21,"column":28,"nodeType":"587","messageId":"552","endLine":21,"endColumn":30},{"ruleId":"558","severity":2,"message":"862","line":21,"column":43,"nodeType":null,"messageId":"560","endLine":21,"endColumn":52,"fix":"864"},{"ruleId":"558","severity":2,"message":"581","line":15,"column":36,"nodeType":null,"messageId":"582","endLine":15,"endColumn":36,"fix":"865"},{"ruleId":"866","severity":2,"message":"867","line":16,"column":26,"nodeType":"611","messageId":"868","endLine":16,"endColumn":71},{"ruleId":"538","severity":2,"message":"869","line":12,"column":7,"nodeType":"540","messageId":"541","endLine":12,"endColumn":12,"fix":"870"},{"ruleId":"558","severity":2,"message":"871","line":8,"column":32,"nodeType":null,"messageId":"560","endLine":8,"endColumn":61,"fix":"872"},{"ruleId":"558","severity":2,"message":"627","line":12,"column":40,"nodeType":null,"messageId":"582","endLine":12,"endColumn":40,"fix":"873"},{"ruleId":"558","severity":2,"message":"874","line":13,"column":17,"nodeType":null,"messageId":"560","endLine":13,"endColumn":26,"fix":"875"},{"ruleId":"558","severity":2,"message":"581","line":14,"column":1,"nodeType":null,"messageId":"582","endLine":14,"endColumn":1,"fix":"876"},{"ruleId":"538","severity":2,"message":"877","line":17,"column":14,"nodeType":"540","messageId":"541","endLine":17,"endColumn":26,"fix":"878"},{"ruleId":"538","severity":2,"message":"879","line":22,"column":14,"nodeType":"540","messageId":"541","endLine":22,"endColumn":21,"fix":"880"},{"ruleId":"778","severity":1,"message":"881","line":23,"column":13,"nodeType":"540","messageId":"780","endLine":23,"endColumn":23},{"ruleId":"558","severity":2,"message":"882","line":29,"column":17,"nodeType":null,"messageId":"560","endLine":31,"endColumn":2,"fix":"883"},{"ruleId":"778","severity":1,"message":"884","line":29,"column":18,"nodeType":"540","messageId":"780","endLine":29,"endColumn":25},{"ruleId":"778","severity":1,"message":"885","line":29,"column":27,"nodeType":"540","messageId":"780","endLine":29,"endColumn":33},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"886"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"887"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"888"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"889"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"890"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"891"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"892"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"893"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"894"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"895"},{"ruleId":"778","severity":1,"message":"779","line":11,"column":28,"nodeType":"540","messageId":"780","endLine":11,"endColumn":33},{"ruleId":"558","severity":2,"message":"781","line":11,"column":39,"nodeType":null,"messageId":"680","endLine":12,"endColumn":1,"fix":"896"},"prefer-const","'dir' is never reassigned. Use 'const' instead.","Identifier","useConst",{"range":"897","text":"898"},"'distance' is never reassigned. Use 'const' instead.",{"range":"899","text":"900"},"'visited' is never reassigned. Use 'const' instead.",{"range":"901","text":"902"},{"range":"903","text":"898"},{"range":"904","text":"900"},"no-else-return","Unnecessary 'else' after 'return'.","BlockStatement","unexpected",{"range":"905","text":"906"},"'keypad' is never reassigned. Use 'const' instead.",{"range":"907","text":"908"},"'pos' is never reassigned. Use 'const' instead.",{"range":"909","text":"910"},"prettier/prettier","Replace `let·code·=·\"\"` with `··let·code·=·\"\";`","replace",{"range":"911","text":"912"},"'inst' is never reassigned. Use 'const' instead.",{"range":"913","text":"914"},{"range":"915","text":"898"},"no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression",{"range":"916","text":"917"},{"range":"918","text":"919"},{"range":"920","text":"914"},{"range":"921","text":"898"},"Replace `␍⏎············?·pos[0]--␍⏎···········` with `·?·pos[0]--`",{"range":"922","text":"923"},"Replace `␍⏎············?·pos[1]--␍⏎···········` with `·?·pos[1]--`",{"range":"924","text":"925"},"'row' is never reassigned. Use 'const' instead.",{"range":"926","text":"927"},"Replace `b)=>a-` with `·b)·=>·a·-·`",{"range":"928","text":"929"},"Insert `·`","insert",{"range":"930","text":"931"},{"range":"932","text":"927"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'col' is never reassigned. Use 'const' instead.",{"range":"933","text":"934"},"Replace `␍⏎······/((?:[a-z]+\\-)*[a-z]+)\\-(\\d+)\\[([a-z]+)\\]/␍⏎····` with `/((?:[a-z]+\\-)*[a-z]+)\\-(\\d+)\\[([a-z]+)\\]/`",{"range":"935","text":"936"},"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["937","938"],["939","940"],"'room' is never reassigned. Use 'const' instead.",{"range":"941","text":"942"},"'counts' is never reassigned. Use 'const' instead.",{"range":"943","text":"944"},"'char' is never reassigned. Use 'const' instead.",{"range":"945","text":"946"},"'letters' is never reassigned. Use 'const' instead.",{"range":"947","text":"948"},{"range":"949","text":"936"},["950","951"],["952","953"],"consistent-return","Expected to return a value at the end of arrow function.","ArrowFunctionExpression","missingReturn",{"range":"954","text":"942"},"'realName' is never reassigned. Use 'const' instead.",{"range":"955","text":"956"},"Replace `.split(\"\")` with `␍⏎····.split(\"\")␍⏎····`",{"range":"957","text":"958"},"Replace `····return·char·===·\"-\"␍⏎······?·\"·\"␍⏎·····` with `······return·char·===·\"-\"·?·\"·\"`",{"range":"959","text":"960"},"Replace `})` with `··})␍⏎····`",{"range":"961","text":"962"},{"range":"963","text":"944"},{"range":"964","text":"946"},{"range":"965","text":"948"},"Replace `'md5'` with `\"md5\"`",{"range":"966","text":"967"},"Insert `;`",{"range":"968","text":"969"},"'hash' is never reassigned. Use 'const' instead.",{"range":"970","text":"971"},"Replace `␍⏎····let·x·=·0;␍⏎····password.split(\"\").filter((val)·=>·val·===·\"·\").length·>·0;␍⏎····x++␍⏎··` with `let·x·=·0;·password.split(\"\").filter((val)·=>·val·===·\"·\").length·>·0;·x++`",{"range":"972","text":"973"},{"range":"974","text":"971"},"'chars' is never reassigned. Use 'const' instead.",{"range":"975","text":"976"},"'word' is never reassigned. Use 'const' instead.",{"range":"977","text":"978"},"'charSet' is never reassigned. Use 'const' instead.",{"range":"979","text":"980"},"'candidates' is never reassigned. Use 'const' instead.",{"range":"981","text":"982"},{"range":"983","text":"976"},{"range":"984","text":"978"},{"range":"985","text":"980"},{"range":"986","text":"982"},"'ip' is never reassigned. Use 'const' instead.",{"range":"987","text":"988"},{"range":"989","text":"988"},"'found' is never reassigned. Use 'const' instead.",{"range":"990","text":"991"},"Replace `␍⏎········ip[x·+·1]·&&␍⏎········ip[x·+·2]·&&␍⏎········ip[x]·!==·ip[x·+·1]·&&␍⏎········ip[x]·===·ip[x·+·2]␍⏎······` with `ip[x·+·1]·&&·ip[x·+·2]·&&·ip[x]·!==·ip[x·+·1]·&&·ip[x]·===·ip[x·+·2]`",{"range":"992","text":"993"},"'key' is never reassigned. Use 'const' instead.",{"range":"994","text":"995"},"Replace `+` with `·+·`",{"range":"996","text":"997"},"'hyperkey' is never reassigned. Use 'const' instead.",{"range":"998","text":"999"},"Replace `+1]}${ip[x]}0`` with `·+·1]}${ip[x]}0`;`",{"range":"1000","text":"1001"},{"range":"1002","text":"931"},{"range":"1003","text":"1004"},{"range":"1005","text":"997"},{"range":"1006","text":"1007"},"Replace `+1]}0`` with `·+·1]}0`;`",{"range":"1008","text":"1009"},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'screenWidth' is never reassigned. Use 'const' instead.",{"range":"1010","text":"1011"},"'screenHeight' is never reassigned. Use 'const' instead.",{"range":"1012","text":"1013"},"'screen' is never reassigned. Use 'const' instead.",{"range":"1014","text":"1015"},{"range":"1016","text":"1017"},"'action' is never reassigned. Use 'const' instead.",{"range":"1018","text":"1019"},"Delete `␍⏎·····`","delete",{"range":"1020","text":"1021"},"'oldCol' is never reassigned. Use 'const' instead.",{"range":"1022","text":"1023"},"Replace `row=>` with `(row)·=>·`",{"range":"1024","text":"1025"},"Delete `····`",{"range":"1026","text":"1021"},"Delete `··`",{"range":"1027","text":"1021"},"'oldRow' is never reassigned. Use 'const' instead.",{"range":"1028","text":"1029"},"'width' is never reassigned. Use 'const' instead.",{"range":"1030","text":"1031"},{"range":"1032","text":"1011"},{"range":"1033","text":"1013"},{"range":"1034","text":"1015"},{"range":"1035","text":"1017"},{"range":"1036","text":"1019"},"prefer-template","Unexpected string concatenation.","unexpectedStringConcatenation",{"range":"1037","text":"1038"},{"range":"1039","text":"1040"},{"range":"1041","text":"1029"},{"range":"1042","text":"1031"},"prefer-destructuring","Use object destructuring.","VariableDeclarator","preferDestructuring",{"range":"1043","text":"1044"},"'match' is never reassigned. Use 'const' instead.",{"range":"1045","text":"1046"},{"range":"1047","text":"1046"},"Replace `␍⏎········decompress(input.substring(x,·x·+·parseInt(segLength)))·*·(parseInt(repeats)` with `·decompress(input.substring(x,·x·+·parseInt(segLength)))·*·parseInt(repeats`",{"range":"1048","text":"1049"},"Replace `␍⏎······/bot·(\\d*)·gives·low·to·(\\w*)·(\\d*)·and·high·to·(\\w*)·(\\d*)/␍⏎····` with `/bot·(\\d*)·gives·low·to·(\\w*)·(\\d*)·and·high·to·(\\w*)·(\\d*)/`",{"range":"1050","text":"1051"},"no-constant-condition","Unexpected constant condition.",{"range":"1052","text":"1053"},{"range":"1054","text":"1051"},"'outputs' is never reassigned. Use 'const' instead.",{"range":"1055","text":"1056"},{"range":"1057","text":"1053"},"dot-notation","[\"O0\"] is better written in dot notation.","useDot",{"range":"1058","text":"1059"},"[\"O1\"] is better written in dot notation.",{"range":"1060","text":"1061"},"[\"O2\"] is better written in dot notation.",{"range":"1062","text":"1063"},{"range":"1064","text":"1065"},"spaced-comment","Expected exception block, space or tab after '//' in comment.","Line","expectedExceptionAfter",{"range":"1066","text":"931"},{"range":"1067","text":"1068"},{"range":"1069","text":"931"},{"range":"1070","text":"931"},"'destinationFloor' is never reassigned. Use 'const' instead.",{"range":"1071","text":"1072"},"'item1' is never reassigned. Use 'const' instead.",{"range":"1073","text":"1074"},"'item2' is never reassigned. Use 'const' instead.",{"range":"1075","text":"1076"},"'nextFloors' is never reassigned. Use 'const' instead.",{"range":"1077","text":"1078"},"Replace `␍⏎··········nextFloors[elevatorFloor].indexOf(item1),␍⏎··········1␍⏎········` with `nextFloors[elevatorFloor].indexOf(item1),·1`",{"range":"1079","text":"1080"},"Replace `␍⏎············nextFloors[elevatorFloor].indexOf(item2),␍⏎············1␍⏎··········` with `nextFloors[elevatorFloor].indexOf(item2),·1`",{"range":"1081","text":"1082"},"'nextMinMoves' is never reassigned. Use 'const' instead.",{"range":"1083","text":"1084"},"Replace `␍⏎··········nextFloors,␍⏎··········destinationFloor,␍⏎··········[...history,·stateKey],␍⏎··········memo␍⏎········` with `nextFloors,·destinationFloor,·[...history,·stateKey],·memo`",{"range":"1085","text":"1086"},"'newFloors' is never reassigned. Use 'const' instead.",{"range":"1087","text":"1088"},"guard-for-in","The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.","ForInStatement","wrap","'floor' is never reassigned. Use 'const' instead.",{"range":"1089","text":"1090"},{"range":"1091","text":"1090"},"'item' is never reassigned. Use 'const' instead.",{"range":"1092","text":"1093"},"Replace `␍⏎············(val)·=>·val.chem·===·item.chem·&&·val.type·===·\"generator\"␍⏎··········` with `(val)·=>·val.chem·===·item.chem·&&·val.type·===·\"generator\"`",{"range":"1094","text":"1095"},"Replace `␍⏎············(val)·=>·val.chem·!==·item.chem·&&·val.type·===·\"generator\"␍⏎··········` with `(val)·=>·val.chem·!==·item.chem·&&·val.type·===·\"generator\"`",{"range":"1096","text":"1097"},"Replace `(␍⏎····floors.first.length·===·0·&&␍⏎····floors.second.length·===·0·&&␍⏎····floors.third.length·===·0␍⏎··)` with `floors.first.length·===·0·&&·floors.second.length·===·0·&&·floors.third.length·===·0`",{"range":"1098","text":"1099"},{"range":"1100","text":"1090"},"'floorValues' is never reassigned. Use 'const' instead.",{"range":"1101","text":"1102"},"no-unused-vars","'input' is defined but never used.","unusedVar","Delete `␍⏎`",{"range":"1103","text":"1021"},"import/extensions","Unexpected use of file extension \"js\" for \"../../Computer.js\"",{"range":"1104","text":"969"},"Replace `·registers[params[1]]·=·Number.isInteger(parseInt(params[0]))·?·parseInt(params[0])·:·registers[params[0]];·return·1;` with `␍⏎······registers[params[1]]·=·Number.isInteger(parseInt(params[0]))␍⏎········?·parseInt(params[0])␍⏎········:·registers[params[0]];␍⏎······return·1;␍⏎···`",{"range":"1105","text":"1106"},"Replace `·registers[params[0]]++;·return·1;` with `␍⏎······registers[params[0]]++;␍⏎······return·1;␍⏎···`",{"range":"1107","text":"1108"},"Replace `·registers[params[0]]--;·return·1;` with `␍⏎······registers[params[0]]--;␍⏎······return·1;␍⏎···`",{"range":"1109","text":"1110"},"Replace `·return·(Number.isInteger(parseInt(params[0]))·?·parseInt(params[0])·:·registers[params[0]])·!==·0·?·parseInt(params[1])·:·1;·}` with `␍⏎······return·(Number.isInteger(parseInt(params[0]))␍⏎········?·parseInt(params[0])␍⏎········:·registers[params[0]])·!==·0␍⏎········?·parseInt(params[1])␍⏎········:·1;␍⏎····},`",{"range":"1111","text":"1112"},{"range":"1113","text":"969"},"[\"a\"] is better written in dot notation.",{"range":"1114","text":"1115"},{"range":"1116","text":"969"},{"range":"1117","text":"1106"},{"range":"1118","text":"1108"},{"range":"1119","text":"1110"},{"range":"1120","text":"1112"},{"range":"1121","text":"969"},"[\"c\"] is better written in dot notation.",{"range":"1122","text":"1123"},{"range":"1124","text":"1115"},{"range":"1125","text":"1021"},{"range":"1126","text":"1021"},{"range":"1127","text":"969"},{"range":"1128","text":"969"},"Replace `-` with `·-·`",{"range":"1129","text":"1130"},"Replace `+1]·&&·candidate[x+1]·===·candidate[x+` with `·+·1]·&&·candidate[x·+·1]·===·candidate[x·+·`",{"range":"1131","text":"1132"},{"range":"1133","text":"969"},{"range":"1134","text":"969"},{"range":"1135","text":"969"},{"range":"1136","text":"969"},{"range":"1137","text":"1130"},{"range":"1138","text":"1132"},{"range":"1139","text":"969"},{"range":"1140","text":"969"},"Insert `␍⏎····`",{"range":"1141","text":"1142"},"Replace `row·=>·row.match(/Disc·#([0-9]+)·has·([0-9]+)·positions;·at·time=0,·it·is·at·position·([0-9]+)./)` with `(row)·=>␍⏎······row.match(/Disc·#([0-9]+)·has·([0-9]+)·positions;·at·time=0,·it·is·at·position·([0-9]+)./)␍⏎····`",{"range":"1143","text":"1144"},"Replace `row` with `(row)`",{"range":"1145","text":"1146"},{"range":"1147","text":"969"},"'disc' is never reassigned. Use 'const' instead.",{"range":"1148","text":"1149"},{"range":"1150","text":"931"},"Replace `·disc.size-((disc.pos·+·elapsed)·%·disc.size)-` with `disc.size·-·((disc.pos·+·elapsed)·%·disc.size)·-·`",{"range":"1151","text":"1152"},{"range":"1153","text":"969"},{"range":"1154","text":"1142"},{"range":"1155","text":"1144"},{"range":"1156","text":"1146"},{"range":"1157","text":"969"},{"range":"1158","text":"1149"},{"range":"1159","text":"931"},{"range":"1160","text":"1152"},{"range":"1161","text":"969"},"'atan' is defined but never used.","'map' is defined but never used.","Replace `val` with `(val)`",{"range":"1162","text":"1163"},"Replace `val·=>·val·?·0·:·1` with `(val)·=>·(val·?·0·:·1)`",{"range":"1164","text":"1165"},{"range":"1166","text":"969"},"no-shadow","'checkSum' is already declared in the upper scope on line 31 column 7.","noShadow",{"range":"1167","text":"969"},{"range":"1168","text":"1163"},{"range":"1169","text":"1165"},{"range":"1170","text":"969"},{"range":"1171","text":"969"},{"range":"1172","text":"1021"},{"range":"1173","text":"1021"},"'row' is defined but never used.","Expected '!==' and instead saw '!='.","Replace `'^'·:·'.'` with `\"^\"·:·\".\"`",{"range":"1174","text":"1175"},{"range":"1176","text":"1175"},{"range":"1177","text":"931"},"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'even'.","unsafeRefs","'elves' is never reassigned. Use 'const' instead.",{"range":"1178","text":"1179"},"Replace `row=>row.split(\"-\").map(val=>` with `(row)·=>·row.split(\"-\").map((val)·=>·`",{"range":"1180","text":"1181"},{"range":"1182","text":"969"},"Replace `b)=>a[0]-` with `·b)·=>·a[0]·-·`",{"range":"1183","text":"1184"},{"range":"1185","text":"931"},"'allowedRange' is never reassigned. Use 'const' instead.",{"range":"1186","text":"1187"},"'overlap' is never reassigned. Use 'const' instead.",{"range":"1188","text":"1189"},"'difference' is assigned a value but never used.","Replace `(allowed,·remove)=>·{␍⏎··␍⏎}` with `·(allowed,·remove)·=>·{};`",{"range":"1190","text":"1191"},"'allowed' is defined but never used.","'remove' is defined but never used.",{"range":"1192","text":"1021"},{"range":"1193","text":"1021"},{"range":"1194","text":"1021"},{"range":"1195","text":"1021"},{"range":"1196","text":"1021"},{"range":"1197","text":"1021"},{"range":"1198","text":"1021"},{"range":"1199","text":"1021"},{"range":"1200","text":"1021"},{"range":"1201","text":"1021"},{"range":"1202","text":"1021"},[270,277],"const dir",[438,480],"const distance = parseInt(dir.substring(1));",[265,293],"const visited = [`${x}:${y}`];",[302,309],[470,512],[199,973],"(input) => {\r\n  let x = 0;\r\n  let y = 0;\r\n  let direction = 0;\r\n  let visited = [`${x}:${y}`];\r\n  for (let dir of input) {\r\n    if (dir.substring(0, 1) === \"L\") {\r\n      direction--;\r\n    } else {\r\n      direction++;\r\n    }\r\n    direction += 4;\r\n    direction %= 4;\r\n    let distance = parseInt(dir.substring(1));\r\n    for (let i = 0; i < distance; i++) {\r\n      switch (direction) {\r\n        case 0:\r\n          y--;\r\n          break;\r\n        case 1:\r\n          x++;\r\n          break;\r\n        case 2:\r\n          y++;\r\n          break;\r\n        case 3:\r\n          x--;\r\n          break;\r\n      }\r\n      if (visited.includes(`${x}:${y}`)) {\r\n        return Math.abs(x) + Math.abs(y);\r\n      } \r\n        visited.push(`${x}:${y}`);\r\n      \r\n    }\r\n  }\r\n\r\n  return 0;\r\n}",[247,333],"const keypad = [\r\n    [\"1\", \"2\", \"3\"],\r\n    [\"4\", \"5\", \"6\"],\r\n    [\"7\", \"8\", \"9\"],\r\n  ];",[337,354],"const pos = [1, 1];",[358,371],"  let code = \"\";",[382,390],"const inst",[413,420],[247,415],"const keypad = [\r\n    [\"\", \"\", \"1\", \"\", \"\"],\r\n    [\"\", \"2\", \"3\", \"5\", \"\"],\r\n    [\"5\", \"6\", \"7\", \"8\", \"9\"],\r\n    [\"\", \"A\", \"B\", \"C\", \"\"],\r\n    [\"\", \"\", \"D\", \"\", \"\"],\r\n  ];",[419,436],"const pos = [2, 0];",[467,475],[498,505],[616,653]," ? pos[0]--",[762,799]," ? pos[1]--",[341,348],"const row",[378,384]," b) => a - ",[422,422]," ",[369,376],[514,521],"const col",[230,286],"/((?:[a-z]+\\-)*[a-z]+)\\-(\\d+)\\[([a-z]+)\\]/",{"messageId":"1203","fix":"1204","desc":"1205"},{"messageId":"1206","fix":"1207","desc":"1208"},{"messageId":"1203","fix":"1209","desc":"1205"},{"messageId":"1206","fix":"1210","desc":"1208"},[404,412],"const room",[594,610],"const counts = {};",[619,627],"const char",[763,797],"const letters = Object.keys(counts);",[230,286],{"messageId":"1203","fix":"1211","desc":"1205"},{"messageId":"1206","fix":"1212","desc":"1208"},{"messageId":"1203","fix":"1213","desc":"1205"},{"messageId":"1206","fix":"1214","desc":"1208"},[386,394],[472,525],"const realName = decrypt(room.name, parseInt(room.id));",[679,689],"\r\n    .split(\"\")\r\n    ",[707,750],"      return char === \"-\" ? \" \"",[821,823],"  })\r\n    ",[881,897],[906,914],[1050,1084],[16,21],"\"md5\"",[246,246],";",[299,330],"const hash = md5(`${input}${x}`);",[264,358],"let x = 0; password.split(\"\").filter((val) => val === \" \").length > 0; x++",[367,398],[217,232],"const chars = [];",[314,322],"const word",[494,505],"const charSet",[523,561],"const candidates = Object.keys(charSet);",[217,232],[314,322],[494,505],[523,561],[240,246],"const ip",[240,246],[315,330],"const found = [];",[550,663],"ip[x + 1] && ip[x + 2] && ip[x] !== ip[x + 1] && ip[x] === ip[x + 2]",[703,734],"const key = `${ip[x]}${ip[x+1]}`;",[728,729]," + ",[746,782],"const hyperkey = `${ip[x+1]}${ip[x]}0`",[768,782]," + 1]}${ip[x]}0`;",[818,818],[942,973],"const key = `${ip[x+1]}${ip[x]}`;",[959,960],[985,1021],"const hyperkey = `${ip[x]}${ip[x+1]}0`",[1015,1021]," + 1]}0`;",[800,821],"const screenWidth = 50;",[825,846],"const screenHeight = 6;",[850,866],"const screen = [];",[916,929],"const row = [];",[1042,1052],"const action",[1289,1296],"",[1465,1516],"const oldCol = [...screen.map(row=>row[action.col])];",[1493,1498],"(row) => ",[1518,1522],[1571,1573],[1672,1709],"const oldRow = [...screen[action.row]];",[1715,1753],"const width = screen[action.row].length;",[800,821],[825,846],[850,866],[916,929],[1042,1052],[1284,1312],"`${acc + curr.join(\"\")  }\\r\\n`",[1403,1458],"const oldCol = [...screen.map((row) => row[action.col])];",[1608,1645],[1651,1689],[275,296],"{length} = input",[501,545],"const match = marker.match(/\\((\\d*)x(\\d*)\\)/);",[490,534],[645,731]," decompress(input.substring(x, x + parseInt(segLength))) * parseInt(repeats",[523,597],"/bot (\\d*) gives low to (\\w*) (\\d*) and high to (\\w*) (\\d*)/",[1039,1046],"const key",[523,597],[1035,1052],"const outputs = {};",[1111,1118],[1984,1990],".O0",[2003,2009],".O1",[2022,2028],".O2",[204,490],"const match = curr.match(\r\n        /The (\\w*) floor contains (?:a (\\w+)(?:-compatible)? (\\w+)|nothing relevant)(?:(?:, | )+(?:and )?(?:a (\\w+)(?:-compatible)? (\\w+)))?(?:(?:, )?(?:and )?(?:a (\\w+)(?:-compatible)? (\\w+)))?(?:(?:, )?(?:and )?(?:a (\\w+)(?:-compatible)? (\\w+)))?\\./\r\n      );",[1007,1007],[1245,1259],"`${stateKey  }*`",[1402,1402],[1577,1577],[2046,2066],"const destinationFloor",[2099,2108],"const item1",[2149,2158],"const item2",[2252,2288],"const nextFloors = copyFloors(floors);",[2382,2458],"nextFloors[elevatorFloor].indexOf(item1), 1",[2580,2662],"nextFloors[elevatorFloor].indexOf(item2), 1",[2685,2828],"const nextMinMoves = makeMove(\r\n          nextFloors,\r\n          destinationFloor,\r\n          [...history, stateKey],\r\n          memo\r\n        );",[2713,2826],"nextFloors, destinationFloor, [...history, stateKey], memo",[3175,3194],"const newFloors = {};",[3203,3212],"const floor",[3350,3359],[3398,3406],"const item",[3497,3582],"(val) => val.chem === item.chem && val.type === \"generator\"",[3624,3709],"(val) => val.chem !== item.chem && val.type === \"generator\"",[3856,3962],"floors.first.length === 0 && floors.second.length === 0 && floors.third.length === 0",[4046,4055],[4074,4146],"const floorValues = floors[floor].map((val) => `${val.chem}:${val.type}`);",[209,211],[40,40],[374,491],"\r\n      registers[params[1]] = Number.isInteger(parseInt(params[0]))\r\n        ? parseInt(params[0])\r\n        : registers[params[0]];\r\n      return 1;\r\n   ",[529,563],"\r\n      registers[params[0]]++;\r\n      return 1;\r\n   ",[601,635],"\r\n      registers[params[0]]--;\r\n      return 1;\r\n   ",[673,800],"\r\n      return (Number.isInteger(parseInt(params[0]))\r\n        ? parseInt(params[0])\r\n        : registers[params[0]]) !== 0\r\n        ? parseInt(params[1])\r\n        : 1;\r\n    },",[805,805],[985,990],".a",[40,40],[374,491],[529,563],[601,635],[673,800],[805,805],[950,955],".c",[1017,1022],[209,211],[209,211],[321,321],[698,698],[790,791]," - ",[838,876]," + 1] && candidate[x + 1] === candidate[x + ",[941,941],[1269,1269],[321,321],[855,855],[947,948],[995,1033],[1098,1098],[1426,1426],[152,152],"\r\n    ",[175,272],"(row) =>\r\n      row.match(/Disc #([0-9]+) has ([0-9]+) positions; at time=0, it is at position ([0-9]+)./)\r\n    ",[284,287],"(row)",[435,435],[460,468],"const disc",[628,628],[656,702],"disc.size - ((disc.pos + elapsed) % disc.size) - ",[840,840],[152,152],[175,272],[284,287],[435,435],[460,468],[628,628],[656,702],[840,840],[206,209],"(val)",[599,617],"(val) => (val ? 0 : 1)",[660,660],[843,843],[206,209],[604,622],[665,665],[848,848],[209,211],[209,211],[589,598],"\"^\" : \".\"",[593,602],[350,350],[213,263],"const elves = Object.keys(new Array(input).fill(0));",[169,198],"(row) => row.split(\"-\").map((val) => ",[301,301],[319,328]," b) => a[0] - ",[336,336],[428,444],"const allowedRange",[602,613],"const overlap",[780,808]," (allowed, remove) => {};",[209,211],[209,211],[209,211],[209,211],[209,211],[209,211],[209,211],[209,211],[209,211],[209,211],[209,211],"removeEscape",{"range":"1215","text":"1021"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1216","text":"1217"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1218","text":"1021"},{"range":"1219","text":"1217"},{"range":"1220","text":"1021"},{"range":"1221","text":"1217"},{"range":"1222","text":"1021"},{"range":"1223","text":"1217"},[249,250],[249,249],"\\",[260,261],[260,260],[249,250],[249,249],[260,261],[260,260]]